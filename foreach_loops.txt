File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Accounting.php
<?php

namespace App\Controllers;

use App\Models\AccountingModel;
use App\Models\EmailModel;
class Accounting extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\AccountingModel
     */
    public $accounting;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    public $validation;
    public $accountingModel;
    public $input;
    public $load;
    public $applicationModel;
    public function __construct()
    {

        parent::__construct();
        
        $this->appLib = service('appLib'); 
        $this->accounting = new \App\Models\AccountingModel();
        $this->email = new \App\Models\EmailModel();
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        if (!moduleIsEnabled('office_accounting')) {
            access_denied();
        }
    }
    /* account form validation rules */
    protected function account_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->set_rules('branch_id', translate('branch'), 'required');
        }
        $this->validation->set_rules('account_name', translate('account_name'), ['trim', 'required', ['unique_account_name', [$this->accounting_model, 'unique_account_name']]]);
        $this->validation->set_rules('opening_balance', translate('opening_balance'), 'trim|numeric');
    }
    // add new account for office accounting
    public function index()
    {
        // check access permission
        if (!get_permission('account', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('account', 'is_add')) {
                access_denied();
            }
            $this->account_validation();
            if ($this->validation->run() !== false) {
                $data = $this->request->getPost();
                $this->accountingModel->saveAccounts($data);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = $_SERVER['HTTP_REFERER'];
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['accountslist'] = $this->appLib->getTable('accounts');
        $this->data['sub_page'] = 'accounting/index';
        $this->data['main_menu'] = 'accounting';
        $this->data['title'] = translate('office_accounting');
        $this->view('layout/index', $this->data);
    }
    // update existing account if passed id
    public function edit($id = '')
    {
        if (!get_permission('account', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->account_validation();
            if ($this->validation->run() !== false) {
                $data = $this->request->getPost();
                $this->accountingModel->saveAccounts($data);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('accounting');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['account'] = $this->appLib->getTable('accounts', ['t.id' => $id], true);
        $this->data['sub_page'] = 'accounting/edit';
        $this->data['main_menu'] = 'accounting';
        $this->data['title'] = translate('office_accounting');
        $this->view('layout/index', $this->data);
    }
    // delete account from database
    public function delete($id = '')
    {
        if (!get_permission('account', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('accounts')->delete();
        if ($db->affectedRows() > 0) {
            $this->db->table('account_id', $id)->where();
            $this->db->table('transactions')->delete();
        }
    }
    // add new voucher head for voucher
    public function voucher_head()
    {
        if ($_POST !== []) {
            if (!get_permission('voucher_head', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->set_rules('branch_id', translate('branch'), 'required');
            }
            $this->validation->set_rules('voucher_head', translate('name'), ['trim', 'required', ['unique_voucher_head', [$this->accounting_model, 'unique_voucher_head']]]);
            $this->validation->set_rules('type', translate('type'), 'trim|required');
            if ($this->validation->run() !== false) {
                $arrayHead = ['branch_id' => $this->applicationModel->get_branch_id(), 'name' => $this->request->getPost('voucher_head'), 'type' => $this->request->getPost('type')];
                $this->db->table('voucher_head', $arrayHead)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect(current_url());
            }
        }
        $this->data['productlist'] = $this->appLib->getTable('voucher_head', ['system' => 0]);
        $this->data['title'] = translate('office_accounting');
        $this->data['sub_page'] = 'accounting/voucher_head';
        $this->data['main_menu'] = 'accounting';
        $this->view('layout/index', $this->data);
    }
    // update existing voucher head if passed id
    public function voucher_head_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('voucher_head', 'is_edit')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->set_rules('branch_id', translate('branch'), 'required');
            }
            $this->validation->set_rules('voucher_head', translate('name'), ['trim', 'required', ['unique_voucher_head', [$this->accounting_model, 'unique_voucher_head']]]);
            if ($this->validation->run() !== false) {
                $voucher_head_id = $this->request->getPost('voucher_head_id');
                $arrayHead = ['name' => $this->request->getPost('voucher_head')];
                $this->db->table('id', $voucher_head_id)->where();
                $this->db->table('voucher_head', $arrayHead)->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('accounting/voucher_head');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function voucherHeadDetails()
    {
        if (get_permission('voucher_head', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('voucher_head');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    // delete voucher head from database
    public function voucher_head_delete($id)
    {
        if (!get_permission('voucher_head', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('voucher_head')->delete();
    }
    // this function is used to add voucher data
    public function voucher_deposit()
    {
        if (!get_permission('deposit', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['voucherlist'] = $this->accountingModel->getVoucherList('deposit');
        $this->data['sub_page'] = 'accounting/voucher_deposit';
        $this->data['main_menu'] = 'accounting';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['title'] = translate('office_accounting');
        $this->view('layout/index', $this->data);
    }
    // this function is used to add voucher data
    public function voucher_expense()
    {
        if (!get_permission('expense', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['voucherlist'] = $this->accountingModel->getVoucherList('expense');
        $this->data['sub_page'] = 'accounting/voucher_expense';
        $this->data['main_menu'] = 'accounting';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['title'] = translate('office_accounting');
        $this->view('layout/index', $this->data);
    }
    public function voucher_save()
    {
        if ($_POST !== []) {
            $type = $this->request->getPost('voucher_type');
            if ($type == 'deposit' && !get_permission('deposit', 'is_add')) {
                ajax_access_denied();
            }
            if ($type == 'expense' && !get_permission('expense', 'is_add')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->set_rules('branch_id', translate('branch'), 'required');
            }
            $this->validation->set_rules('account_id', translate('account'), 'trim|required');
            $this->validation->set_rules('voucher_head_id', translate('voucher_head'), 'trim|required');
            $this->validation->set_rules('amount', translate('amount'), 'trim|required|numeric');
            $this->validation->set_rules('date', translate('date'), 'trim|required|callback_get_valid_date');
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save data into table
                $insert_id = $this->accountingModel->saveVoucher($post);
                if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
                    $ext = pathinfo((string) $_FILES["attachment_file"]["name"], PATHINFO_EXTENSION);
                    $file_name = $insert_id . '.' . $ext;
                    move_uploaded_file($_FILES["attachment_file"]["tmp_name"], "./uploads/attachments/voucher/" . $file_name);
                    $this->db->table('id', $insert_id)->where();
                    $this->db->table('transactions', ['attachments' => $file_name])->update();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function all_transactions()
    {
        if (!get_permission('all_transactions', 'is_view')) {
            access_denied();
        }
        $this->data['voucherlist'] = $this->accountingModel->getVoucherList();
        $this->data['sub_page'] = 'accounting/all_transactions';
        $this->data['main_menu'] = 'accounting';
        $this->data['title'] = translate('office_accounting');
        $this->view('layout/index', $this->data);
    }
    // this function is used to voucher data update
    public function voucher_deposit_edit($id = '')
    {
        if (!get_permission('deposit', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->validation->set_rules('voucher_head_id', translate('voucher_head'), 'trim|required');
            $this->validation->set_rules('date', translate('date'), 'trim|required');
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                // update data into table
                $insert_id = $this->accountingModel->voucherEdit($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('accounting/voucher_deposit');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['deposit'] = $this->appLib->getTable('transactions', ['t.id' => $id], true);
        $this->data['sub_page'] = 'accounting/voucher_deposit_edit';
        $this->data['main_menu'] = 'accounting';
        $this->data['title'] = translate('office_accounting');
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->view('layout/index', $this->data);
    }
    // this function is used to voucher data update
    public function voucher_expense_edit($id = '')
    {
        if (!get_permission('expense', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->validation->set_rules('voucher_head_id', translate('voucher_head'), 'trim|required');
            $this->validation->set_rules('date', translate('date'), 'trim|required');
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                // update data into table
                $insert_id = $this->accountingModel->voucherEdit($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('accounting/voucher_expense');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['expense'] = $this->appLib->getTable('transactions', ['t.id' => $id], true);
        $this->data['sub_page'] = 'accounting/voucher_expense_edit';
        $this->data['main_menu'] = 'accounting';
        $this->data['title'] = translate('office_accounting');
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->view('layout/index', $this->data);
    }
    // delete into voucher table by voucher id
    public function voucher_delete($id)
    {
        $q = $db->table('transactions')->get('transactions')->row_array();
        if ($q['type'] == 'expense') {
            if (!get_permission('expense', 'is_delete')) {
                access_denied();
            }
            $sql = "UPDATE accounts SET balance = balance + " . $q['amount'] . " WHERE id = " . $db->escape($q['account_id']);
            $db->query($sql);
        } elseif ($q['type'] == 'deposit') {
            if (!get_permission('deposit', 'is_delete')) {
                access_denied();
            }
            $sql = "UPDATE accounts SET balance = balance - " . $q['amount'] . " WHERE id = " . $db->escape($q['account_id']);
            $db->query($sql);
        }
        $filepath = FCPATH . 'uploads/attachments/voucher/' . $q['attachments'];
        if (file_exists($filepath)) {
            unlink($filepath);
        }
        $this->db->table('id', $id)->where();
        $this->db->table('transactions')->delete();
    }
    // account statement by date to date
    public function account_statement()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $account_id = $this->request->getPost('account_id');
            $type = $this->request->getPost('type');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->accountingModel->getStatementReport($account_id, $type, $start, $end);
        }
        $this->data['title'] = translate('financial_reports');
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['sub_page'] = 'accounting/account_statement';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    // income repots by date to date
    public function income_repots()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->accountingModel->getIncomeExpenseRepots($branchID, $start, $end, 'deposit');
        }
        $this->data['title'] = translate('financial_reports');
        $this->data['sub_page'] = 'accounting/income_repots';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    public function expense_repots()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->accountingModel->getIncomeExpenseRepots($branchID, $start, $end, 'expense');
        }
        $this->data['title'] = translate('financial_reports');
        $this->data['sub_page'] = 'accounting/expense_repots';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    // account balance sheet
    public function balance_sheet()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['results'] = $this->accountingModel->get_balance_sheet($branchID);
        $this->data['title'] = translate('financial_reports');
        $this->data['sub_page'] = 'accounting/balance_sheet';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    // income vs expense repots by date to date
    public function incomevsexpense()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->accountingModel->get_incomevsexpense($branchID, $start, $end);
        }
        $this->data['title'] = translate('financial_reports');
        $this->data['sub_page'] = 'accounting/income_vs_expense';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    public function transitions_repots()
    {
        if (!get_permission('accounting_reports', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->accountingModel->getTransitionsRepots($branchID, $start, $end);
        }
        $this->data['title'] = translate('financial_reports');
        $this->data['sub_page'] = 'accounting/transitions_repots';
        $this->data['main_menu'] = 'accounting_repots';
        $this->view('layout/index', $this->data);
    }
    public function getVoucherHead()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        $type = $this->request->getPost('type');
        if (!empty($branch_id)) {
            $result = $db->table('voucher_head')->get('voucher_head')->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function get_valid_date($date)
    {
        $present_date = date('Y-m-d');
        $date = date("Y-m-d", strtotime((string) $date));
        if ($date > $present_date) {
            $this->validation->set_message("get_valid_date", "Please Enter Correct Date");
            return false;
        } else {
            return true;
        }
    }
    public function deposit_download()
    {
        if (get_permission('deposit', 'is_view')) {
            helper('download');
            $encrypt_name = html_escape(urldecode((string) $this->request->getGet('id')));
            if (!empty($encrypt_name)) {
                if (!is_superadmin_loggedin()) {
                    $this->db->table('branch_id', get_loggedin_branch_id())->where();
                }
                $file_name = $db->table('transactions')->get('transactions')->row()->attachments;
                if (!empty($file_name)) {
                    force_download($file_name, file_get_contents('uploads/attachments/voucher/' . $file_name));
                }
            }
        }
    }
    public function expense_download()
    {
        if (get_permission('expense', 'is_view')) {
            helper('download');
            $encrypt_name = html_escape(urldecode((string) $this->request->getGet('id')));
            if (!empty($encrypt_name)) {
                if (!is_superadmin_loggedin()) {
                    $this->db->table('branch_id', get_loggedin_branch_id())->where();
                }
                $file_name = $db->table('transactions')->get('transactions')->row()->attachments;
                if (!empty($file_name)) {
                    force_download($file_name, file_get_contents('uploads/attachments/voucher/' . $file_name));
                }
            }
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Addons.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.2
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Addons.php
 * @copyright : Reserved RamomCoder Team
 */
class Addons extends MyController
 
{
    protected $db;



    /**
     * @var App\Models\AddonsModel
     */
    public $addons;
    public $validation;
    public $load;
    public $input;
    public $addonsModel;
    protected $extractPath = "";
    protected $initClassPath = "";
    private $tmp_dir;
    private $tmp_update_dir;
    private $purchase_code;
    private $latest_version;
    public function __construct()
    {



        $this->addons = new \App\Models\AddonsModel();
        if (!is_superadmin_loggedin()) {
            access_denied();
        }
    }
    public function index()
    {
        $this->manage();
    }
    /* addons manager */
    public function manage()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['purchase_code' => ["label" => translate('purchase_code'), "rules" => 'trim|required']]);
            $this->validation->setRules(['zip_file' => ["label" => 'Addon Zip File', "rules" => 'callback_zipfileHandleUpload[zip_file]']]);
            if (isset($_FILES["zip_file"]) && empty($_FILES['zip_file']['name'])) {
                $this->validation->setRules(['zip_file' => ["label" => 'Addon Zip File', "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                $result = $this->fileUpload();
                if ($result['status'] == 'success') {
                    $array = ['status' => 'success', 'message' => $result['message']];
                } elseif ($result['status'] == 'fail') {
                    $array = ['status' => 'fail', 'error' => ['zip_file' => $result['message']]];
                } elseif ($result['status'] == 'purchase_code') {
                    $array = ['status' => 'fail', 'error' => ['purchase_code' => $result['message']]];
                }
                echo json_encode($array);
                exit;
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['validation_error'] = '';
        $this->data['addonList'] = $this->addonsModel->getList();
        $this->data['title'] = translate('addon_manager');
        $this->data['sub_page'] = 'addons/index';
        $this->data['main_menu'] = 'addon';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function zipfileHandleUpload($str, $fields)
    {
        $allowedExts = array_map('trim', array_map('strtolower', explode(',', 'zip')));
        if (isset($_FILES["{$fields}"]) && !empty($_FILES["{$fields}"]['name'])) {
            $file_size = $_FILES["{$fields}"]["size"];
            $file_name = $_FILES["{$fields}"]["name"];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["{$fields}"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('zipfileHandleUpload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
            } else {
                $this->validation->setRule('zipfileHandleUpload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        }
        return null;
    }
    /* addons zip upload */
    private function fileUpload()
    {
        if ($_FILES["zip_file"]['name'] != "") {
            $dir = 'uploads/addons';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
                fopen($dir . '/index.html', 'w');
            }
            $purchaseCode = $this->request->getPost('purchase_code');
            $uploadPath = "uploads/addons/";
            $zipped_fileName = $_FILES['zip_file']['name'];
            move_uploaded_file($_FILES['zip_file']['tmp_name'], $uploadPath . $zipped_fileName);
            $random_dir = generate_encryption_key();
            $this->extractPath = FCPATH . "{$uploadPath}{$random_dir}";
            // unzip uploaded update file and remove zip file.
            $zip = new ZipArchive();
            $res = $zip->open($uploadPath . $zipped_fileName);
            if ($res === true) {
                $fileName = trim($zip->getNameIndex(0), '/');
                $res = $zip->extractTo($uploadPath . $random_dir);
                $zip->close();
                unlink($uploadPath . $zipped_fileName);
                $configPath = "{$uploadPath}{$random_dir}/{$fileName}/config.json";
                if (file_exists($configPath)) {
                    $config = file_get_contents($configPath);
                    if (!($config === '' || $config === '0' || $config === false)) {
                        $json = json_decode($config);
                        if (!empty($json->name) && !empty($json->version) && !empty($json->unique_prefix) && !empty($json->items_code) && !empty($json->last_update) && !empty($json->system_version)) {
                            $current_version = $this->addonsModel->get_current_db_version();
                            if ($json->system_version > $current_version) {
                                $this->addonsModel->directoryRecursive($this->extractPath);
                                $requiredSystem = wordwrap((string) $json->system_version, 1, '.', true);
                                $current_version = wordwrap((string) $current_version, 1, '.', true);
                                return ['status' => 'fail', 'message' => "Minimum System required version {$requiredSystem}, your running version {$current_version}"];
                            }
                            if ($this->addonsModel->addonInstalled($json->unique_prefix)) {
                                $array = [];
                                $array['product_name'] = $json->name;
                                $array['version'] = $json->version;
                                $array['system_version'] = $json->system_version;
                                $array['unique_prefix'] = $json->unique_prefix;
                                $array['purchase_code'] = $purchaseCode;
                                $apiResult = $this->addonsModel->call_CurlApi($array);
                                if (isset($apiResult->status) && $apiResult->status) {
                                    if (!empty($apiResult->sql)) {
                                        $sqlContent = $apiResult->sql;
                                        $db->query('USE ' . $this->db->database . ';');
                                        foreach (explode(";\n", $sqlContent) as $sql) {
    $sql = trim($sql);
                                            if ($sql !== '' && $sql !== '0') {
                                                $db->query($sql);
}
                                        }
                                        // handel addon all directory and files
                                        $this->addonsModel->copyDirectory("{$uploadPath}{$random_dir}/{$fileName}/", './');
                                        if (file_exists('./config.json')) {
                                            unlink('./config.json');
                                        }
                                        // initClass script execute
                                        if (!empty($json->initClass)) {
                                            $initClassPath = FCPATH . "{$uploadPath}{$random_dir}/{$fileName}/{$json->initClass}";
                                            if (file_exists($initClassPath) && is_readable($initClassPath) && include $initClassPath) {
                                                $init = new InitClass();
                                                $init->up();
                                                unlink("./{$json->initClass}");
                                            }
                                        }
                                        //Insert addon details in DB
                                        $arrayAddon = ['name' => $json->name, 'prefix' => $json->unique_prefix, 'version' => $json->version, 'purchase_code' => $purchaseCode, 'items_code' => $json->items_code, 'created_at' => date('Y-m-d H:i:s')];
                                        $this->db->table('addon', $arrayAddon)->insert();
                                        $message = "<div class='alert alert-success mt-lg'><div>\r\n                                            <h4>Congratulations your {$json->name} has been successfully Installed.</h4>\r\n                                            <p>\r\n                                                This window will reload automatically in 5 seconds. You are strongly recommended to manually clear your browser cache.\r\n                                            </p>\r\n                                        </div></div>";
                                        $this->addonsModel->directoryRecursive($this->extractPath);
                                        return ['status' => 'success', 'message' => $message];
                                    } else {
                                        $this->addonsModel->directoryRecursive($this->extractPath);
                                        return ['status' => 'purchase_code', 'message' => 'SQL not found'];
                                    }
                                } else {
                                    $this->addonsModel->directoryRecursive($this->extractPath);
                                    return ['status' => 'purchase_code', 'message' => $apiResult->message];
                                }
                            } else {
                                // This addon already installed
                                $this->addonsModel->directoryRecursive($this->extractPath);
                                return ['status' => 'fail', 'message' => "This addon already installed."];
                            }
                        } else {
                            // Invalid JSON
                            $this->addonsModel->directoryRecursive($this->extractPath);
                            return ['status' => 'fail', 'message' => "Invalid config JSON."];
                        }
                    } else {
                        // JSON content is empty
                        $this->addonsModel->directoryRecursive($this->extractPath);
                        return ['status' => 'fail', 'message' => "JSON content is empty."];
                    }
                } else {
                    // Config file does not exist
                    $this->addonsModel->directoryRecursive($this->extractPath);
                    return ['status' => 'fail', 'message' => "Config file does not exist."];
                }
            } else {
                unlink($uploadPath . $zipped_fileName);
                return ['status' => 'fail', 'message' => "Zip extract fail."];
            }
        }
        return null;
    }
    public function update($items = '')
    {
        $addon = $this->addonsModel->getAddonDetails($items);
        if (empty($addon)) {
            set_alert('error', translate('addon_not_found'));
            return redirect()->to(base_url('addons/manage'));
        }
        $this->data['status'] = 1;
        if (!extension_loaded('curl')) {
            $this->data['curl_extension'] = 0;
        } elseif (!empty($addon->purchase_code)) {
            $this->data['purchase_code'] = true;
            if ($this->addonsModel->is_connected()) {
                $this->data['internet'] = true;
                $this->data['curl_extension'] = 1;
                $get_update_info = $this->addonsModel->get_update_info($addon);
                if (str_contains((string) $get_update_info, 'Curl Error -')) {
                    $this->data['update_errors'] = $get_update_info;
                    $this->data['latest_version'] = "0.0.0";
                    $this->data['support_expiry_date'] = "-/-/-";
                    $this->data['purchase_code'] = "-";
                    $this->data['block'] = 0;
                } else {
                    $get_update_info = json_decode((string) $get_update_info);
                    $this->data['update_errors'] = "";
                    $this->data['get_update_info'] = $get_update_info;
                    $this->data['latest_version'] = $get_update_info->latest_version;
                    $this->data['support_expiry_date'] = $get_update_info->support_expiry_date;
                    $this->data['purchase_code'] = $get_update_info->purchase_code;
                    $this->data['block'] = $get_update_info->block;
                    $this->data['status'] = $get_update_info->status;
                }
            } else {
                $this->data['internet'] = false;
            }
        } else {
            $this->data['latest_version'] = "0";
            $this->data['purchase_code'] = false;
        }
        $this->data['zip_extension'] = extension_loaded('zip') ? 1 : 0;
        $this->data['addon'] = $addon;
        $this->data['current_version'] = $addon->version;
        $this->data['items'] = $addon->prefix;
        $this->data['title'] = translate('addon_update');
        $this->data['sub_page'] = 'addons/addon_update';
        $this->data['main_menu'] = 'addon';
        echo view('layout/index', $this->data);
    }
    public function update_install()
    {
        $latest_version = $this->request->getPost('latest_version');
        $items = $this->request->getPost('items');
        $system_version = $this->addonsModel->get_current_db_version();
        $addon = $this->addonsModel->getAddonDetails($items);
        if (empty($addon)) {
            echo json_encode(['status' => 0, 'message' => translate('addon_not_found')]);
            exit;
        }
        $this->latest_version = $latest_version;
        $this->purchase_code = $addon->purchase_code;
        $tmp_dir = @ini_get('upload_tmp_dir');
        if (!$tmp_dir) {
            $tmp_dir = @sys_get_temp_dir();
            if ($tmp_dir === '' || $tmp_dir === '0') {
                $tmp_dir = FCPATH . 'temp';
            }
        }
        $tmp_dir = rtrim($tmp_dir, '/') . '/';
        if (!is_writable($tmp_dir)) {
            $message = "Temporary directory not writable - <b>{$tmp_dir}</b><br />Please contact your hosting provider make this directory writable. The directory needs to be writable for the update files.";
            echo json_encode(['status' => 0, 'message' => $message]);
            exit;
        }
        $this->tmp_dir = $tmp_dir;
        $tmp_dir = $tmp_dir . 'v' . $latest_version . '/';
        $this->tmp_update_dir = $tmp_dir;
        if (!is_dir($tmp_dir)) {
            mkdir($tmp_dir);
            fopen($tmp_dir . 'index.html', 'w');
        }
        $zipFile = $tmp_dir . $latest_version . '.zip';
        // Local Zip File Path
        $zipResource = fopen($zipFile, "w+");
        // Get The Zip File From Server
        $url = UPDATE_INSTALL_ADDON_URL;
        $curl_handle = curl_init();
        curl_setopt($curl_handle, CURLOPT_URL, $url);
        curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');
        curl_setopt($curl_handle, CURLOPT_FAILONERROR, true);
        curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($curl_handle, CURLOPT_AUTOREFERER, true);
        curl_setopt($curl_handle, CURLOPT_BINARYTRANSFER, true);
        curl_setopt($curl_handle, CURLOPT_TIMEOUT, 50);
        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($curl_handle, CURLOPT_FILE, $zipResource);
        curl_setopt($curl_handle, CURLOPT_POSTFIELDS, ['purchase_code' => $this->purchase_code, 'item' => $addon->prefix, 'current_version' => $addon->version, 'system_version' => $system_version, 'url' => base_url()]);
        $success = curl_exec($curl_handle);
        if (!$success) {
            fclose($zipResource);
            $this->cleanTmpFiles();
            $error = $this->getErrorByStatusCode(curl_getinfo($curl_handle, CURLINFO_HTTP_CODE));
            if ($error == '') {
                // Uknown error
                $error = curl_error($curl_handle);
            }
            echo json_encode(['status' => 0, 'message' => $error]);
            exit;
        }
        curl_close($curl_handle);
        $zip = new ZipArchive();
        if ($zip->open($zipFile) === true) {
            if (!$zip->extractTo('./')) {
                echo json_encode(['status' => 0, 'message' => 'Failed to extract downloaded zip file']);
                exit;
            } else {
                $initClassPath = FCPATH . "uploads/addons/{$latest_version}/initClass.php";
                if (file_exists($initClassPath) && is_readable($initClassPath) && include $initClassPath) {
                    $init = new InitClass();
                    $init->up();
                    @delete_dir(FCPATH . "uploads/addons/{$latest_version}");
                }
            }
            $zip->close();
        } else {
            echo json_encode(['status' => 0, 'message' => 'Failed to open downloaded zip file']);
            exit;
        }
        fclose($zipResource);
        $this->cleanTmpFiles();
        $message = '<div>
            <h4>Congratulations your Ramom software has been successfully updated ' . config_item('version') . '.</h4>
            <p>
                This window will reload automatically in 5 seconds. You are strongly recommended to manually clear your browser cache.
            </p>
        </div>';
        set_alert('success', translate('you_are_now_using_the_latest_version'));
        echo json_encode(['status' => '1', 'message' => $message]);
    }
    private function cleanTmpFiles()
    {
        if (is_dir($this->tmp_update_dir) && @!delete_dir($this->tmp_update_dir)) {
            @rename($this->tmp_update_dir, $this->tmp_dir . 'delete_this_' . uniqid());
        }
    }
    private function getErrorByStatusCode($statusCode)
    {
        $error = '';
        if ($statusCode == 505) {
            $mailBody = 'Hello. I tried to upgrade to the latest version but for some reason the upgrade failed. Please remove the key from the upgrade log so i can try again. My installation URL is: ' . base_url() . '. Regards.';
            $mailSubject = 'Purchase Key Removal Request - [' . $this->purchase_code . ']';
            $error = 'Purchase key already used to download upgrade files for version ' . wordwrap((string) $this->latest_version, 1, '.', true) . '. Performing multiple auto updates to the latest version with one purchase key is not allowed. If you have multiple installations you must buy another license.<br /><br /> If you have staging/testing installation and auto upgrade is performed there, <b>you should perform manually upgrade</b> in your production area<br /><br /> <h4 class="bold">Upgrade failed?</h4> The error can be shown also if the update failed for some reason, but because the purchase key is already used to download the files, you won’t be able to re-download the files again.<br /><br />Click <a href="mailto:ramomcoder@yahoo.com?subject=' . $mailSubject . '&body=' . $mailBody . '"><b>here</b></a> to send an mail and get your purchase key removed from the upgrade log.';
        } elseif ($statusCode == 506) {
            $error = 'This is not a valid purchase code.';
        } elseif ($statusCode == 507) {
            $error = 'Purchase key empty.';
        } elseif ($statusCode == 508) {
            $error = 'This purchase code is blocked.';
        } elseif ($statusCode == 509) {
            $error = 'This purchase code is not valid for this item.';
        }
        return $error;
    }
    public function update_purchase_code()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['purchase_code' => ["label" => translate('purchase_code'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->db->table('prefix', $post['items'])->where();
                $this->db->table('addon', ['purchase_code' => trim((string) $post['purchase_code'])])->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Ajax.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom School Management System
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Ajax.php
 */
class Ajax extends MyController
 
{
    protected $db;




    /**
     * @var App\Models\AjaxModel
     */
    public $ajax;
    public $applicationModel;
    public $input;
    public $load;
    public $appLib;
    public function __construct()
    {




        $this->ajax = new \App\Models\AjaxModel();
    }
    // get exam list based on the branch
    public function getExamByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $builder->select('id,name,term_id');
            $this->db->table(['branch_id' => $branchID, 'session_id' => get_session_id()])->where();
            $result = $builder->get('exam')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    if ($row['term_id'] != 0) {
                        $term = $db->table('exam_term')->get('exam_term')->row()->name;
                        $name = $row['name'] . ' (' . $term . ')';
} else {
                        $name = $row['name'];
                    }
                    $html .= '<option value="' . $row['id'] . '">' . $name . '</option>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    // get class assign modal
    public function getClassAssignM()
    {
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $branchID = get_type_name_by_id('class', $classID, 'branch_id');
        $html = "";
        $subjects = $builder->getWhere('subject', ['branch_id' => $branchID])->result_array();
        if (count($subjects) > 0) {
            foreach ($subjects as $row) {
    $query_assign = $builder->getWhere("subject_assign", ['class_id' => $classID, 'section_id' => $sectionID, 'session_id' => get_session_id(), 'subject_id' => $row['id']]);
                $html .= '<option value="' . $row['id'] . '"' . ($query_assign->num_rows() != 0 ? 'selected' : '') . '>' . $row['name'] . '</option>';
}
        }
        $data['branch_id'] = $branchID;
        $data['class_id'] = $classID;
        $data['section_id'] = $sectionID;
        $data['subject'] = $html;
        echo json_encode($data);
    }
    public function getAdvanceSalaryDetails()
    {
        if (get_permission('advance_salary', 'is_add')) {
            $this->data['salary_id'] = $this->request->getPost('id');
            echo view('advance_salary/approvel_modalView', $this->data);
        }
    }
    public function getLeaveCategoryDetails()
    {
        if (get_permission('leave_category', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('leave_category');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    public function getDataByBranch()
    {
        $html = "";
        $table = $this->request->getPost('table');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table($table)->get($table)->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getClassByBranch()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $classes = $db->table('class')->get('class')->result_array();
            if (count($classes) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($classes as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getStudentByClass($enroll = 0)
    {
        $html = "";
        $class_id = $this->request->getPost('class_id');
        $section_id = $this->request->getPost('section_id');
        $branch_id = $this->applicationModel->get_branch_id();
        $student_id = $_POST['student_id'] ?? 0;
        if (!empty($class_id)) {
            $builder->select('e.student_id,e.id,e.roll,CONCAT(s.first_name, " ", s.last_name) as fullname');
            $this->db->from('enroll as e');
            $builder->join('student as s', 's.id = e.student_id', 'inner');
            $builder->join('login_credential as l', 'l.user_id = e.student_id and l.role = 7', 'left');
            $this->db->table('l.active', 1)->where();
            $this->db->table('e.session_id', get_session_id())->where();
            if (!empty($section_id)) {
                $this->db->table('e.section_id', $section_id)->where();
            }
            $this->db->table('e.class_id', $class_id)->where();
            $this->db->table('e.branch_id', $branch_id)->where();
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    if ($enroll == 0) {
                        $sel = $row['student_id'] == $student_id ? 'selected' : '';
                        $html .= '<option value="' . $row['student_id'] . '"' . $sel . '>' . $row['fullname'] . ' ( Roll : ' . $row['roll'] . ')</option>';
} else {
                        $sel = $row['id'] == $student_id ? 'selected' : '';
                        $html .= '<option value="' . $row['id'] . '"' . $sel . '>' . $row['fullname'] . ' (' . translate('roll') . " : " . $row['roll'] . ')</option>';
                    }
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_class_first') . '</option>';
        }
        echo $html;
    }
    // get section list based on the class
    public function getSectionByClass()
    {
        $html = "";
        $classID = $this->request->getPost("class_id");
        $mode = $this->request->getPost("all");
        $multi = $this->request->getPost("multi");
        if (!empty($classID)) {
            $getClassTeacher = $this->appLib->getClassTeacher($classID);
            if (is_array($getClassTeacher)) {
                $result = $getClassTeacher;
                if (count($result) == 0) {
                    $builder->select('timetable_class.section_id,section.name as section_name');
                    $this->db->from('timetable_class');
                    $builder->join('section', 'section.id = timetable_class.section_id', 'left');
                    $this->db->table(['timetable_class.teacher_id' => get_loggedin_user_id(), 'timetable_class.session_id' => get_session_id(), 'timetable_class.class_id' => $classID])->where();
                    $this->db->group_by('timetable_class.section_id');
                    $result = $builder->get()->result_array();
                }
            } else {
                $result = $builder->select('sections_allocation.section_id,section.name as section_name')->from('sections_allocation')->join('section', 'section.id = sections_allocation.section_id', 'left')->where('sections_allocation.class_id', $classID)->get()->result_array();
            }
            if (count($result) > 0) {
                if ($multi == false) {
                    $html .= '<option value="">' . translate('select') . '</option>';
                }
                if ($mode == true && !is_array($getClassTeacher)) {
                    $html .= '<option value="all">' . translate('all_sections') . '</option>';
                }
                foreach ($result as $row) {
    $html .= '<option value="' . $row['section_id'] . '">' . $row['section_name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_selection_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_class_first') . '</option>';
        }
        echo $html;
    }
    public function getStafflistRole()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $role_id = $this->request->getPost('role_id');
            $selected_id = $_POST['staff_id'] ?? 0;
            $builder->select('staff.id,staff.name,staff.staff_id,lc.role');
            $this->db->from('staff');
            $builder->join('login_credential as lc', 'lc.user_id = staff.id AND lc.role != 6 AND lc.role != 7', 'inner');
            if (!empty($role_id)) {
                $this->db->table('lc.role', $role_id)->where();
            }
            $this->db->table('staff.branch_id', $branch_id)->where();
            $this->db->order_by('staff.id', 'asc');
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $staff) {
    $selected = $staff['id'] == $selected_id ? 'selected' : '';
                    $html .= "<option value='" . $staff['id'] . "' " . $selected . ">" . $staff['name'] . " (" . $staff['staff_id'] . ")</option>";
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    // get staff all details
    public function getEmployeeList()
    {
        $html = "";
        $role_id = $this->request->getPost('role');
        $designation = $this->request->getPost('designation');
        $department = $this->request->getPost('department');
        $selected_id = $_POST['staff_id'] ?? 0;
        $builder->select('staff.*,staff_designation.name as des_name,staff_department.name as dep_name,login_credential.role as role_id, roles.name as role');
        $this->db->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $this->db->table('login_credential.role', $role_id)->where();
        $this->db->table('login_credential.active', 1)->where();
        if ($designation != '') {
            $this->db->table('staff.designation', $designation)->where();
        }
        if ($department != '') {
            $this->db->table('staff.department', $department)->where();
        }
        $result = $builder->get()->result_array();
        if (count($result) > 0) {
            $html .= "<option value=''>" . translate('select') . "</option>";
            foreach ($result as $row) {
    $selected = $row['id'] == $selected_id ? 'selected' : '';
                $html .= "<option value='" . $row['id'] . "' " . $selected . ">" . $row['name'] . " (" . $row['staff_id'] . ")</option>";
}
        } else {
            $html .= '<option value="">' . translate('no_information_available') . '</option>';
        }
        echo $html;
    }
    // get subject list based on the class
    public function getSubjectByClass()
    {
        $html = "";
        $classID = $this->request->getPost('classID');
        if (!empty($classID)) {
            $builder->select('subject_assign.subject_id,subject.name,subject.subject_code');
            $this->db->from('subject_assign');
            $builder->join('subject', 'subject.id = subject_assign.subject_id', 'left');
            $this->db->table('subject_assign.class_id', $classID)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('subject_assign.branch_id', get_loggedin_branch_id())->where();
            }
            $subjects = $builder->get()->result_array();
            if (count($subjects) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($subjects as $row) {
    $html .= '<option value="' . $row['subject_id'] . '">' . $row['name'] . ' (' . $row['subject_code'] . ')</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_class_first') . '</option>';
        }
        echo $html;
    }
    public function get_salary_template_details()
    {
        if (get_permission('salary_template', 'is_view')) {
            $template_id = $this->request->getPost('id');
            $this->data['allowances'] = $this->ajaxModel->get('salary_template_details', ['type' => 1, 'salary_template_id' => $template_id]);
            $this->data['deductions'] = $this->ajaxModel->get('salary_template_details', ['type' => 2, 'salary_template_id' => $template_id]);
            $this->data['template'] = $this->ajaxModel->get('salary_template', ['id' => $template_id], true);
            echo view('payroll/qview_salary_templete', $this->data);
        }
    }
    public function department_details()
    {
        if (get_permission('department', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('staff_department');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    public function designation_details()
    {
        if (get_permission('designation', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('staff_designation');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    public function getLoginAuto()
    {
        if (is_superadmin_loggedin()) {
            $getBranch = $this->getBranchDetails();
            $data = [];
            $data['student'] = $getBranch['stu_generate'] == 1 ? 1 : 0;
            $data['guardian'] = $getBranch['grd_generate'] == 1 ? 1 : 0;
            echo json_encode($data);
        }
    }
    public function getProductCategoryDetails()
    {
        if (get_permission('product_category', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('product_category');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Alumni.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SmsModel;
use App\Models\DashboardModel;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Alumni.php
 * @copyright : Reserved RamomCoder Team
 */
class Alumni extends AdminController
 
{
    public $appLib;
    protected $db;



    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\AlumniModel
     */
    public $alumni;
    /**
     * @var App\Models\DashboardModel
     */
    public $dashboard;
    public $applicationModel;
    public $input;
    public $load;
    public $validation;
    public $alumniModel;
    public $session;
    public $dashboardModel;
    public $smsModel;
    public function __construct()
    {



        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->sms = new \App\Models\SmsModel();
        $this->alumni = new \App\Models\AlumniModel();
        $this->dashboard = new \App\Models\DashboardModel();
    }
    public function index()
    {
        if (!get_permission('manage_alumni', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost()) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['passing_session'] = $this->request->getPost('passing_session');
            $this->data['students'] = $this->alumniModel->getStudentListByClassSection($this->data['class_id'], $this->data['section_id'], $branchID, $this->data['passing_session']);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['title'] = translate('alumni');
        $this->data['sub_page'] = 'alumni/index';
        $this->data['main_menu'] = 'alumni';
        echo view('layout/index', $this->data);
    }
    // student alumni details send by ajax
    public function alumniDetails()
    {
        if (get_permission('manage_alumni', 'is_view')) {
            $id = $this->request->getPost('id');
            $this->db->table('enroll_id', $id)->where();
            $query = $builder->get('alumni_students');
            $result = $query->row_array();
            if (empty($result)) {
                $result = ['id' => '', 'enroll_id' => '', 'email' => '', 'mobile_no' => '', 'profession' => '', 'address' => '', 'photo' => '', 'image_url' => base_url('uploads/app_image/defualt.png')];
            } else {
                $result['image_url'] = get_image_url('alumni', $result['photo']);
            }
            echo json_encode($result);
        }
    }
    public function save()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['mobile_no' => ["label" => translate('mobile_no'), "rules" => 'trim|required']]);
            $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|valid_email']]);
            // checking profile photo format
            $this->validation->setRules(['user_photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[user_photo]']]);
            if ($this->validation->run() == true) {
                $insertData = ['enroll_id' => $this->request->getPost('enroll_id'), 'email' => $this->request->getPost('email'), 'mobile_no' => $this->request->getPost('mobile_no'), 'profession' => $this->request->getPost('profession'), 'address' => $this->request->getPost('address')];
                $id = $this->request->getPost('id');
                if (!empty($id) && $id != '') {
                    if (!get_permission('manage_alumni', 'is_edit')) {
                        ajax_access_denied();
                    }
                    $alumniImage = $this->request->getPost('old_image');
                    if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                        $alumniImage = $alumniImage == 'defualt.png' ? '' : $alumniImage;
                        $alumniImage = $this->alumniModel->fileupload("user_photo", "./uploads/images/alumni/", $alumniImage, true);
                    }
                    $insertData['photo'] = $alumniImage;
                    $this->db->table('id', $id)->where();
                    $this->db->table('alumni_students', $insertData)->update();
                } else {
                    if (!get_permission('manage_alumni', 'is_add')) {
                        ajax_access_denied();
                    }
                    $alumniImage = 'defualt.png';
                    if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                        $alumniImage = $this->alumniModel->fileupload("user_photo", "./uploads/images/alumni/", '', true);
                    }
                    $insertData['photo'] = $alumniImage;
                    $this->db->table('alumni_students', $insertData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function delete($id)
    {
        if (get_permission('manage_alumni', 'is_delete')) {
            $photo = $db->table('alumni_students')->get('alumni_students')->row()->photo;
            $file_name = FCPATH . '/uploads/images/alumni/' . $photo;
            if (file_exists($file_name)) {
                unlink($file_name);
            }
            $this->db->table('id', $id)->where();
            $this->db->table('alumni_students')->delete();
        }
    }
    public function event()
    {
        if (!get_permission('alumni_events', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $language = 'en';
        $jsArray = ['vendor/moment/moment.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js', 'vendor/fullcalendar/fullcalendar.js'];
        if (session()->get('set_lang') != 'english') {
            $language = $this->dashboardModel->languageShortCodes(session()->get('set_lang'));
            $jsArray[] = "vendor/fullcalendar/locale/{$language}.js";
        }
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-fileupload/bootstrap-fileupload.min.css', 'vendor/fullcalendar/fullcalendar.css'], 'js' => $jsArray];
        $this->data['language'] = $language;
        $this->data['title'] = translate('alumni');
        $this->data['sub_page'] = 'alumni/events';
        $this->data['main_menu'] = 'alumni';
        echo view('layout/index', $this->data);
    }
    public function saveEvents()
    {
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['audience' => ["label" => translate('audience'), "rules" => 'trim|required']]);
            $audience = $this->request->getPost('audience');
            if ($audience == 2) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('class'), "rules" => 'trim|required']]);
            } elseif ($audience == 3) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
            }
            if ($audience != 1) {
                $this->validation->setRules(['passing_session' => ["label" => translate('passing_session') . " " . translate('title'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['event_title' => ["label" => translate('events') . " " . translate('title'), "rules" => 'trim|required']]);
            $this->validation->setRules(['from_date' => ["label" => translate('date_of_start'), "rules" => 'trim|required']]);
            $this->validation->setRules(['to_date' => ["label" => translate('date_of_end'), "rules" => 'trim|required']]);
            $this->validation->setRules(['note' => ["label" => translate('note'), "rules" => 'trim|required']]);
            // checking profile photo format
            $this->validation->setRules(['user_photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[user_photo]']]);
            if ($this->validation->run() == true) {
                $passing_session = "";
                if ($audience != 1) {
                    $selectedList = [];
                    $passing_session = $this->request->getPost('passing_session');
                    foreach ($this->request->getPost('selected_audience') as $user) {
    $selectedList[] = $user;
}
                } else {
                    $selectedList = null;
                }
                $insertData = ['title' => $this->request->getPost('event_title'), 'audience' => $this->request->getPost('audience'), 'session_id' => $passing_session, 'selected_list' => json_encode($selectedList), 'from_date' => $this->request->getPost('from_date'), 'to_date' => $this->request->getPost('to_date'), 'note' => $this->request->getPost('note'), 'branch_id' => $branchID];
                $id = $this->request->getPost('id');
                if (!empty($id) && $id != '') {
                    if (!get_permission('alumni_events', 'is_edit')) {
                        ajax_access_denied();
                    }
                    $alumniImage = $this->request->getPost('old_image');
                    if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                        $alumniImage = $alumniImage == 'defualt.png' ? '' : $alumniImage;
                        $alumniImage = $this->alumniModel->fileupload("user_photo", "./uploads/images/alumni_events/", $alumniImage, true);
                    }
                    $insertData['photo'] = $alumniImage;
                    $this->db->table('id', $id)->where();
                    $this->db->table('alumni_events', $insertData)->update();
                } else {
                    if (!get_permission('alumni_events', 'is_add')) {
                        ajax_access_denied();
                    }
                    $alumniImage = 'defualt.png';
                    if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                        $alumniImage = $this->alumniModel->fileupload("user_photo", "./uploads/images/alumni_events/", '', true);
                    }
                    $insertData['photo'] = $alumniImage;
                    $this->db->table('alumni_events', $insertData)->insert();
                }
                // send sms to student
                if (isset($_POST['send_sms'])) {
                    $studentsArray = [];
                    if ($audience == 1) {
                        $students = $this->alumniModel->getlist($branchID);
                        foreach ($students as $student) {
    $arraySMS = ['name' => $student['fullname'], 'mobile_no' => $student['mobile_no'], 'from_date' => _d($insertData['from_date']), 'to_date' => _d($insertData['to_date']), 'branch_id' => $branchID];
                            $studentsArray[] = $arraySMS;
}
                    } elseif ($audience == 2) {
                        foreach ($this->request->getPost('selected_audience') as $user) {
    $classID = $user;
                            $students = $this->alumniModel->getList($branchID, $classID, "", $passing_session);
                            foreach ($students as $student) {
                                $arraySMS = ['name' => $student['fullname'], 'mobile_no' => $student['mobile_no'], 'from_date' => _d($insertData['from_date']), 'to_date' => _d($insertData['to_date']), 'branch_id' => $branchID];
                                $studentsArray[] = $arraySMS;
}
                        }
                    } elseif ($audience == 3) {
                        foreach ($this->request->getPost('selected_audience') as $user) {
    $array = explode('-', (string) $user);
                            $students = $this->alumniModel->getList($branchID, $array[0], $array[1], $passing_session);
                            foreach ($students as $student) {
                                $arraySMS = ['name' => $student['fullname'], 'event_title' => $insertData['title'], 'mobile_no' => $student['mobile_no'], 'from_date' => _d($insertData['from_date']), 'to_date' => _d($insertData['to_date']), 'branch_id' => $branchID];
                                $studentsArray[] = $arraySMS;
}
                        }
                    }
                    foreach ($studentsArray as $value) {
    $this->smsModel->alumniEvent($value);
}
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function getEventsList()
    {
        if (get_permission('alumni_events', 'is_view')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('status', 1)->where();
            $events = $builder->get('alumni_events')->getResult();
            if (!empty($events)) {
                foreach ($events as $row) {
    $arrayData = ['id' => $row->id, 'title' => $row->title, 'start' => $row->from_date, 'end' => date('Y-m-d', strtotime($row->to_date . "+1 days"))];
                    $eventdata[] = $arrayData;
}
                echo json_encode($eventdata);
            }
        }
    }
    public function event_delete($id)
    {
        if (get_permission('alumni_events', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $photo = $db->table('alumni_events')->get('alumni_events')->row()->photo;
            $file_name = FCPATH . '/uploads/images/alumni_events/' . $photo;
            if (file_exists($file_name)) {
                unlink($file_name);
            }
            $this->db->table('id', $id)->where();
            $this->db->table('alumni_events')->delete();
        }
    }
    public function eventDetails()
    {
        if (get_permission('alumni_events', 'is_view')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('alumni_events');
            $result = $query->row_array();
            if (empty($result)) {
                $result = ['id' => '', 'title' => '', 'audience' => '', 'session_id' => '', 'selected_list' => '', 'from_date' => '', 'to_date' => '', 'note' => '', 'photo' => '', 'show_web' => '', 'branch_id' => ''];
            }
            echo json_encode($result);
        }
    }
    public function getEventDetails()
    {
        if (get_permission('alumni_events', 'is_view')) {
            $id = $this->request->getPost('event_id');
            if (empty($id)) {
                redirect(base_url(), 'refresh');
            }
            $auditions = ["1" => "everybody", "2" => "class", "3" => "section"];
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $ev = $builder->get('alumni_events')->row_array();
            $type = '<img alt="" class="user-img-circle" src="' . get_image_url('alumni_events', $ev['photo']) . '" width="110" height="110">';
            $remark = empty($ev['note']) ? 'N/A' : $ev['note'];
            $html = "<tbody><tr>";
            $html .= "<td>" . translate('title') . "</td>";
            $html .= "<td>" . $ev['title'] . "</td>";
            $html .= "</tr><tr>";
            $html .= "<td>" . translate('photo') . "</td>";
            $html .= "<td>" . $type . "</td>";
            $html .= "</tr><tr>";
            $html .= "<td>" . translate('date_of_start') . "</td>";
            $html .= "<td>" . _d($ev['from_date']) . "</td>";
            $html .= "</tr><tr>";
            $html .= "<td>" . translate('date_of_end') . "</td>";
            $html .= "<td>" . _d($ev['to_date']) . "</td>";
            $html .= "</tr><tr>";
            $html .= "<td>" . translate('audience') . "</td>";
            $audience = $auditions[$ev['audience']];
            $html .= "<td>" . translate($audience);
            if ($ev['audience'] != 1) {
                $selecteds = json_decode((string) $ev['selected_list']);
                if ($ev['audience'] == 2) {
                    foreach ($selecteds as $selected) {
    $html .= "<br> <small> - " . get_type_name_by_id('class', $selected) . '</small>';
}
                }
                if ($ev['audience'] == 3) {
                    foreach ($selecteds as $selected) {
    $selected = explode('-', (string) $selected);
                        $html .= "<br> <small> - " . get_type_name_by_id('class', $selected[0]) . " (" . get_type_name_by_id('section', $selected[1]) . ')</small>';
}
                }
            }
            $html .= "</td>";
            $html .= "</tr><tr>";
            $html .= "<td>" . translate('note') . "</td>";
            $html .= "<td>" . $remark . "</td>";
            $html .= "</tr></tbody>";
            echo $html;
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Attendance.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SubjectModel;
use App\Models\SmsModel;
/**
 * @package : Ramom school management system
 * @version : 6.8
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Attendance.php
 * @copyright : Reserved RamomCoder Team
 */
class Attendance extends AdminController
{
    public $appLib;
    /**
     * @var App\Models\AttendanceModel
     */
    public $attendance;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $applicationModel;
    public $validation;
    public $input;
    public $db;
    public $smsModel;
    public $load;
    public $attendanceModel;
    protected $getAttendanceType;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->attendance = new \App\Models\AttendanceModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->sms = new \App\Models\SmsModel();
        if (!moduleIsEnabled('attendance')) {
            access_denied();
        }
        $this->getAttendanceType = $this->appLib->getAttendanceType();
    }
    public function index()
    {
        if (get_loggedin_id()) {
            redirect(base_url('dashboard'), 'refresh');
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    // student submitted attendance all data are prepared and stored in the database here
    public function student_entry()
    {
        if (!get_permission('student_attendance', 'is_add')) {
            access_denied();
        }
        if ($this->getAttendanceType != 2 && $this->getAttendanceType != 0) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_check_weekendday|callback_check_holiday|callback_get_valid_date']]);
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $date = $this->request->getPost('date');
                $this->data['date'] = $date;
                $this->data['attendencelist'] = $this->attendanceModel->getStudentAttendence($classID, $sectionID, $date, $branchID);
            }
        }
        $this->data['getWeekends'] = $this->applicationModel->getWeekends($branchID);
        $this->data['getHolidays'] = $this->attendanceModel->getHolidays($branchID);
        if (isset($_POST['save'])) {
            $attendance = $this->request->getPost('attendance');
            $date = $this->request->getPost('date');
            foreach ($attendance as $value) {
    $attStatus = $value['status'] ?? "";
                $studentID = $value['student_id'];
                $arrayAttendance = ['enroll_id' => $value['enroll_id'], 'status' => $attStatus, 'remark' => $value['remark'], 'date' => $date, 'branch_id' => $branchID];
                if (empty($value['attendance_id'])) {
                    $this->db->table('student_attendance', $arrayAttendance)->insert();
} else {
                    $this->db->table('id', $value['attendance_id'])->where();
                    $this->db->table('student_attendance', ['status' => $attStatus, 'remark' => $value['remark']])->update();
                }
                // send student absent then sms
                if ($attStatus == 'A') {
                    $arrayAttendance['student_id'] = $studentID;
                    $this->smsModel->send_sms($arrayAttendance, 3);
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            redirect(current_url());
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance/student_entries';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
    public function getWeekendsHolidays()
    {
        if (!get_permission('student_attendance', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->request->getPost('branch_id');
            $getWeekends = $this->applicationModel->getWeekends($branchID);
            $getHolidays = $this->attendanceModel->getHolidays($branchID);
            echo json_encode(['getWeekends' => $getWeekends, 'getHolidays' => '["' . $getHolidays . '"]']);
        }
    }
    // employees submitted attendance all data are prepared and stored in the database here
    public function employees_entry()
    {
        if (!get_permission('employee_attendance', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['staff_role' => ["label" => translate('role'), "rules" => 'required']]);
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_check_weekendday|callback_check_holiday|callback_get_valid_date']]);
            if ($this->validation->run() == true) {
                $roleID = $this->request->getPost('staff_role');
                $date = $this->request->getPost('date');
                $this->data['date'] = $date;
                $this->data['attendencelist'] = $this->attendanceModel->getStaffAttendence($roleID, $date, $branchID);
            }
        }
        $this->data['getWeekends'] = $this->applicationModel->getWeekends($branchID);
        if (isset($_POST['save'])) {
            $attendance = $this->request->getPost('attendance');
            $date = $this->request->getPost('date');
            foreach ($attendance as $value) {
    $attStatus = $value['status'] ?? "";
                $arrayAttendance = ['staff_id' => $value['staff_id'], 'status' => $attStatus, 'remark' => $value['remark'], 'date' => $date, 'branch_id' => $branchID];
                if (empty($value['attendance_id'])) {
                    $this->db->table('staff_attendance', $arrayAttendance)->insert();
} else {
                    $this->db->table('id', $value['attendance_id'])->where();
                    $this->db->table('staff_attendance', ['status' => $attStatus, 'remark' => $value['remark']])->update();
                }
                // send student absent then sms
                if ($attStatus == 'A') {
                    $this->smsModel->send_sms($arrayAttendance, 3);
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            redirect(current_url());
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('employee_attendance');
        $this->data['sub_page'] = 'attendance/employees_entries';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
    // exam submitted attendance all data are prepared and stored in the database here
    public function exam_entry()
    {
        if (!get_permission('exam_attendance', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['exam_id' => ["label" => translate('exam'), "rules" => 'required']]);
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['subject_id' => ["label" => translate('subject'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $examID = $this->request->getPost('exam_id');
                $subjectID = $this->request->getPost('subject_id');
                $this->data['class_id'] = $classID;
                $this->data['section_id'] = $sectionID;
                $this->data['exam_id'] = $examID;
                $this->data['subject_id'] = $subjectID;
                $this->data['attendencelist'] = $this->attendanceModel->getExamAttendence($classID, $sectionID, $examID, $subjectID, $branchID);
            }
        }
        if (isset($_POST['save'])) {
            $attendance = $this->request->getPost('attendance');
            $subjectID = $this->request->getPost('subject_id');
            $examID = $this->request->getPost('exam_id');
            foreach ($attendance as $value) {
    $attStatus = $value['status'] ?? "";
                $arrayAttendance = ['student_id' => $value['student_id'], 'status' => $attStatus, 'remark' => $value['remark'], 'exam_id' => $examID, 'subject_id' => $subjectID, 'branch_id' => $branchID];
                if (empty($value['attendance_id'])) {
                    $this->db->table('exam_attendance', $arrayAttendance)->insert();
} else {
                    $this->db->table('id', $value['attendance_id'])->where();
                    $this->db->table('exam_attendance', ['status' => $attStatus, 'remark' => $value['remark']])->update();
                }
                // send student absent then sms
                if ($attStatus == 'A') {
                    $this->smsModel->send_sms($arrayAttendance, 4);
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            redirect(current_url());
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('exam_attendance');
        $this->data['sub_page'] = 'attendance/exam_entries';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
    // student attendance reports are produced here
    public function studentwise_report()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        if ($this->getAttendanceType != 2 && $this->getAttendanceType != 0) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['month'] = date('m', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['year'] = date('Y', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['days'] = date('t', strtotime($this->data['year'] . "-" . $this->data['month']));
            $this->data['studentlist'] = $this->attendanceModel->getStudentList($branchID, $this->data['class_id'], $this->data['section_id']);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance/student_report';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    public function student_classreport()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        if ($this->getAttendanceType != 2 && $this->getAttendanceType != 0) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_get_valid_date']]);
            if ($this->validation->run() == true) {
                $this->data['date'] = $this->request->getPost('date');
                $this->data['attendancelist'] = $this->attendanceModel->getDailyStudentReport($branchID, $this->data['date']);
            }
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student') . ' ' . translate('daily_reports');
        $this->data['sub_page'] = 'attendance/student_classreport';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    public function studentwise_overview()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        if ($this->getAttendanceType != 2 && $this->getAttendanceType != 0) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['attendance_type' => ["label" => translate('attendance_type'), "rules" => 'required']]);
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['daterange' => ["label" => translate('date'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start = date("Y-m-d", strtotime($daterange[0]));
                $end = date("Y-m-d", strtotime($daterange[1]));
                $this->data['class_id'] = $this->request->getPost('class_id');
                $this->data['section_id'] = $this->request->getPost('section_id');
                $this->data['start'] = $start;
                $this->data['end'] = $end;
                $this->data['studentlist'] = $this->applicationModel->getStudentListByClassSection($this->data['class_id'], $this->data['section_id'], $branchID);
            }
        }
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance/studentwise_overview';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    /* employees attendance reports are produced here */
    public function employeewise_report()
    {
        if (!get_permission('employee_attendance_report', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->data['branch_id'] = $this->applicationModel->get_branch_id();
            $this->data['role_id'] = $this->request->getPost('staff_role');
            $this->data['month'] = date('m', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['year'] = date('Y', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['days'] = date('t', strtotime($this->data['year'] . "-" . $this->data['month']));
            $this->data['stafflist'] = $this->attendanceModel->getStaffList($this->data['branch_id'], $this->data['role_id']);
        }
        $this->data['title'] = translate('employee_attendance');
        $this->data['sub_page'] = 'attendance/employees_report';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    /* student exam attendance reports are produced here */
    public function examwise_report()
    {
        if (!get_permission('exam_attendance_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['exam_id'] = $this->request->getPost('exam_id');
            $this->data['subject_id'] = $this->request->getPost('subject_id');
            $this->data['branch_id'] = $this->applicationModel->get_branch_id();
            $this->data['examreport'] = $this->attendanceModel->getExamReport($this->data);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('exam_attendance');
        $this->data['sub_page'] = 'attendance/exam_report';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    public function get_valid_date($date)
    {
        $present_date = date('Y-m-d');
        $date = date("Y-m-d", strtotime((string) $date));
        if ($date > $present_date) {
            $this->validation->setRule("get_valid_date", "Please Enter Correct Date");
            return false;
        } else {
            return true;
        }
    }
    public function check_holiday($date)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $getHolidays = $this->attendanceModel->getHolidays($branchID);
        $getHolidaysArray = explode('","', (string) $getHolidays);
        if (in_array($date, $getHolidaysArray)) {
            $this->validation->setRule('check_holiday', 'You have selected a holiday.');
            return false;
        } else {
            return true;
        }
    }
    public function check_weekendday($date)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $getWeekendDays = $this->attendanceModel->getWeekendDaysSession($branchID);
        if (!empty($getWeekendDays)) {
            if (in_array($date, $getWeekendDays)) {
                $this->validation->setRule('check_weekendday', "You have selected a weekend date.");
                return false;
            } else {
                return true;
            }
        }
        return true;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Attendance_period.php
<?php

namespace App\Controllers;

use App\Models\SubjectModel;
use App\Models\AttendanceModel;
use App\Models\AttendancePeriodModel;
use App\Models\SmsModel;
use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Attendance_period.php
 * @copyright : Reserved RamomCoder Team
 */
class Attendance_period extends AdminController
{
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    /**
     * @var App\Models\AttendanceModel
     */
    public $attendance;
    /**
     * @var App\Models\AttendancePeriodModel
     */
    public $attendancePeriod;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $appLib;
    public $applicationModel;
    public $validation;
    public $input;
    public $db;
    public $smsModel;
    public $load;
    public $attendanceModel;
    public $attendance_periodModel;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->subject = new \App\Models\SubjectModel();
        $this->attendance = new \App\Models\AttendanceModel();
        $this->attendancePeriod = new \App\Models\AttendancePeriodModel();
        $this->sms = new \App\Models\SmsModel();
        if (!moduleIsEnabled('attendance')) {
            access_denied();
        }
        $getAttendanceType = $this->appLib->getAttendanceType();
        if ($getAttendanceType != 2 && $getAttendanceType != 1) {
            access_denied();
        }
    }
    // student submitted attendance all data are prepared and stored in the database here
    public function index()
    {
        if (!get_permission('student_attendance', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['subject_timetable_id' => ["label" => translate('subject'), "rules" => 'required']]);
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_check_weekendday|callback_check_holiday|callback_get_valid_date']]);
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $subject_timetableID = $this->request->getPost('subject_timetable_id');
                $date = $this->request->getPost('date');
                $this->data['date'] = $date;
                $this->data['attendencelist'] = $this->attendance_periodModel->getStudentAttendence($classID, $sectionID, $date, $subject_timetableID, $branchID);
            }
        }
        $this->data['getWeekends'] = $this->applicationModel->getWeekends($branchID);
        $this->data['getHolidays'] = $this->attendanceModel->getHolidays($branchID);
        if (isset($_POST['save'])) {
            $attendance = $this->request->getPost('attendance');
            $date = $this->request->getPost('date');
            $subject_timetable_id = $this->request->getPost('subject_timetable_id');
            foreach ($attendance as $value) {
    $attStatus = $value['status'] ?? "";
                $studentID = $value['student_id'];
                $arrayAttendance = ['enroll_id' => $value['enroll_id'], 'subject_timetable_id' => $subject_timetable_id, 'status' => $attStatus, 'remark' => $value['remark'], 'date' => $date, 'branch_id' => $branchID];
                if (empty($value['attendance_id'])) {
                    $this->db->table('student_subject_attendance', $arrayAttendance)->insert();
} else {
                    $this->db->table('id', $value['attendance_id'])->where();
                    $this->db->table('student_subject_attendance', ['status' => $attStatus, 'remark' => $value['remark']])->update();
                }
                // send student absent then sms
                if ($attStatus == 'A') {
                    $arrayAttendance['student_id'] = $studentID;
                    $this->smsModel->send_sms($arrayAttendance, 3);
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            redirect(current_url());
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance_period/index';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
    public function reportsbydate()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['getWeekends'] = $this->applicationModel->getWeekends($branchID);
        $this->data['getHolidays'] = $this->attendanceModel->getHolidays($branchID);
        if ($_POST !== []) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['date'] = $this->request->getPost('date');
            $date = date('l', strtotime((string) $this->data['date']));
            $date = strtolower($date);
            $this->data['subjectByClassSection'] = $this->attendance_periodModel->getSubjectByClassSection($this->data['class_id'], $this->data['section_id'], $date);
            $this->data['studentlist'] = $this->attendanceModel->getStudentList($branchID, $this->data['class_id'], $this->data['section_id']);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance_period/reportsbydate';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    public function reportbymonth()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['subject_id'] = $this->request->getPost('subject_id');
            $this->data['month'] = date('m', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['year'] = date('Y', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['days'] = date('t', strtotime($this->data['year'] . "-" . $this->data['month']));
            $this->data['studentlist'] = $this->attendanceModel->getStudentList($branchID, $this->data['class_id'], $this->data['section_id']);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance_period/reportbymonth';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    public function get_valid_date($date)
    {
        $present_date = date('Y-m-d');
        $date = date("Y-m-d", strtotime((string) $date));
        if ($date > $present_date) {
            $this->validation->setRule("get_valid_date", "Please Enter Correct Date");
            return false;
        } else {
            return true;
        }
    }
    public function check_holiday($date)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $getHolidays = $this->attendanceModel->getHolidays($branchID);
        $getHolidaysArray = explode('","', (string) $getHolidays);
        if (in_array($date, $getHolidaysArray)) {
            $this->validation->setRule('check_holiday', 'You have selected a holiday.');
            return false;
        } else {
            return true;
        }
    }
    public function check_weekendday($date)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $getWeekendDays = $this->attendanceModel->getWeekendDaysSession($branchID);
        if (!empty($getWeekendDays)) {
            if (in_array($date, $getWeekendDays)) {
                $this->validation->setRule('check_weekendday', "You have selected a weekend date.");
                return false;
            } else {
                return true;
            }
        }
        return true;
    }
    public function reports()
    {
        if (!get_permission('student_attendance_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['subject_timetable_id' => ["label" => translate('subject'), "rules" => 'required']]);
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_check_weekendday|callback_check_holiday|callback_get_valid_date']]);
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $subject_timetableID = $this->request->getPost('subject_timetable_id');
                $date = $this->request->getPost('date');
                $this->data['class_id'] = $classID;
                $this->data['section_id'] = $sectionID;
                $this->data['date'] = $date;
                $this->data['attendencelist'] = $this->attendance_periodModel->getSubjectAttendanceReport($classID, $sectionID, $date, $subject_timetableID, $branchID);
            }
        }
        $this->data['getWeekends'] = $this->applicationModel->getWeekends($branchID);
        $this->data['getHolidays'] = $this->attendanceModel->getHolidays($branchID);
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'attendance_period/reports';
        $this->data['main_menu'] = 'attendance_report';
        echo view('layout/index', $this->data);
    }
    // get subject list based on class section
    public function getByClassSection()
    {
        $html = '';
        $classID = $this->request->getPost('classID');
        $sectionID = $this->request->getPost('sectionID');
        $selectPOST = $this->request->getPost('selectPOST');
        $date = date('l', strtotime((string) $this->request->getPost('date')));
        $date = strtolower($date);
        if (!empty($classID)) {
            $query = $this->attendance_periodModel->getSubjectByClassSection($classID, $sectionID, $date);
            if ($query->num_rows() > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                $subjects = $query->getResultArray();
                foreach ($subjects as $row) {
    $select = "";
                    if ($selectPOST == $row['id']) {
                        $select = "selected=selected";
}
                    $html .= '<option ' . $select . ' value="' . $row['id'] . '">' . $row['subjectname'] . " (" . date("g:i A", strtotime((string) $row['time_start'])) . " - " . date("g:i A", strtotime((string) $row['time_end'])) . ')</option>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select') . '</option>';
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Backup.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Backup.php
 * @copyright : Reserved RamomCoder Team
 */
class Backup extends AdminController
{
    public $appLib;
    protected $db;
    public $load;
    public $dbutil;
    public $input;
    public $validation;
    public $upload;

    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib');helper(['download']);
    }

    public function index()
    {
        if (!get_permission('backup', 'is_view')) {
            access_denied();
        }
        $this->data['sub_page'] = 'database_backup/index';
        $this->data['main_menu'] = 'settings';
        $this->data['title'] = translate('database_backup');
        $this->data['headerelements'] = [
            'css' => ['vendor/dropify/css/dropify.min.css'],
            'js' => ['vendor/dropify/js/dropify.min.js']
        ];
        echo view('layout/index', $this->data);
    }

    /* create database backup */
    public function create()
    {
        if (!get_permission('backup', 'is_add')) {
            access_denied();
        }
        $this->load->dbutil();
        $options = [
            'format' => 'zip',
            // gzip, zip, txt
            'add_drop' => true,
            // Whether to add DROP TABLE statements to backup file
            'add_insert' => true,
            // Whether to add INSERT data to backup file
            'filename' => 'DB-backup_' . date('Y-m-d_H-i'),
        ];
        $backup = $this->dbutil->backup($options);
        if (!write_file('./uploads/db_backup/DB-backup_' . date('Y-m-d_H-i') . '.zip', $backup)) {
            set_alert('error', translate('database_backup_failed'));
        } else {
            set_alert('success', translate('database_backup_completed'));
        }
        return redirect()->to(base_url('backup'));
    }

    public function download()
    {
        $file = urldecode((string)$this->request->getGet('file'));
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $file)) {
            $data = file_get_contents('./uploads/db_backup/' . $file);
            return $this->response->download($file, $data);
        }
        return redirect()->to(base_url('backup'));
    }

    public function delete_file($file)
    {
        if (!get_permission('backup', 'is_delete')) {
            access_denied();
        }
        unlink('./uploads/db_backup/' . $file);
    }

    public function restore_file()
    {
        if (!get_permission('backup_restore', 'is_add')) {
            ajax_access_denied();
        }

        $this->validation->setRules([
            'uploaded_file' => [
                'label' => translate('file_upload'),
                'rules' => 'uploaded[uploaded_file]|mime_in[uploaded_file,application/zip]|max_size[uploaded_file,10240]'
            ]
        ]);

        if ($this->validation->run() == true) {
            helper('filesystem');
            $file = $this->request->getFile('uploaded_file');
            $newName = $file->getRandomName();
            $file->move('./uploads/db_temp/', $newName);

            $backup = "./uploads/db_temp/" . $newName;

            if (!unzip($backup, "./uploads/db_temp/", true, true)) {
                set_alert('error', "Backup Restore Error");
                return redirect()->to(base_url('backup'));
            } else {
                $this->load->dbforge();
                $backup = str_replace('.zip', '', $backup);
                $file_content = file_get_contents($backup . ".sql");
                $this->db->query('USE ' . $this->db->database . ';');
                foreach (explode(";\n", $file_content) as $sql) {
    $sql = trim($sql);
                    if ($sql !== '' && $sql !== '0') {
                        $this->db->query($sql);
}
                }
                set_alert('success', "Backup Restore Successfully");
            }
            unlink($backup . '.sql');
            unlink($backup . '.zip');
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->getErrors();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
}
?>






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Birthday.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SmsModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Birthday.php
 * @copyright : Reserved RamomCoder Team
 */
class Birthday extends AdminController
{
    public $appLib;
    /**
     * @var App\Models\BirthdayModel
     */
    public $birthday;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $applicationModel;
    public $input;
    public $load;
    public $smsModel;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->birthday = new \App\Models\BirthdayModel();
        $this->sms = new \App\Models\SmsModel();
    }
    public function index()
    {
        return redirect()->to(base_url('birthday/student'));
    }
    /* showing student list by birthday */
    public function student()
    {
        // check access permission
        if (!get_permission('student_birthday_wishes', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['students'] = $this->birthdayModel->getStudentListByBirthday($branchID, $start, $end);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student') . " " . translate('birthday') . " " . translate('list');
        $this->data['main_menu'] = 'sendsmsmail';
        $this->data['sub_page'] = 'birthday/student';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function studentWishes()
    {
        if ($_POST !== []) {
            $status = 'success';
            $message = "All birthday wishes sent via sms.";
            if (get_permission('student_birthday_wishes', 'is_view')) {
                $arrayID = $this->request->getPost('array_id');
                if (!empty($arrayID)) {
                    foreach ($arrayID as $row) {
    $this->smsModel->sendBirthdayStudentWishes(['student_id' => $row]);
}
                }
            } else {
                $message = translate('access_denied');
                $status = 'error';
            }
            echo json_encode(['status' => $status, 'message' => $message]);
        }
    }
    /* showing staff list by birthday */
    public function staff()
    {
        // check access permission
        if (!get_permission('staff_birthday_wishes', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['students'] = $this->birthdayModel->getStaffListByBirthday($branchID, $start, $end);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('staff') . " " . translate('birthday') . " " . translate('list');
        $this->data['main_menu'] = 'sendsmsmail';
        $this->data['sub_page'] = 'birthday/staff';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function staffWishes()
    {
        if ($_POST !== []) {
            $status = 'success';
            $message = "All birthday wishes sent via sms.";
            if (get_permission('staff_birthday_wishes', 'is_view')) {
                $arrayID = $this->request->getPost('array_id');
                if (!empty($arrayID)) {
                    foreach ($arrayID as $row) {
    $this->smsModel->sendBirthdayStaffWishes(['staff_id' => $row]);
}
                }
            } else {
                $message = translate('access_denied');
                $status = 'error';
            }
            echo json_encode(['status' => $status, 'message' => $message]);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Branch.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Branch.php
 * @copyright : Reserved RamomCoder Team
 */
class Branch extends AdminController

{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\BranchModel
     */
    public $branch;
    public $input;
    public $validation;
    public $branchModel;
    public $load;
    public $session;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->branch = new \App\Models\BranchModel();
    }
    /* branch all data are prepared and stored in the database here */
    public function index()
    {
        if (is_superadmin_loggedin()) {
            if ($this->request->getPost('submit') == 'save') {
                $this->validation->setRules(['branch_name' => ["label" => translate('branch_name'), "rules" => 'required|callback_unique_name']]);
                $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'required']]);
                $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'required|valid_email']]);
                $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'required']]);
                $this->validation->setRules(['currency' => ["label" => translate('currency'), "rules" => 'required']]);
                $this->validation->setRules(['currency_symbol' => ["label" => translate('currency_symbol'), "rules" => 'required']]);
                if ($this->validation->run() == true) {
                    $post = $this->request->getPost();
                    $response = $this->branchModel->save($post);
                    if ($response) {
                        set_alert('success', translate('information_has_been_saved_successfully'));
                    }
                    return redirect()->to(base_url('branch'));
                } else {
                    $this->data['validation_error'] = true;
                }
            }
            $this->data['title'] = translate('branch');
            $this->data['sub_page'] = 'branch/add';
            $this->data['main_menu'] = 'branch';
            $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
            echo view('layout/index', $this->data);
        } else {
            session()->set('last_page', current_url());
            redirect(base_url(), 'refresh');
        }
    }
    /* branch information update here */
    public function edit($id = '')
    {
        if (is_superadmin_loggedin()) {
            if ($this->request->getPost('submit') == 'save') {
                $this->validation->setRules(['branch_name' => ["label" => translate('branch_name'), "rules" => 'required|callback_unique_name']]);
                $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'required']]);
                $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'required|valid_email']]);
                $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'required']]);
                $this->validation->setRules(['currency' => ["label" => translate('currency'), "rules" => 'required']]);
                $this->validation->setRules(['currency_symbol' => ["label" => translate('currency_symbol'), "rules" => 'required']]);
                if ($this->validation->run() == true) {
                    $post = $this->request->getPost();
                    $response = $this->branchModel->save($post, $id);
                    if ($response) {
                        set_alert('success', translate('information_has_been_updated_successfully'));
                    }
                    return redirect()->to(base_url('branch'));
                }
            }
            $this->data['data'] = $this->branchModel->getSingle('branch', $id, true);
            $this->data['title'] = translate('branch');
            $this->data['sub_page'] = 'branch/edit';
            $this->data['main_menu'] = 'branch';
            $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
            echo view('layout/index', $this->data);
        } else {
            session()->set('last_page', current_url());
            redirect(base_url(), 'refresh');
        }
    }
    /* delete information */
    public function delete_data($id = '')
    {
        if (is_superadmin_loggedin()) {
            $this->db->table('id', $id)->where();
            $this->db->table('branch')->delete();
            //delete branch all staff
            $result = $db->table('staff')->get('staff')->getResult();
            foreach ($result as $value) {
    $this->db->table('user_id', $value->id)->where();
                $this->db->table('login_credential')->delete();
                $this->db->table('id', $value->id)->where();
                $this->db->table('staff')->delete();
}
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    /* unique valid branch name verification is done here */
    public function unique_name($name)
    {
        $branch_id = $this->request->getPost('branch_id');
        if (!empty($branch_id)) {
            $this->db->where_not_in('id', $branch_id);
        }
        $this->db->table('name', $name)->where();
        $name = $builder->get('branch')->num_rows();
        if ($name == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_name", translate('already_taken'));
            return false;
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Branch_role.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\RoleModel;
class Branch_role extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\RoleModel
     */
    public $role;
    public $validation;
    public $input;
    public $session;
    public $roleModel;
    public $load;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->role = new \App\Models\RoleModel();
        // Check if the user is a superadmin or if the 'branch_role_permission' module is enabled
        if (!is_superadmin_loggedin() && !moduleIsEnabled('branch_role_permission')) {
            access_denied();
        }
    }
    // Role form validation rules
    protected function role_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['role' => ["label" => translate('role_name'), "rules" => 'required|trim|callback_unique_name']]);
    }
    public function index()
    {
        if (is_superadmin_loggedin() && $this->request->getPost('search')) {
            $branch_id = $this->request->getPost('branch_id');
            session()->set('selected_branch_id', $branch_id);
            redirect('branch_role');
        }
        if ($_POST !== []) {
            $this->role_validation();
            if ($this->validation->run() !== false) {
                $data = $this->request->getPost();
                $data['branch_id'] = is_superadmin_loggedin() ? $this->request->getPost('branch_id') : get_loggedin_branch_id();
                $data['created_by'] = get_loggedin_user_id();
                $this->roleModel->save_roles($data);
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('branch_role'));
            }
        }
        $branch_id = is_superadmin_loggedin() ? session()->get('selected_branch_id') : get_loggedin_branch_id();
        $this->data['roles'] = $this->roleModel->getBranchRoleList($branch_id);
        $this->data['title'] = 'Branch Specific Roles';
        $this->data['sub_page'] = 'branch_role/index';
        $this->data['main_menu'] = 'branch_roles';
        echo view('layout/index', $this->data);
    }
    public function unique_name($str)
    {
        $role_id = $this->request->getPost('id');
        // Assuming 'id' is posted if it's an edit operation
        $branch_id = get_loggedin_branch_id();
        $this->db->table('name', $str)->where();
        $this->db->table('branch_id', $branch_id)->where();
        if (!empty($role_id)) {
            $this->db->table('id !=', $role_id)->where();
        }
        $query = $builder->get('roles');
        if ($query->num_rows() > 0) {
            $this->validation->setRule('unique_name', 'The %s is already taken in this branch.');
            return FALSE;
        }
        return TRUE;
    }
    public function edit($id)
    {
        $branch_id = is_superadmin_loggedin() ? session()->get('selected_branch_id') : get_loggedin_branch_id();
        $roles = $this->roleModel->getBranchRoleList($branch_id);
        $role = array_filter($roles, fn($role) => $role['id'] == $id);
        $role = array_shift($role);
        // Assuming the first result is the desired role
        // Check for system roles and branch match
        if ($role === null || $role['is_system'] || !is_superadmin_loggedin() && $role['branch_id'] != $branch_id) {
            access_denied();
        }
        if ($this->request->getPost()) {
            $data = $this->request->getPost();
            $this->role_validation();
            if ($this->validation->run() !== false) {
                $data['branch_id'] = is_superadmin_loggedin() ? session()->get('selected_branch_id') : $branch_id;
                $data['created_by'] = get_loggedin_user_id();
                $this->roleModel->save_roles($data);
                set_alert('success', 'Role updated successfully');
                redirect('branch_role');
            }
        }
        $this->data['role'] = $role;
        $this->data['title'] = 'Edit Branch Role';
        $this->data['sub_page'] = 'branch_role/edit';
        $this->data['main_menu'] = 'branch_roles';
        echo view('layout/index', $this->data);
    }
    public function delete($id)
    {
        $branch_id = get_loggedin_branch_id();
        $roles = $this->roleModel->getBranchRoleList($branch_id);
        $role = array_filter($roles, fn($role) => $role['id'] == $id);
        $role = array_shift($role);
        // Assuming the first result is the desired role
        // Check for system roles and branch match
        if ($role === null || $role['is_system'] || !is_superadmin_loggedin() && $role['branch_id'] != $branch_id) {
            access_denied();
        }
        $this->roleModel->delete_role($id);
        set_alert('success', 'Role deleted successfully');
        redirect('branch_role');
    }
    public function permission($role_id)
    {
        $branch_id = is_superadmin_loggedin() ? session()->get('selected_branch_id') : get_loggedin_branch_id();
        $roles = $this->roleModel->getBranchRoleList($branch_id);
        // Find the role in the retrieved list
        $role = null;
        foreach ($roles as $r) {
    if ($r['id'] == $role_id) {
                $role = $r;
                break;
}
        }
        // Ensure the role is not null and belongs to the current branch, or allow superadmin access
        if ($role === null || !is_superadmin_loggedin() && $role['branch_id'] != $branch_id) {
            access_denied();
        }
        if ($this->request->getPost()) {
            $privileges = $this->request->getPost('privileges');
            foreach ($privileges as $key => $value) {
    $is_add = isset($value['add']) ? 1 : 0;
                $is_edit = isset($value['edit']) ? 1 : 0;
                $is_view = isset($value['view']) ? 1 : 0;
                $is_delete = isset($value['delete']) ? 1 : 0;
                $arrayData = ['role_id' => $role_id, 'permission_id' => $key, 'is_add' => $is_add, 'is_edit' => $is_edit, 'is_view' => $is_view, 'is_delete' => $is_delete];
                $exist_privileges = $db->table('staff_privileges')->get('staff_privileges')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('staff_privileges', $arrayData, ['role_id' => $role_id, 'permission_id' => $key])->update();
} else {
                    $this->db->table('staff_privileges', $arrayData)->insert();
                }
            }
            set_alert('success', 'Permissions updated successfully');
            redirect('branch_role/permission/' . $role_id);
        }
        // Filter the modules list to show only the active modules for the branch
        $allModules = $this->roleModel->getModulesList();
        $activeModules = array_filter($allModules, fn($module) => moduleIsEnabled($module['prefix']));
        // Filter permissions for the active modules
        $filteredPermissions = [];
        foreach ($activeModules as $module) {
    $permissions = $this->roleModel->check_permissions($module['id'], $role_id, loggedin_role_id());
            foreach ($permissions as $permission) {
                if ($permission['show_view'] && $permission['admin_is_view'] || $permission['show_add'] && $permission['admin_is_add'] || $permission['show_edit'] && $permission['admin_is_edit'] || $permission['show_delete'] && $permission['admin_is_delete']) {
                    $filteredPermissions[] = $permission;
}
            }
        }
        $this->data['role_id'] = $role_id;
        $this->data['permissions'] = $filteredPermissions;
        $this->data['modules'] = $activeModules;
        $this->data['title'] = 'Manage Permissions for Branch Roles';
        $this->data['sub_page'] = 'branch_role/permission';
        $this->data['main_menu'] = 'branch_roles';
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Card_manage.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\CardManageModel;
use App\Models\EmployeeModel;
use App\Models\TimetableModel;
/**
 * @package : Ramom school management system
 * @version : 5.8
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Card_manage.php
 * @copyright : Reserved RamomCoder Team
 */
class Card_manage extends AdminController
 
{
    public $ciqrcode;
    public $appLib;
    protected $db;


    /**
     * @var App\Models\CardManageModel
     */
    public $cardManage;
    public $load;
    /**
     * @var App\Models\EmployeeModel
     */
    public $employee;
    /**
     * @var App\Models\TimetableModel
     */
    public $timetable;
    public $validation;
    public $input;
    public $card_manageModel;
    public $applicationModel;
    public function __construct()
    {

        parent::__construct();
        
        
        $this->ciqrcode = service('ciqrcode');$this->appLib = service('appLib'); 
$this->cardManage = new \App\Models\CardManageModel();
        $this->Ciqrcode = service('ciqrcode', ['cacheable' => false]);
        $this->employee = new \App\Models\EmployeeModel();
        $this->timetable = new \App\Models\TimetableModel();
        if (!moduleIsEnabled('card_management')) {
            access_denied();
        }
    }
    /* id card templete form validation rules */
    protected function idard_templete_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['card_name' => ["label" => translate('id_card') . " " . translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['user_type' => ["label" => translate('applicable_user'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['layout_width' => ["label" => translate('layout_width'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['layout_height' => ["label" => translate('layout_height'), "rules" => 'trim|required']]);
        $this->validation->setRules(['top_space' => ["label" => "Top Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['bottom_space' => ["label" => "Bottom Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['right_space' => ["label" => "Right Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['left_space' => ["label" => "Left Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['content' => ["label" => translate('certificate') . " " . translate('content'), "rules" => 'trim|required']]);
    }
    public function id_card_templete()
    {
        if (!get_permission('id_card_templete', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('id_card_templete', 'is_add')) {
            $roleID = $this->request->getPost('role_id');
            $this->idard_templete_validation();
            if ($this->validation->run() !== false) {
                // SAVE INFORMATION IN THE DATABASE FILE
                $post = $this->request->getPost();
                $post['card_type'] = 1;
                $this->card_manageModel->save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['certificatelist'] = $this->card_manageModel->getList();
        $this->data['title'] = translate('id_card') . " " . translate('templete');
        $this->data['sub_page'] = 'card_manage/id_card_templete';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function id_card_templete_edit($id = '')
    {
        if (!get_permission('id_card_templete', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->idard_templete_validation();
            if ($this->validation->run() !== false) {
                // save all information in the database file
                $post = $this->request->getPost();
                $post['card_type'] = 1;
                $this->card_manageModel->save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('card_manage/id_card_templete');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['certificate'] = $this->appLib->getTable('card_templete', ['t.id' => $id], true);
        $this->data['title'] = translate('id_card') . " " . translate('templete');
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['sub_page'] = 'card_manage/id_card_templete_edit';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function id_card_delete($id = '')
    {
        if (get_permission('id_card_templete', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $getRow = $builder->get('card_templete')->row_array();
            if (!empty($getRow)) {
                $path = 'uploads/certificate/';
                if (file_exists($path . $getRow['background'])) {
                    unlink($path . $getRow['background']);
                }
                if (file_exists($path . $getRow['logo'])) {
                    unlink($path . $getRow['logo']);
                }
                if (file_exists($path . $getRow['signature'])) {
                    unlink($path . $getRow['signature']);
                }
                $this->db->table('id', $id)->where();
                $this->db->table('card_type', 1)->where();
                $this->db->table('card_templete')->delete();
            }
        }
    }
    public function getIDCard()
    {
        if (get_permission('id_card_templete', 'is_view')) {
            $templateID = $this->request->getPost('id');
            $this->data['template'] = $this->card_manageModel->get('card_templete', ['id' => $templateID], true);
            echo view('card_manage/viewIDCard', $this->data);
        }
    }
    public function generate_student_idcard()
    {
        if (!get_permission('generate_student_idcard', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['stuList'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID);
        }
        $this->data['headerelements'] = ['js' => ['js/certificate.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('student') . " " . translate('id_card') . " " . translate('generate');
        $this->data['sub_page'] = 'card_manage/generate_student_idcard';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function generate_employee_idcard()
    {
        if (!get_permission('generate_employee_idcard', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $staff_role = $this->request->getPost('staff_role');
            $this->data['stafflist'] = $this->employeeModel->getStaffList($branchID, $staff_role);
        }
        $this->data['headerelements'] = ['js' => ['js/certificate.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('employee') . " " . translate('id_card') . " " . translate('generate');
        $this->data['sub_page'] = 'card_manage/generate_employee_idcard';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function idCardprintFn($opt = '')
    {
        if ($_POST !== []) {
            if ($opt == 1) {
                if (!get_permission('generate_student_idcard', 'is_view')) {
                    ajax_access_denied();
                }
            } elseif ($opt == 2) {
                if (!get_permission('generate_employee_idcard', 'is_view')) {
                    ajax_access_denied();
                }
            } else {
                ajax_access_denied();
            }
            //get all QR Code file
            $files = glob('uploads/qr_code/*');
            foreach ($files as $file) {
    if (is_file($file)) {
                    unlink($file);
                    //delete file
}
            }
            $this->data['user_type'] = $opt;
            $this->data['user_array'] = $this->request->getPost('user_id');
            $templateID = $this->request->getPost('templete_id');
            $this->data['template'] = $this->card_manageModel->get('card_templete', ['id' => $templateID], true);
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['expiry_date'] = $this->request->getPost('expiry_date');
            echo view('card_manage/idCardprintFn', $this->data, true);
        }
    }
    public function getIDCardTempleteByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        $userType = $this->request->getPost('user_type');
        $cardType = $this->request->getPost('card_type');
        $cardType = $cardType == 'idcard' ? 1 : 2;
        if ($userType == 'student') {
            $userType = 1;
        }
        if ($userType == 'staff') {
            $userType = 2;
        }
        if (!empty($branchID)) {
            $builder->select('id,name');
            $this->db->table(['branch_id' => $branchID, 'user_type' => $userType, 'card_type' => $cardType])->where();
            $result = $builder->get('card_templete')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    /* admit card templete form validation rules */
    protected function admitcard_templete_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['card_name' => ["label" => translate('admit_card') . " " . translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['stu_qr_code' => ["label" => "QR Code Text", "rules" => 'trim|required']]);
        $this->validation->setRules(['layout_width' => ["label" => translate('layout_width'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['layout_height' => ["label" => translate('layout_height'), "rules" => 'trim|required']]);
        $this->validation->setRules(['top_space' => ["label" => "Top Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['bottom_space' => ["label" => "Bottom Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['right_space' => ["label" => "Right Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['left_space' => ["label" => "Left Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['content' => ["label" => translate('admit_card') . " " . translate('content'), "rules" => 'trim|required']]);
    }
    public function admit_card_templete()
    {
        if (!get_permission('admit_card_templete', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('admit_card_templete', 'is_add')) {
            $roleID = $this->request->getPost('role_id');
            $this->admitcard_templete_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $post = $this->request->getPost();
                $post['card_type'] = 2;
                $this->card_manageModel->save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['certificatelist'] = $this->card_manageModel->getList(2);
        $this->data['title'] = translate('admit_card') . " " . translate('templete');
        $this->data['sub_page'] = 'card_manage/admit_card_templete';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function admit_card_templete_edit($id = '')
    {
        if (!get_permission('admit_card_templete', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->admitcard_templete_validation();
            if ($this->validation->run() !== false) {
                // save all information in the database file
                $post = $this->request->getPost();
                $post['card_type'] = 2;
                $this->card_manageModel->save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('card_manage/admit_card_templete');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['templete'] = $this->appLib->getTable('card_templete', ['t.id' => $id], true);
        $this->data['title'] = translate('admit_card') . " " . translate('templete');
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['sub_page'] = 'card_manage/admit_card_templete_edit';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function admit_card_templete_delete($id = '')
    {
        if (get_permission('admit_card_templete', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $getRow = $builder->get('card_templete')->row_array();
            if (!empty($getRow)) {
                $path = 'uploads/certificate/';
                if (file_exists($path . $getRow['background'])) {
                    unlink($path . $getRow['background']);
                }
                if (file_exists($path . $getRow['logo'])) {
                    unlink($path . $getRow['logo']);
                }
                if (file_exists($path . $getRow['signature'])) {
                    unlink($path . $getRow['signature']);
                }
                $this->db->table('id', $id)->where();
                $this->db->table('card_type', 2)->where();
                $this->db->table('card_templete')->delete();
            }
        }
    }
    public function generate_student_admitcard()
    {
        if (!get_permission('generate_admit_card', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->data['exam_id'] = $this->request->getPost('exam_id');
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['stuList'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID);
        }
        $this->data['headerelements'] = ['js' => ['js/certificate.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('admit_card') . " " . translate('generate');
        $this->data['sub_page'] = 'card_manage/generate_student_admitcard';
        $this->data['main_menu'] = 'card_manage';
        echo view('layout/index', $this->data);
    }
    public function admitCardprintFn()
    {
        if (!get_permission('generate_admit_card', 'is_view')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            //get all QR Code file
            $files = glob('uploads/qr_code/*');
            foreach ($files as $file) {
    if (is_file($file)) {
                    unlink($file);
                    //delete file
}
            }
            $this->data['exam_id'] = $this->request->getPost('exam_id');
            $this->data['user_array'] = $this->request->getPost('user_id');
            $templateID = $this->request->getPost('templete_id');
            $this->data['template'] = $this->card_manageModel->get('card_templete', ['id' => $templateID], true);
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            echo view('card_manage/admitCardprintFn', $this->data, true);
        }
    }
    public function getExamByBranch()
    {
        $html = "";
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $selected_id = $_POST['selected'] ?? 0;
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $builder->select('exam.id,exam.name,exam.term_id');
            $this->db->from('timetable_exam');
            $builder->join('exam', 'exam.id = timetable_exam.exam_id', 'left');
            $this->db->table('timetable_exam.branch_id', $branchID)->where();
            $this->db->table('timetable_exam.session_id', get_session_id())->where();
            $this->db->table('timetable_exam.class_id', $classID)->where();
            $this->db->table('timetable_exam.section_id', $sectionID)->where();
            $this->db->group_by('timetable_exam.exam_id');
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    if ($row['term_id'] != 0) {
                        $term = $db->table('exam_term')->get('exam_term')->row()->name;
                        $name = $row['name'] . ' (' . $term . ')';
} else {
                        $name = $row['name'];
                    }
                    $selected = $row['id'] == $selected_id ? 'selected' : '';
                    $html .= '<option value="' . $row['id'] . '"' . $selected . '>' . $name . '</option>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Certificate.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmployeeModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Certificate.php
 * @copyright : Reserved RamomCoder Team
 */
class Certificate extends AdminController
{
    public $ciqrcode;
    public $appLib;
    /**
     * @var App\Models\CertificateModel
     */
    public $certificate;
    public $load;
    /**
     * @var App\Models\EmployeeModel
     */
    public $employee;
    public $validation;
    public $input;
    public $certificateModel;
    public $db;
    public $applicationModel;
    public function __construct()
    {
        parent::__construct();
        
        
        $this->ciqrcode = service('ciqrcode');$this->appLib = service('appLib'); 
$this->certificate = new \App\Models\CertificateModel();
        $this->Ciqrcode = service('ciqrcode', ['cacheable' => false]);
        $this->employee = new \App\Models\EmployeeModel();
        if (!moduleIsEnabled('certificate')) {
            access_denied();
        }
    }
    /* live class form validation rules */
    protected function certificate_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['certificate_name' => ["label" => translate('certificate_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['user_type' => ["label" => translate('applicable_user'), "rules" => 'trim|required']]);
        $this->validation->setRules(['page_layout' => ["label" => translate('page_layout'), "rules" => 'trim|required']]);
        $this->validation->setRules(['top_space' => ["label" => "Top Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['bottom_space' => ["label" => "Bottom Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['right_space' => ["label" => "Right Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['left_space' => ["label" => "Left Space", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['photo_size' => ["label" => "Photo Size", "rules" => 'trim|numeric']]);
        $this->validation->setRules(['content' => ["label" => translate('certificate') . " " . translate('content'), "rules" => 'trim|required']]);
    }
    public function index()
    {
        if (!get_permission('certificate_templete', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('certificate_templete', 'is_add')) {
            $roleID = $this->request->getPost('role_id');
            $this->certificate_validation();
            if ($this->validation->run() !== false) {
                // SAVE INFORMATION IN THE DATABASE FILE
                $this->certificateModel->save($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['certificatelist'] = $this->certificateModel->getList();
        $this->data['title'] = translate('certificate') . " " . translate('templete');
        $this->data['sub_page'] = 'certificate/index';
        $this->data['main_menu'] = 'certificate';
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('certificate_templete', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->certificate_validation();
            if ($this->validation->run() !== false) {
                // save all information in the database file
                $this->certificateModel->save($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('certificate');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['certificate'] = $this->appLib->getTable('certificates_templete', ['t.id' => $id], true);
        $this->data['title'] = translate('certificate') . " " . translate('templete');
        $this->data['headerelements'] = ['css' => ['css/certificate.css', 'vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['js/certificate.js', 'vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['sub_page'] = 'certificate/edit';
        $this->data['main_menu'] = 'certificate';
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        if (get_permission('certificate_templete', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $getRow = $builder->get('certificates_templete')->row_array();
            if (!empty($getRow)) {
                $path = 'uploads/certificate/';
                if (file_exists($path . $getRow['background'])) {
                    unlink($path . $getRow['background']);
                }
                if (file_exists($path . $getRow['logo'])) {
                    unlink($path . $getRow['logo']);
                }
                if (file_exists($path . $getRow['signature'])) {
                    unlink($path . $getRow['signature']);
                }
                $this->db->table('id', $id)->where();
                $this->db->table('certificates_templete')->delete();
            }
        }
    }
    public function getCertificate()
    {
        if (get_permission('certificate_templete', 'is_view')) {
            $templateID = $this->request->getPost('id');
            $this->data['template'] = $this->certificateModel->get('certificates_templete', ['id' => $templateID], true);
            echo view('certificate/viewTemplete', $this->data);
        }
    }
    public function generate_student()
    {
        if (!get_permission('generate_student_certificate', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['stuList'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID);
        }
        $this->data['headerelements'] = ['js' => ['js/certificate.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('student') . " " . translate('certificate') . " " . translate('generate');
        $this->data['sub_page'] = 'certificate/generate_student';
        $this->data['main_menu'] = 'certificate';
        echo view('layout/index', $this->data);
    }
    public function generate_employee()
    {
        if (!get_permission('generate_employee_certificate', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $staff_role = $this->request->getPost('staff_role');
            $this->data['stafflist'] = $this->employeeModel->getStaffList($branchID, $staff_role);
        }
        $this->data['headerelements'] = ['js' => ['js/certificate.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('employee') . " " . translate('certificate') . " " . translate('generate');
        $this->data['sub_page'] = 'certificate/generate_employee';
        $this->data['main_menu'] = 'certificate';
        echo view('layout/index', $this->data);
    }
    public function printFn($opt = '')
    {
        if ($_POST !== []) {
            if ($opt == 1) {
                if (!get_permission('generate_student_certificate', 'is_view')) {
                    ajax_access_denied();
                }
            } elseif ($opt == 2) {
                if (!get_permission('generate_employee_certificate', 'is_view')) {
                    ajax_access_denied();
                }
            } else {
                ajax_access_denied();
            }
            //get all QR Code file
            $files = glob('uploads/qr_code/*');
            foreach ($files as $file) {
    if (is_file($file)) {
                    unlink($file);
                    //delete file
}
            }
            $this->data['user_type'] = $opt;
            $this->data['user_array'] = $this->request->getPost('user_id');
            $templateID = $this->request->getPost('templete_id');
            $this->data['template'] = $this->certificateModel->get('certificates_templete', ['id' => $templateID], true);
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            echo view('certificate/printFn', $this->data, true);
        }
    }
    // get templete list based on the branch
    public function getTempleteByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        $userType = $this->request->getPost('user_type');
        if ($userType == 'student') {
            $userType = 1;
        }
        if ($userType == 'staff') {
            $userType = 2;
        }
        if (!empty($branchID)) {
            $builder->select('id,name');
            $this->db->table(['branch_id' => $branchID, 'user_type' => $userType])->where();
            $result = $builder->get('certificates_templete')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Classes.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Classes.php
 * @copyright : Reserved RamomCoder Team
 */
class Classes extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\ClassesModel
     */
    public $classes;
    public $validation;
    public $input;
    public $applicationModel;
    public $load;
    public $classesModel;
    public function __construct()
    {

        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->classes = new \App\Models\ClassesModel();
    }
    /* class form validation rules */
    protected function class_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['name_numeric' => ["label" => translate('name_numeric'), "rules" => 'trim|numeric']]);
        $this->validation->setRules(['sections[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
    }
    public function index()
    {
        if (!get_permission('classes', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('classes', 'is_add')) {
            $this->class_validation();
            if ($this->validation->run() !== false) {
                $arrayClass = ['name' => $this->request->getPost('name'), 'name_numeric' => $this->request->getPost('name_numeric'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('class', $arrayClass)->insert();
                $class_id = $this->db->insert_id();
                $sections = $this->request->getPost('sections');
                foreach ($sections as $section) {
    $arrayData = ['class_id' => $class_id, 'section_id' => $section];
                    $query = $builder->getWhere("sections_allocation", $arrayData);
                    if ($query->num_rows() == 0) {
                        $this->db->table('sections_allocation', $arrayData)->insert();
}
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('classes');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['classlist'] = $this->appLib->getTable('class');
        $this->data['query_classes'] = $builder->get('class');
        $this->data['title'] = translate('control_classes');
        $this->data['sub_page'] = 'classes/index';
        $this->data['main_menu'] = 'classes';
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('classes', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->class_validation();
            if ($this->validation->run() !== false) {
                $id = $this->request->getPost('class_id');
                $arrayClass = ['name' => $this->request->getPost('name'), 'name_numeric' => $this->request->getPost('name_numeric'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('id', $id)->where();
                $this->db->table('class', $arrayClass)->update();
                $sections = $this->request->getPost('sections');
                foreach ($sections as $section) {
    $query = $builder->getWhere("sections_allocation", ['class_id' => $id, 'section_id' => $section]);
                    if ($query->num_rows() == 0) {
                        $this->db->table('sections_allocation', ['class_id' => $id, 'section_id' => $section])->insert();
}
                }
                $this->db->where_not_in('section_id', $sections);
                $this->db->table('class_id', $id)->where();
                $this->db->table('sections_allocation')->delete();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('classes');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['class'] = $this->appLib->getTable('class', ['t.id' => $id], true);
        $this->data['title'] = translate('control_classes');
        $this->data['sub_page'] = 'classes/edit';
        $this->data['main_menu'] = 'classes';
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        if (get_permission('classes', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('class')->delete();
            if ($db->affectedRows() > 0) {
                $this->db->table('class_id', $id)->where();
                $this->db->table('sections_allocation')->delete();
            }
        }
    }
    // class teacher allocation
    public function teacher_allocation()
    {
        if (!get_permission('assign_class_teacher', 'is_view')) {
            access_denied();
        }
        $branch_id = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branch_id;
        $this->data['query'] = $this->classesModel->getTeacherAllocation($branch_id);
        $this->data['title'] = translate('assign_class_teacher');
        $this->data['sub_page'] = 'classes/teacher_allocation';
        $this->data['main_menu'] = 'classes';
        echo view('layout/index', $this->data);
    }
    public function getAllocationTeacher()
    {
        if (get_permission('assign_class_teacher', 'is_edit')) {
            $allocation_id = $this->request->getPost('id');
            $this->data['data'] = $this->appLib->get_table('teacher_allocation', $allocation_id, true);
            echo view('classes/tallocation_modalEdit', $this->data);
        }
    }
    public function teacher_allocation_save()
    {
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required|callback_unique_sectionID']]);
            $this->validation->setRules(['staff_id' => ["label" => translate('teacher'), "rules" => 'required|callback_unique_teacherID']]);
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->classesModel->teacherAllocationSave($post);
                $url = base_url('classes/teacher_allocation');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function teacher_allocation_delete($id = '')
    {
        if (get_permission('assign_class_teacher', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('teacher_allocation')->delete();
        }
    }
    // validate here, if the check teacher allocated for this class
    public function unique_teacherID($teacher_id)
    {
        if (!empty($teacher_id)) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $allocationID = $this->request->getPost('allocation_id');
            if (!empty($allocationID)) {
                $this->db->where_not_in('id', $allocationID);
            }
            $this->db->table('teacher_id', $teacher_id)->where();
            $this->db->table('class_id', $classID)->where();
            $this->db->table('section_id', $sectionID)->where();
            $query = $builder->get('teacher_allocation');
            if ($query->num_rows() > 0) {
                $this->validation->setRule("unique_teacherID", translate('class_teachers_are_already_allocated_for_this_class'));
                return false;
            } else {
                return true;
            }
        }
        return null;
    }
    // validate here, if the check teacher allocated for this class
    public function unique_sectionID($sectionID)
    {
        if (!empty($sectionID)) {
            $classID = $this->request->getPost('class_id');
            $allocationID = $this->request->getPost('allocation_id');
            if (!empty($allocationID)) {
                $this->db->where_not_in('id', $allocationID);
            }
            $this->db->table('class_id', $classID)->where();
            $this->db->table('section_id', $sectionID)->where();
            $query = $builder->get('teacher_allocation');
            if ($query->num_rows() > 0) {
                $this->validation->setRule("unique_sectionID", translate('this_class_teacher_already_assigned'));
                return false;
            } else {
                return true;
            }
        }
        return null;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Communication.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Communication.php
 * @copyright : Reserved RamomCoder Team
 */
class Communication extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\CommunicationModel
     */
    public $communication;
    public $input;
    public $communicationModel;
    public $load;
    public $validation;
    public $upload;
    public $applicationModel;
    public function __construct()
    {

        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->communication = new \App\Models\CommunicationModel();
    }
    public function index()
    {
        if (is_loggedin()) {
            return redirect()->to(base_url('communication/mailbox/inbox'));
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    public function mailbox($action = 'inbox')
    {
        if ($action == 'compose') {
            $this->data['inside_subview'] = 'message_compose';
        } elseif ($action == 'inbox') {
            $this->data['inside_subview'] = 'message_inbox';
        } elseif ($action == 'sent') {
            $this->data['inside_subview'] = 'message_sent';
        } elseif ($action == 'important') {
            $this->data['inside_subview'] = 'message_important';
        } elseif ($action == 'trash') {
            $this->data['inside_subview'] = 'message_trash';
        } elseif ($action == 'read') {
            $id = urldecode((string) $this->request->getGet('id'));
            if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $id) || is_numeric($id) == false) {
                return redirect()->to(base_url('dashboard'));
                exit;
            }
            $response = $this->communicationModel->mark_messages_read($id);
            $this->data['message_id'] = $id;
            $this->data['inside_subview'] = 'message_read';
        }
        $this->data['active_user'] = loggedin_role_id() . '-' . get_loggedin_user_id();
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('mailbox');
        $this->data['sub_page'] = 'communication/message';
        $this->data['main_menu'] = 'message';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        echo view('layout/index', $this->data);
    }
    public function message_send()
    {
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'trim|required']]);
            $this->validation->setRules(['receiver_id' => ["label" => translate('receiver'), "rules" => 'trim|required']]);
            $this->validation->setRules(['subject' => ["label" => translate('subject'), "rules" => 'trim|required']]);
            $this->validation->setRules(['message_body' => ["label" => translate('message'), "rules" => 'trim|required']]);
            $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_handle_upload']]);
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $message_id = $this->communicationModel->mailbox_compose($post);
                set_alert('success', translate('message_sent_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function message_reply()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_handle_upload']]);
            $this->validation->setRules(['message' => ["label" => 'Message', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $message_id = $this->request->getPost('message_id');
                if ($this->request->getPost('user_identity') == 'sender') {
                    $arrayMsg['identity'] = 1;
                    $this->db->table('id', $message_id)->where();
                    $this->db->table('message', ['read_status' => 0])->update();
                } else {
                    $arrayMsg['identity'] = 0;
                    $this->db->table('id', $message_id)->where();
                    $this->db->table('message', ['reply_status' => 1])->update();
                }
                $arrayMsg['created_at'] = date('Y-m-d H:i:s');
                $arrayMsg['message_id'] = $message_id;
                $arrayMsg['body'] = $this->request->getPost('message');
                if ($_FILES["attachment_file"]['name'] != "") {
                    // uploading file using codeigniter upload library
                    $config['upload_path'] = 'uploads/attachments/';
                    $config['encrypt_name'] = true;
                    $config['allowed_types'] = '*';
                    $file = $this->request->getFile('attachment_file'); $file->initialize($config);
                    if ($this->upload->do_upload("attachment_file")) {
                        $arrayMsg['file_name'] = $file = $this->request->getFile('attachment_file'); $file->data('orig_name');
                        $arrayMsg['enc_name'] = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
                    }
                }
                $this->db->table('message_reply', $arrayMsg)->insert();
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // file downloader
    public function download()
    {
        $encrypt_name = urldecode((string) $this->request->getGet('file'));
        $type = urldecode((string) $this->request->getGet('type'));
        if (!preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $type)) {
            return redirect()->to(base_url('dashboard'));
            exit;
        }
        $table = $type === 'reply' ? 'message_reply' : 'message';
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $encrypt_name)) {
            $file_name = $db->table($table)->get($table)->row()->file_name;
            if (!empty($file_name)) {
                helper('download');
                return $this->response->download($file_name, file_get_contents('uploads/attachments/' . $encrypt_name));
            }
        }
    }
    // upload file form validation
    public function handle_upload()
    {
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $allowedExts = array_map('trim', array_map('strtolower', explode(',', (string) $this->data['global_config']['file_extension'])));
            $allowedSizeKB = $this->data['global_config']['file_size'];
            $allowedSize = floatval(1024 * $allowedSizeKB);
            $file_size = $_FILES["attachment_file"]["size"];
            $file_name = $_FILES["attachment_file"]["name"];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["attachment_file"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('handle_upload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
                if ($file_size > $allowedSize) {
                    $this->validation->setRule('handle_upload', translate('file_size_shoud_be_less_than') . " {$allowedSizeKB} KB.");
                    return false;
                }
            } else {
                $this->validation->setRule('handle_upload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        }
        return null;
    }
    /* message delete */
    public function delete_mail()
    {
        $arrayID = $this->request->getPost('arrayID');
        $mode = $this->request->getPost('mode');
        if (count($arrayID) > 0) {
            foreach ($arrayID as $value) {
    $this->db->table('id', $value)->where();
                $this->db->table('message', ['trash_' . $mode => 1])->update();
}
            set_alert('success', translate('message_has_been_deleted'));
        } else {
            set_alert('error', 'Please Select a Message to Delete');
        }
    }
    public function set_fvourite_status()
    {
        $messageID = $this->request->getPost('messageID');
        $status = $this->request->getPost('status');
        $active_user = loggedin_role_id() . '-' . get_loggedin_user_id();
        $query = $db->table('message')->get('message')->row();
        if ($active_user == $query->sender) {
            $data['fav_sent'] = $status == 'false' ? 0 : 1;
        } elseif ($active_user == $query->reciever) {
            $data['fav_inbox'] = $status == 'false' ? 0 : 1;
        }
        $this->db->table('id', $messageID)->where();
        $this->db->table('message', $data)->update();
        $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
        echo json_encode($return);
    }
    /* mailbox trash observe */
    public function trash_observe()
    {
        $activeUser = loggedin_role_id() . '-' . get_loggedin_user_id();
        $arrayID = $this->request->getPost('array_id');
        $mode = $this->request->getPost('mode');
        if ($mode == 'restore') {
            $status = 0;
        } elseif ($mode == 'delete') {
            $status = 1;
        } elseif ($mode == 'forever') {
            $status = 2;
        }
        if (count($arrayID) > 0) {
            $array = [];
            foreach ($arrayID as $id) {
    $get_user = $db->table('message')->get('message')->row();
                if ($get_user->sender == $activeUser) {
                    $array['trash_sent'] = $status;
} elseif ($get_user->reciever == $activeUser) {
                    $array['trash_inbox'] = $status;
                }
                $this->db->table('id', $id)->where();
                $this->db->table('message', $array)->update();
            }
            if ($option == 'restore') {
                set_alert('success', translate('message_has_been_restored'));
            } elseif ($option == 'delete') {
                set_alert('success', translate('message_has_been_deleted'));
            }
        } else {
            set_alert('error', 'Please Select a Message to Delete');
        }
    }
    public function getStafflistRole()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $role_id = $this->request->getPost('role_id');
            $selected_id = $_POST['staff_id'] ?? 0;
            $builder->select('staff.id,staff.name,staff.staff_id,lc.role');
            $this->db->from('staff');
            $builder->join('login_credential as lc', 'lc.user_id = staff.id AND lc.role != 6 AND lc.role != 7', 'inner');
            $this->db->table('lc.role', $role_id)->where();
            $this->db->table('staff.branch_id', $branch_id)->where();
            $this->db->order_by('staff.id', 'asc');
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $staff) {
    if ($staff['id'] == get_loggedin_user_id()) {
                        continue;
}
                    $selected = $staff['id'] == $selected_id ? 'selected' : '';
                    $html .= "<option value='" . $staff['id'] . "' " . $selected . ">" . $staff['name'] . " (" . $staff['staff_id'] . ")</option>";
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getStudentByClass()
    {
        $html = "";
        $class_id = $this->request->getPost('class_id');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($class_id)) {
            $builder->select('e.student_id,s.register_no,CONCAT(s.first_name, " ", s.last_name) as fullname');
            $this->db->from('enroll as e');
            $builder->join('student as s', 's.id = e.student_id', 'inner');
            $builder->join('login_credential as l', 'l.user_id = e.student_id and l.role = 7', 'left');
            $this->db->table('l.active', 1)->where();
            $this->db->table('e.session_id', get_session_id())->where();
            $this->db->table('e.class_id', $class_id)->where();
            $this->db->table('e.branch_id', $branch_id)->where();
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    if ($row['student_id'] == get_loggedin_user_id()) {
                        continue;
}
                    $html .= '<option value="' . $row['student_id'] . '">' . $row['fullname'] . ' (Register No : ' . $row['register_no'] . ')</option>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_class_first') . '</option>';
        }
        echo $html;
    }
    public function getParentListBranch()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $role_id = $this->request->getPost('role_id');
            $selected_id = $_POST['parent_id'] ?? 0;
            $builder->select('parent.id,parent.name');
            $this->db->from('parent');
            $this->db->table('parent.branch_id', $branch_id)->where();
            $this->db->order_by('parent.id', 'asc');
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $staff) {
    if ($staff['id'] == get_loggedin_user_id()) {
                        continue;
}
                    $selected = $staff['id'] == $selected_id ? 'selected' : '';
                    $html .= "<option value='" . $staff['id'] . "' " . $selected . ">" . $staff['name'] . "</option>";
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }

    public function messageImportant()
    {
        $active_user = get_loggedin_user_id();

        $sql = "SELECT * FROM message WHERE (sender = " . $db->escape($active_user) . " AND fav_sent = 1 AND trash_sent = 0) OR (receiver = " .
               $db->escape($active_user) . " AND fav_inbox = 1 AND trash_inbox = 0) ORDER BY id DESC";
        $messages = $db->query($sql)->getResult();

        $applicationModel = new \App\Models\ApplicationModel(); // Ensure you have an ApplicationModel for getting user details

        return view('communication/message_important', [
            'messages' => $messages,
            'active_user' => $active_user,
            'applicationModel' => $applicationModel
        ]);
    }

    public function messageTrash()
    {
        $active_user = get_loggedin_user_id();

        $sql = "SELECT * FROM message WHERE (sender = " . $db->escape($active_user) . " AND trash_sent = 1) OR (receiver = " .
               $db->escape($active_user) . " AND trash_inbox = 1) ORDER BY id DESC";
        $messages = $db->query($sql)->getResult();

        $applicationModel = new \App\Models\ApplicationModel(); // Ensure you have an ApplicationModel for getting user details

        return view('communication/message_trash', [
            'messages' => $messages,
            'active_user' => $active_user,
            'applicationModel' => $applicationModel
        ]);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Cron_api.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\FeesModel;
use App\Models\SmsModel;
use App\Models\SendsmsmailModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Cron_api.php
 * @copyright : Reserved RamomCoder Team
 */
class Cron_api extends MyController
 
{
    protected $db;



    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\SendsmsmailModel
     */
    public $sendsmsmail;
    public $api_key;
    public $load;
    public $sendsmsmailModel;
    public $applicationModel;
    public $smsModel;
    public $feesModel;
    public function __construct()
    {



        $this->fees = new \App\Models\FeesModel();
        $this->sms = new \App\Models\SmsModel();
        $this->sendsmsmail = new \App\Models\SendsmsmailModel();
        $this->api_key = $this->data['global_config']['cron_secret_key'];
    }
    public function index()
    {
        if (!is_loggedin() || !get_permission('cron_job', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('cron_job', 'is_edit')) {
                access_denied();
            }
            $this->db->table('id', 1)->where();
            $this->db->table('global_settings', ['cron_secret_key' => generate_encryption_key()])->update();
            set_alert('success', "Successfully Created The New Secret Key.");
            redirect(current_url());
        }
        $this->data['title'] = translate('cron_job');
        $this->data['sub_page'] = 'cron_api/index';
        $this->data['main_menu'] = 'settings';
        echo view('layout/index', $this->data);
    }
    public function send_smsemail_command($api_key = '')
    {
        if ($api_key != "" && $this->api_key != $api_key) {
            echo "API Key is required or API Key does not match.";
            exit;
        }
        $sql = "SELECT * FROM bulk_sms_email WHERE posting_status = 1 AND schedule_time < NOW() ORDER BY schedule_time ASC";
        $bulkArray = $db->query($sql)->result_array();
        foreach ($bulkArray as $row) {
    $this->db->table('id', $row['id'])->where();
            $this->db->table('bulk_sms_email', ['posting_status' => 0])->update();
            $sCount = 0;
            $usersList = json_decode((string) $row['additional'], true);
            foreach ($usersList as $user) {
                if ($row['message_type'] == 1) {
                    $response = $this->sendsmsmailModel->sendSMS($user['mobileno'], $row['message'], $user['name'], $user['email'], $row['sms_gateway']);
} else {
                    $response = $this->sendsmsmailModel->sendEmail($user['email'], $row['message'], $user['name'], $user['mobileno'], $row['email_subject']);
                }
                if ($response == true) {
                    $sCount++;
                }
            }
            $this->db->table('id', $row['id'])->where();
            $this->db->table('bulk_sms_email', ['additional' => "", 'successfully_sent' => $sCount, 'posting_status' => 2])->update();
        }
    }
    public function homework_command($api_key = '')
    {
        if ($api_key != "" && $this->api_key != $api_key) {
            echo "API Key is required or API Key does not match.";
            exit;
        }
        $sql = "SELECT * FROM homework WHERE status = 1 AND date(schedule_date) = CURDATE() ORDER BY schedule_date ASC";
        $homeworkArray = $db->query($sql)->result_array();
        foreach ($homeworkArray as $row) {
    $this->db->table('id', $row['id'])->where();
            $this->db->table('homework', ['status' => 0])->update();
            //send homework sms notification
            if ($row['sms_notification'] == 1) {
                $stuList = $this->applicationModel->getStudentListByClassSection($row['class_id'], $row['section_id'], $row['branch_id']);
                foreach ($stuList as $stuRow) {
                    $stuRow['date_of_homework'] = $row['date_of_homework'];
                    $stuRow['date_of_submission'] = $row['date_of_submission'];
                    $stuRow['subject_id'] = $row['subject_id'];
                    $this->smsModel->sendHomework($stuRow);
}
            }
        }
    }
    public function fees_reminder_command($api_key = '')
    {
        if ($api_key != "" && $this->api_key != $api_key) {
            echo "API Key is required or API Key does not match.";
            exit;
        }
        $feesArray = $builder->get('fees_reminder')->result_array();
        foreach ($feesArray as $row) {
    $studentList = [];
            $days = $row['days'];
            if ($row['frequency'] == 'before') {
                $date = date('Y-m-d', strtotime("+ {$days
} days"));
            } elseif ($row['frequency'] == 'after') {
                $date = date('Y-m-d', strtotime("- {$days} days"));
            }
            $getFeeTypes = $this->feesModel->getFeeReminderByDate($date, $row['branch_id']);
            foreach ($getFeeTypes as $type_value) {
    $getStuDetails = $this->feesModel->getStudentsListReminder($type_value['fee_groups_id'], $type_value['fee_type_id']);
                foreach ($getStuDetails as $stu_value) {
                    $stu_value['due_date'] = _d($type_value['due_date']);
                    $stu_value['type_name'] = $type_value['name'];
                    $stu_value['total_amount'] = (float) $type_value['amount'];
                    $stu_value['balance_amount'] = (float) ($type_value['amount'] - ($stu_value['payment']['total_paid'] + $stu_value['payment']['total_discount']));
                    unset($stu_value['payment']);
                    if ($stu_value['balance_amount'] > 0) {
                        $studentList[] = $stu_value;
}
                }
            }
            foreach ($studentList as $stuRow) {
    $this->smsModel->feeReminder($stuRow, $row);
}
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Employee.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
use App\Models\CrudModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Employee.php
 * @copyright : Reserved RamomCoder Team
 */
class Employee extends AdminController
 
{
    public $bulk;
    protected $db;




    public $load;
    /**
     * @var App\Models\EmployeeModel
     */
    public $employee;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\CrudModel
     */
    public $crud;
    public $validation;
    public $input;
    public $router;
    public $applicationModel;
    public $appLib;
    public $employeeModel;
    public $emailModel;
    public $session;
    public $uri;
    public $upload;
    public $csvimport;
    public function __construct()
    {




        parent::__construct();
        
        
        
        $this->csvimport = service('csvimport');$this->bulk = service('bulk');$this->appLib = service('appLib'); 
$this->load->helpers('custom_fields');
        $this->employee = new \App\Models\EmployeeModel();
        $this->email = new \App\Models\EmailModel();
        $this->crud = new \App\Models\CrudModel();
    }
    public function index()
    {
        return redirect()->to(base_url('dashboard'));
    }
    /* staff form validation rules */
    protected function employee_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['mobile_no' => ["label" => translate('mobile_no'), "rules" => 'trim|required']]);
        $this->validation->setRules(['present_address' => ["label" => translate('present_address'), "rules" => 'trim|required']]);
        $this->validation->setRules(['designation_id' => ["label" => translate('designation'), "rules" => 'trim|required']]);
        $this->validation->setRules(['department_id' => ["label" => translate('department'), "rules" => 'trim|required']]);
        $this->validation->setRules(['joining_date' => ["label" => translate('joining_date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['qualification' => ["label" => translate('qualification'), "rules" => 'trim|required']]);
        $this->validation->setRules(['user_role' => ["label" => translate('role'), "rules" => 'trim|required|callback_valid_role']]);
        $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
        if ($this->request->getPost('staff_id')) {
            $this->validation->setRules(['staff_id_no' => ["label" => translate('staff_id'), "rules" => 'trim|required|callback_unique_staffID']]);
        }
        $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
        if (!isset($_POST['staff_id'])) {
            $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
            $this->validation->setRules(['retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[password]']]);
        }
        $this->validation->setRules(['facebook' => ["label" => 'Facebook', "rules" => 'valid_url']]);
        $this->validation->setRules(['twitter' => ["label" => 'Twitter', "rules" => 'valid_url']]);
        $this->validation->setRules(['linkedin' => ["label" => 'Linkedin', "rules" => 'valid_url']]);
        $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
        // custom fields validation rules
        $class_slug = $this->router->fetch_class();
        $customFields = getCustomFields($class_slug);
        foreach ($customFields as $fields_value) {
    if ($fields_value['required']) {
                $fieldsID = $fields_value['id'];
                $fieldLabel = $fields_value['field_label'];
                $this->validation->setRules(["custom_fields[employee][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
        }
    }
    /* getting all employee list */
    public function view($role = 2)
    {
        if (!get_permission('employee', 'is_view') || ($role == 1 || $role == 6 || $role == 7)) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['act_role'] = $role;
        $this->data['title'] = translate('employee');
        $this->data['sub_page'] = 'employee/view';
        $this->data['main_menu'] = 'employee';
        $this->data['stafflist'] = $this->employeeModel->getStaffList($branchID, $role);
        echo view('layout/index', $this->data);
    }
    /* bank form validation rules */
    protected function bank_validation()
    {
        $this->validation->setRules(['bank_name' => ["label" => translate('bank_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['holder_name' => ["label" => translate('holder_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['bank_branch' => ["label" => translate('bank_branch'), "rules" => 'trim|required']]);
        $this->validation->setRules(['account_no' => ["label" => translate('account_no'), "rules" => 'trim|required']]);
    }
    /* employees all information are prepared and stored in the database here */
    public function add()
    {
        if (!get_permission('employee', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $userRole = $this->request->getPost('user_role');
            //Saas addon script
            if ($this->appLib->isExistingAddon('saas')) {
                if ($userRole == 3) {
                    // check saas teacher add limit
                    if (!checkSaasLimit('teacher')) {
                        set_alert('error', translate('update_your_package'));
                        redirect(site_url('dashboard'));
                    }
                } elseif (!checkSaasLimit('staff')) {
                    // check saas staff add limit
                    set_alert('error', translate('update_your_package'));
                    redirect(site_url('dashboard'));
                }
            }
            $this->employee_validation();
            if (!isset($_POST['chkskipped'])) {
                $this->bank_validation();
            }
            if ($this->validation->run() !== false) {
                //save all employee information in the database
                $post = $this->request->getPost();
                $empID = $this->employeeModel->save($post);
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $empID);
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                //send account activate email
                $this->emailModel->sentStaffRegisteredAccount($post);
                return redirect()->to(base_url('employee/view/' . $post['user_role']));
            }
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('add_employee');
        $this->data['sub_page'] = 'employee/add';
        $this->data['main_menu'] = 'employee';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['js/employee.js', 'vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* profile preview and information are controlled here */
    public function profile($id = '')
    {
        if (!get_permission('employee', 'is_edit')) {
            access_denied();
        }
        if ($this->request->getPost('submit') == 'update') {
            $this->employee_validation();
            if ($this->validation->run() == true) {
                //save all employee information in the database
                $this->employeeModel->save($this->request->getPost());
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $id);
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                session()->set_flashdata('profile_tab', 1);
                return redirect()->to(base_url('employee/profile/' . $id));
            } else {
                session()->set_flashdata('profile_tab', 1);
            }
        }
        $this->data['categorylist'] = $this->appLib->get_document_category();
        $this->data['staff'] = $this->employeeModel->getSingleStaff($id);
        $this->data['title'] = translate('employee_profile');
        $this->data['sub_page'] = 'employee/profile';
        $this->data['main_menu'] = 'employee';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['js/employee.js', 'vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    // user interface and employees all information are prepared and stored in the database here
    public function delete($id = '')
    {
        if (!get_permission('employee', 'is_delete')) {
            access_denied();
        }
        // check student restrictions
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('staff', ['id' => $id])->delete();
        if ($db->affectedRows() > 0) {
            $this->db->table('user_id', $id)->where();
            $this->db->where_not_in('role', [1, 6, 7]);
            $this->db->table('login_credential')->delete();
        }
    }
    // unique valid username verification is done here
    public function unique_username($username)
    {
        if ($this->request->getPost('staff_id')) {
            $staff_id = $this->request->getPost('staff_id');
            $login_id = $this->appLib->get_credential_id($staff_id);
            $this->db->where_not_in('id', $login_id);
        }
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_username", translate('username_has_already_been_used'));
            return false;
        } else {
            return true;
        }
    }
    // unique valid staff id verification is done here
    public function unique_staffID($id)
    {
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('staff_id')) {
            $staff_id = $this->request->getPost('staff_id');
            $this->db->where_not_in('id', $staff_id);
        }
        $this->db->table('branch_id', $branchID)->where();
        $this->db->table('staff_id', $id)->where();
        $query = $builder->get('staff');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_staffID", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    public function valid_role($id)
    {
        $restrictions = [1, 6, 7];
        if (in_array($id, $restrictions)) {
            $this->validation->setRule("valid_role", translate('selected_role_restrictions'));
            return false;
        } else {
            return true;
        }
    }
    // employee login password change here by admin
    public function change_password()
    {
        if (!get_permission('employee', 'is_edit')) {
            ajax_access_denied();
        }
        if (!isset($_POST['authentication'])) {
            $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
        } else {
            $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim']]);
        }
        if ($this->validation->run() !== false) {
            $studentID = $this->request->getPost('staff_id');
            $password = $this->request->getPost('password');
            if (!isset($_POST['authentication'])) {
                $this->db->where_not_in('role', [1, 6, 7]);
                $this->db->table('user_id', $studentID)->where();
                $this->db->table('login_credential', ['password' => $this->appLib->pass_hashed($password)])->update();
            } else {
                $this->db->where_not_in('role', [1, 6, 7]);
                $this->db->table('user_id', $studentID)->where();
                $this->db->table('login_credential', ['active' => 0])->update();
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // employee bank details are create here / ajax
    public function bank_account_create()
    {
        if (!get_permission('employee', 'is_edit')) {
            ajax_access_denied();
        }
        $this->bank_validation();
        if ($this->validation->run() !== false) {
            $post = $this->request->getPost();
            $this->employeeModel->bankSave($post);
            set_alert('success', translate('information_has_been_saved_successfully'));
            session()->set_flashdata('bank_tab', 1);
            echo json_encode(['status' => 'success']);
        } else {
            $error = $this->validation->error_array();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    // employee bank details are update here / ajax
    public function bank_account_update()
    {
        if (!get_permission('employee', 'is_edit')) {
            ajax_access_denied();
        }
        $this->bank_validation();
        if ($this->validation->run() !== false) {
            $post = $this->request->getPost();
            $this->employeeModel->bankSave($post);
            session()->set_flashdata('bank_tab', 1);
            set_alert('success', translate('information_has_been_updated_successfully'));
            echo json_encode(['status' => 'success']);
        } else {
            $error = $this->validation->error_array();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    // employee bank details are delete here
    public function bankaccount_delete($id)
    {
        if (get_permission('employee', 'is_edit')) {
            $this->db->table('id', $id)->where();
            $this->db->table('staff_bank_account')->delete();
            session()->set_flashdata('bank_tab', 1);
        }
    }
    public function bank_details()
    {
        $id = $this->request->getPost('id');
        $this->db->table('id', $id)->where();
        $query = $builder->get('staff_bank_account');
        $result = $query->row_array();
        echo json_encode($result);
    }
    protected function document_validation()
    {
        $this->validation->setRules(['document_title' => ["label" => translate('document_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['document_category' => ["label" => translate('document_category'), "rules" => 'trim|required']]);
        if ($this->uri->segment(2) != 'document_update' && (isset($_FILES['document_file']['name']) && empty($_FILES['document_file']['name']))) {
            $this->validation->setRules(['document_file' => ["label" => translate('document_file'), "rules" => 'required']]);
        }
    }
    // employee document details are create here / ajax
    public function document_create()
    {
        if (!get_permission('employee', 'is_edit')) {
            ajax_access_denied();
        }
        $this->document_validation();
        if ($this->validation->run() !== false) {
            $insert_doc = [
                'staff_id' => $this->request->getPost('staff_id'),
                'title' => $this->request->getPost('document_title'),
                'category_id' => $this->request->getPost('document_category'),
                'remarks' => $this->request->getPost('remarks')
            ];
            
            $file = $this->request->getFile('attachment_file');
            if ($file && $file->isValid() && !$file->hasMoved()) {
                $config = [
                    'upload_path'   => './uploads/attachments/documents/',
                    'allowed_types' => 'gif|jpg|png|pdf|docx|csv|txt',
                    'max_size'      => 2048,
                    'encrypt_name'  => true,
                ];
                
                $file->move($config['upload_path'], $file->getRandomName());
                
                $insert_doc['file_name'] = $file->getClientName();
                $insert_doc['enc_name'] = $file->getName();
                
                $this->db->table('staff_documents')->insert($insert_doc);
                set_alert('success', translate('information_has_been_saved_successfully'));
            } else {
                set_alert('error', $file->getErrorString());
            }
            
            session()->setFlashdata('documents_details', 1);
            echo json_encode(['status' => 'success']);
        } else {
            $error = $this->validation->getErrors();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    
    // employee document details are update here / ajax
    public function document_update()
{
    if (!get_permission('employee', 'is_edit')) {
        ajax_access_denied();
    }
    // validate inputs
    $this->document_validation();
    if ($this->validation->run() !== false) {
        $document_id = $this->request->getPost('document_id');
        $insert_doc = [
            'title' => $this->request->getPost('document_title'),
            'category_id' => $this->request->getPost('document_category'),
            'remarks' => $this->request->getPost('remarks')
        ];
        
        $file = $this->request->getFile('document_file');
        if ($file && $file->isValid() && !$file->hasMoved()) {
            $config = [
                'upload_path' => './uploads/attachments/documents/',
                'allowed_types' => 'gif|jpg|png|pdf|docx|csv|txt',
                'max_size' => 2048,
                'encrypt_name' => true,
            ];
            
            $file->move($config['upload_path'], $file->getRandomName());
            
            // Remove the existing file
            $exist_file_name = $this->request->getPost('exist_file_name');
            $exist_file_path = FCPATH . 'uploads/attachments/documents/' . $exist_file_name;
            if (file_exists($exist_file_path)) {
                unlink($exist_file_path);
            }
            
            // Set new file data
            $insert_doc['file_name'] = $file->getClientName();
            $insert_doc['enc_name'] = $file->getName();
        } else {
            if ($file) {
                set_alert('error', $file->getErrorString());
                echo json_encode(['status' => 'fail', 'error' => $file->getErrorString()]);
                return;
            }
        }
        
        $this->db->table('staff_documents')->where('id', $document_id)->update($insert_doc);
        set_alert('success', translate('information_has_been_updated_successfully'));
        echo json_encode(['status' => 'success']);
        session()->setFlashdata('documents_details', 1);
    } else {
        $error = $this->validation->getErrors();
        echo json_encode(['status' => 'fail', 'error' => $error]);
    }
}

    // employee document details are delete here
    public function document_delete($id)
    {
        if (get_permission('employee', 'is_edit')) {
            $enc_name = $db->table('staff_documents')->get('staff_documents')->row()->enc_name;
            $file_name = FCPATH . 'uploads/attachments/documents/' . $enc_name;
            if (file_exists($file_name)) {
                unlink($file_name);
            }
            $this->db->table('id', $id)->where();
            $this->db->table('staff_documents')->delete();
            session()->set_flashdata('documents_details', 1);
        }
    }
    public function document_details()
    {
        $id = $this->request->getPost('id');
        $this->db->table('id', $id)->where();
        $query = $builder->get('staff_documents');
        $result = $query->row_array();
        echo json_encode($result);
    }
    /* file downloader */
    public function documents_download()
    {
        $encrypt_name = urldecode((string) $this->request->getGet('file'));
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $encrypt_name)) {
            $file_name = $db->table('staff_documents')->get('staff_documents')->row()->file_name;
            if (!empty($file_name)) {
                helper('download');
                return $this->response->download($file_name, file_get_contents('uploads/attachments/documents/' . $encrypt_name));
            }
        }
    }
    /* department form validation rules */
    protected function department_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['department_name' => ["label" => translate('department_name'), "rules" => 'trim|required|callback_unique_department']]);
    }
    // employee department user interface and information are controlled here
    public function department()
    {
        if ($_POST !== []) {
            if (!get_permission('department', 'is_add')) {
                access_denied();
            }
            $this->department_validation();
            if ($this->validation->run() !== false) {
                $arrayDepartment = ['name' => $this->request->getPost('department_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('staff_department', $arrayDepartment)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('employee/department'));
            }
        }
        $this->data['department'] = $this->appLib->getTable('staff_department');
        $this->data['title'] = translate('employee');
        $this->data['sub_page'] = 'employee/department';
        $this->data['main_menu'] = 'employee';
        echo view('layout/index', $this->data);
    }
    public function department_edit()
    {
        if (!get_permission('department', 'is_edit')) {
            ajax_access_denied();
        }
        $this->department_validation();
        if ($this->validation->run() !== false) {
            $arrayDepartment = ['name' => $this->request->getPost('department_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $department_id = $this->request->getPost('department_id');
            $this->db->table('id', $department_id)->where();
            $this->db->table('staff_department', $arrayDepartment)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function department_delete($id)
    {
        if (!get_permission('department', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('staff_department')->delete();
    }
    // unique valid department name verification is done here
    public function unique_department($name)
    {
        $department_id = $this->request->getPost('department_id');
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($department_id)) {
            $this->db->where_not_in('id', $department_id);
        }
        $this->db->table('branch_id', $branchID)->where();
        $this->db->table('name', $name)->where();
        $q = $builder->get('staff_department');
        if ($q->num_rows() > 0) {
            $this->validation->setRule("unique_department", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    /* designation form validation rules */
    protected function designation_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['designation_name' => ["label" => translate('designation_name'), "rules" => 'trim|required|callback_unique_designation']]);
    }
    // employee designation user interface and information are controlled here
    public function designation()
    {
        if ($_POST !== []) {
            if (!get_permission('designation', 'is_add')) {
                access_denied();
            }
            $this->designation_validation();
            if ($this->validation->run() !== false) {
                $arrayData = ['name' => $this->request->getPost('designation_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('staff_designation', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('employee/designation'));
            }
        }
        $this->data['designation'] = $this->appLib->getTable('staff_designation');
        $this->data['title'] = translate('employee');
        $this->data['sub_page'] = 'employee/designation';
        $this->data['main_menu'] = 'employee';
        echo view('layout/index', $this->data);
    }
    public function designation_edit()
    {
        if (!get_permission('designation', 'is_edit')) {
            ajax_access_denied();
        }
        $this->designation_validation();
        if ($this->validation->run() !== false) {
            $designation_id = $this->request->getPost('designation_id');
            $arrayData = ['name' => $this->request->getPost('designation_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $designation_id)->where();
            $this->db->table('staff_designation', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function designation_delete($id)
    {
        if (!get_permission('designation', 'is_delete')) {
            access_denied();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('staff_designation')->delete();
    }
    // unique valid designation name verification is done here
    public function unique_designation($name)
    {
        $designation_id = $this->request->getPost('designation_id');
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($designation_id)) {
            $this->db->where_not_in('id', $designation_id);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('branch_id', $branchID)->where();
        $q = $builder->get('staff_designation');
        if ($q->num_rows() > 0) {
            $this->validation->setRule("unique_designation", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    // showing disable authentication student list
    public function disable_authentication()
    {
        // check access permission
        if (!get_permission('employee_disable_authentication', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['search'])) {
            $branchID = $this->applicationModel->get_branch_id();
            $role = $this->request->getPost('staff_role');
            $this->data['stafflist'] = $this->employeeModel->getStaffList($branchID, $role, 0);
        }
        if (isset($_POST['auth'])) {
            if (!get_permission('employee_disable_authentication', 'is_add')) {
                access_denied();
            }
            $stafflist = $this->request->getPost('views_bulk_operations');
            if (isset($stafflist)) {
                foreach ($stafflist as $id) {
    $this->db->table('user_id', $id)->where();
                    $this->db->where_not_in('role', [1, 6, 7]);
                    $this->db->table('login_credential', ['active' => 1])->update();
}
                set_alert('success', translate('information_has_been_updated_successfully'));
            } else {
                set_alert('error', 'Please select at least one item');
            }
            return redirect()->to(base_url('employee/disable_authentication'));
        }
        $this->data['title'] = translate('deactivate_account');
        $this->data['sub_page'] = 'employee/disable_authentication';
        $this->data['main_menu'] = 'employee';
        echo view('layout/index', $this->data);
    }
    /* employee csv importer */
    public function csv_import()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['user_role' => ["label" => translate('role'), "rules" => 'trim|required']]);
        $this->validation->setRules(['designation_id' => ["label" => translate('designation'), "rules" => 'trim|required']]);
        $this->validation->setRules(['department_id' => ["label" => translate('department'), "rules" => 'trim|required']]);
        if (isset($_FILES['userfile']['name']) && empty($_FILES['userfile']['name'])) {
            $this->validation->setRules(['userfile' => ["label" => "Select CSV File", "rules" => 'required']]);
        }
        if ($this->validation->run() !== false) {
            $branchID = $this->applicationModel->get_branch_id();
            $userRole = $this->request->getPost('user_role');
            $designationID = $this->request->getPost('designation_id');
            $departmentID = $this->request->getPost('department_id');
            $err_msg = "";
            $i = 0;
            $this->Csvimport = service('csvimport');
            $csv_array = $this->csvimport->get_array($_FILES["userfile"]["tmp_name"]);
            if ($csv_array) {
                $columnHeaders = ['Name', 'Gender', 'Religion', 'BloodGroup', 'DateOfBirth', 'JoiningDate', 'Qualification', 'MobileNo', 'PresentAddress', 'PermanentAddress', 'Email', 'Password'];
                $csvData = [];
                foreach ($csv_array as $row) {
    if ($i == 0) {
                        $csvData = array_keys($row);
}
                    $checkCSV = array_diff($columnHeaders, $csvData);
                    if (count($checkCSV) <= 0) {
                        if (filter_var($row['Email'], FILTER_VALIDATE_EMAIL)) {
                            // verify existing username
                            $this->db->table('username', $row['Email'])->where();
                            $query = $builder->getWhere('login_credential');
                            if ($query->num_rows() > 0) {
                                $err_msg .= $row['Name'] . " - Imported Failed : Email Already Exists.<br>";
                            } else {
                                // save all employee information in the database
                                $this->employeeModel->csvImport($row, $branchID, $userRole, $designationID, $departmentID);
                                $i++;
                            }
                        } else {
                            $err_msg .= $row['Name'] . " - Imported Failed : Invalid Email.<br>";
                        }
                    } else {
                        set_alert('error', translate('invalid_csv_file'));
                    }
                }
                if ($err_msg != null) {
                    $msgRes = $i . ' Students Have Been Successfully Added. <br>';
                    $msgRes .= $err_msg;
                    echo json_encode(['status' => 'errlist', 'errMsg' => $msgRes]);
                    exit;
                }
                if ($i > 0) {
                    set_alert('success', $i . ' Students Have Been Successfully Added');
                }
            } else {
                set_alert('error', translate('invalid_csv_file'));
            }
            echo json_encode(['status' => 'success']);
        } else {
            $error = $this->validation->error_array();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    /* sample csv downloader */
    public function csv_Sampledownloader()
    {
        helper('download');
        $data = file_get_contents('uploads/multi_employee_sample.csv');
        return $this->response->download("multi_employee_sample.csv", $data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Event.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Event.php
 * @copyright : Reserved RamomCoder Team
 */
class Event extends AdminController
{
    public $appLib;
    /**
     * @var App\Models\EventModel
     */
    public $event;
    public $applicationModel;
    public $validation;
    public $input;
    public $eventModel;
    public $load;
    public $db;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->event = new \App\Models\EventModel();
    }
    public function index()
    {
        // check access permission
        if (!get_permission('event', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('event', 'is_add')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
            if (!isset($_POST['holiday'])) {
                $this->validation->setRules(['type_id' => ["label" => translate('type'), "rules" => 'trim|required']]);
                $this->validation->setRules(['audition' => ["label" => translate('audition'), "rules" => 'trim|required']]);
                $audition = $this->request->getPost('audition');
            } else {
                $audition = 1;
            }
            $this->validation->setRules(['daterange' => ["label" => translate('date'), "rules" => 'trim|required']]);
            if ($audition == 2) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('class'), "rules" => 'trim|required']]);
            } elseif ($audition == 3) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
            if ($this->validation->run() !== false) {
                if ($audition != 1) {
                    $selectedList = [];
                    foreach ($this->request->getPost('selected_audience') as $user) {
    $selectedList[] = $user;
}
                } else {
                    $selectedList = null;
                }
                $holiday = $this->request->getPost('holiday');
                $type = empty($holiday) ? $this->request->getPost('type_id') : 'holiday';
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start_date = date("Y-m-d", strtotime($daterange[0]));
                $end_date = date("Y-m-d", strtotime($daterange[1]));
                $event_image = 'defualt.png';
                if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                    $event_image = $this->eventModel->fileupload("user_photo", "./uploads/frontend/events/", '', false);
                }
                $arrayEvent = ['branch_id' => $branchID, 'type' => $type, 'audition' => $audition, 'image' => $event_image, 'selected_list' => json_encode($selectedList), 'start_date' => $start_date, 'end_date' => $end_date];
                $this->eventModel->save($arrayEvent);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('event');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('events');
        $this->data['sub_page'] = 'event/index';
        $this->data['main_menu'] = 'event';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/daterangepicker/daterangepicker.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        // check access permission
        if (!get_permission('event', 'is_edit')) {
            access_denied();
        }
        $this->data['event'] = $this->appLib->getTable('event', ['t.id' => $id], true);
        if (empty($this->data['event'])) {
            redirect('dashboard');
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
            if (!isset($_POST['holiday'])) {
                $this->validation->setRules(['type_id' => ["label" => translate('type'), "rules" => 'trim|required']]);
                $this->validation->setRules(['audition' => ["label" => translate('audition'), "rules" => 'trim|required']]);
                $audition = $this->request->getPost('audition');
            } else {
                $audition = 1;
            }
            $this->validation->setRules(['daterange' => ["label" => translate('date'), "rules" => 'trim|required']]);
            if ($audition == 2) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('class'), "rules" => 'trim|required']]);
            } elseif ($audition == 3) {
                $this->validation->setRules(['selected_audience[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
            if ($this->validation->run() !== false) {
                if ($audition != 1) {
                    $selectedList = [];
                    foreach ($this->request->getPost('selected_audience') as $user) {
    $selectedList[] = $user;
}
                } else {
                    $selectedList = null;
                }
                $holiday = $this->request->getPost('holiday');
                $type = empty($holiday) ? $this->request->getPost('type_id') : 'holiday';
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start_date = date("Y-m-d", strtotime($daterange[0]));
                $end_date = date("Y-m-d", strtotime($daterange[1]));
                $event_image = $this->request->getPost('old_event_image');
                if (isset($_FILES["user_photo"]) && $_FILES['user_photo']['name'] != '' && !empty($_FILES['user_photo']['name'])) {
                    $eventimage = $event_image == 'defualt.png' ? '' : $event_image;
                    $event_image = $this->eventModel->fileupload("user_photo", "./uploads/frontend/events/", $eventimage, false);
                }
                $arrayEvent = ['id' => $this->request->getPost('id'), 'branch_id' => $branchID, 'type' => $type, 'audition' => $audition, 'image' => $event_image, 'selected_list' => json_encode($selectedList), 'start_date' => $start_date, 'end_date' => $end_date];
                $this->eventModel->save($arrayEvent);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('event');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('events');
        $this->data['sub_page'] = 'event/edit';
        $this->data['main_menu'] = 'event';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/daterangepicker/daterangepicker.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        // check access permission
        if (get_permission('event', 'is_delete')) {
            $event_db = $this->db->table('event')->where('id', $id)->get()->getRowArray();
            $file_name = $event_db['image'];
            if ($event_db['created_by'] == get_loggedin_user_id() || is_superadmin_loggedin()) {
                $this->db->table('id', $id)->where();
                $this->db->table('event')->delete();
                if ($file_name !== 'defualt.png') {
                    $file_name = 'uploads/frontend/events/' . $file_name;
                    if (file_exists($file_name)) {
                        unlink($file_name);
                    }
                }
            } else {
                set_alert('error', 'You do not have permission to delete');
            }
        } else {
            set_alert('error', translate('access_denied'));
        }
    }
    /* types form validation rules */
    protected function types_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['type_name' => ["label" => translate('name'), "rules" => 'trim|required|callback_unique_type']]);
    }
    // exam term information are prepared and stored in the database here
    public function types()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('event_type', 'is_add')) {
                access_denied();
            }
            $this->types_validation();
            if ($this->validation->run() !== false) {
                //save information in the database file
                $data['name'] = $this->request->getPost('type_name');
                $data['icon'] = $this->request->getPost('event_icon');
                $data['branch_id'] = $this->applicationModel->get_branch_id();
                $this->db->table('event_types', $data)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect(current_url());
            }
        }
        $this->data['typelist'] = $this->appLib->getTable('event_types');
        $this->data['sub_page'] = 'event/types';
        $this->data['main_menu'] = 'event';
        $this->data['title'] = translate('event_type');
        echo view('layout/index', $this->data);
    }
    public function types_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('event_type', 'is_edit')) {
                ajax_access_denied();
            }
            $this->types_validation();
            if ($this->validation->run() !== false) {
                //save information in the database file
                $data['name'] = $this->request->getPost('type_name');
                $data['icon'] = $this->request->getPost('event_icon');
                $data['branch_id'] = $this->applicationModel->get_branch_id();
                $this->db->table('id', $this->request->getPost('type_id'))->where();
                $this->db->table('event_types', $data)->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('event/types');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function type_delete($id)
    {
        if (!get_permission('event_type', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('event_types')->delete();
    }
    /* unique valid type name verification is done here */
    public function unique_type($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $type_id = $this->request->getPost('type_id');
        if (!empty($type_id)) {
            $this->db->where_not_in('id', $type_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('event_types')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_type", translate('already_taken'));
            return false;
        }
    }
    // publish on show website
    public function show_website()
    {
        $id = $this->request->getPost('id');
        $status = $this->request->getPost('status');
        $arrayData['show_web'] = $status == 'true' ? 1 : 0;
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('event', $arrayData)->update();
        $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
        echo json_encode($return);
    }
    // publish status
    public function status()
    {
        $id = $this->request->getPost('id');
        $status = $this->request->getPost('status');
        $arrayData['status'] = $status == 'true' ? 1 : 0;
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('event', $arrayData)->update();
        $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
        echo json_encode($return);
    }
    public function getDetails()
    {
        $id = $this->request->getPost('event_id');
        if (empty($id)) {
            redirect(base_url(), 'refresh');
        }
        $auditions = ["1" => "everybody", "2" => "class", "3" => "section"];
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $ev = $builder->get('event')->row_array();
        $type = $ev['type'] == 'holiday' ? translate('holiday') : get_type_name_by_id('event_types', $ev['type']);
        $remark = empty($ev['remark']) ? 'N/A' : $ev['remark'];
        $html = "<tbody><tr>";
        $html .= "<td>" . translate('title') . "</td>";
        $html .= "<td>" . $ev['title'] . "</td>";
        $html .= "</tr><tr>";
        $html .= "<td>" . translate('type') . "</td>";
        $html .= "<td>" . $type . "</td>";
        $html .= "</tr><tr>";
        $html .= "<td>" . translate('date_of_start') . "</td>";
        $html .= "<td>" . _d($ev['start_date']) . "</td>";
        $html .= "</tr><tr>";
        $html .= "<td>" . translate('date_of_end') . "</td>";
        $html .= "<td>" . _d($ev['end_date']) . "</td>";
        $html .= "</tr><tr>";
        $html .= "<td>" . translate('audience') . "</td>";
        $audition = $auditions[$ev['audition']];
        $html .= "<td>" . translate($audition);
        if ($ev['audition'] != 1) {
            $selecteds = json_decode((string) $ev['selected_list']);
            if ($ev['audition'] == 2) {
                foreach ($selecteds as $selected) {
    $html .= "<br> <small> - " . get_type_name_by_id('class', $selected) . '</small>';
}
            }
            if ($ev['audition'] == 3) {
                foreach ($selecteds as $selected) {
    $selected = explode('-', (string) $selected);
                    $html .= "<br> <small> - " . get_type_name_by_id('class', $selected[0]) . " (" . get_type_name_by_id('section', $selected[1]) . ')</small>';
}
            }
        }
        $html .= "</td>";
        $html .= "</tr><tr>";
        $html .= "<td>" . translate('description') . "</td>";
        $html .= "<td>" . $remark . "</td>";
        $html .= "</tr></tbody>";
        echo $html;
    }
    /* generate section with class group */
    public function getSectionByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $result = $builder->getWhere('class', ['branch_id' => $branchID])->result_array();
            if (count($result) > 0) {
                foreach ($result as $class) {
    $html .= '<optgroup label="' . $class['name'] . '">';
                    $allocations = $builder->getWhere('sections_allocation', ['class_id' => $class['id']])->result_array();
                    if (count($allocations) > 0) {
                        foreach ($allocations as $allocation) {
                            $section = $builder->getWhere('section', ['id' => $allocation['section_id']])->row_array();
                            $html .= '<option value="' . $class['id'] . "-" . $allocation['section_id'] . '">' . $section['name'] . '</option>';
}
                    } else {
                        $html .= '<option value="">' . translate('no_selection_available') . '</option>';
                    }
                    $html .= '</optgroup>';
                }
            }
        }
        echo $html;
    }
    public function get_events_list($branchID = '')
    {
        if (is_loggedin()) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            } else {
                $this->db->table('branch_id', $branchID)->where();
            }
            $this->db->table('status', 1)->where();
            $events = $builder->get('event')->getResult();
            if (!empty($events)) {
                foreach ($events as $row) {
    $arrayData = ['id' => $row->id, 'title' => $row->title, 'start' => $row->start_date, 'end' => date('Y-m-d', strtotime($row->end_date . "+1 days"))];
                    if ($row->type == 'holiday') {
                        $arrayData['className'] = 'fc-event-danger';
                        $arrayData['icon'] = 'umbrella-beach';
} else {
                        $icon = get_type_name_by_id('event_types', $row->type, 'icon');
                        $arrayData['icon'] = $icon;
                    }
                    $eventdata[] = $arrayData;
                }
                echo json_encode($eventdata);
            }
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Exam.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SubjectModel;
use App\Models\SmsModel;
use App\Models\EmailModel;
use App\Models\MarksheetTemplateModel;
use App\Models\ExamProgressModel;
/**
 * @package : Ramom school management system
 * @version : 6.6
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Exam.php
 * @copyright : Reserved RamomCoder Team
 */
class Exam extends AdminController
 
{
    public $appLib;
    protected $db;



    /**
     * @var App\Models\ExamModel
     */
    public $exam;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\MarksheetTemplateModel
     */
    public $marksheetTemplate;
    /**
     * @var App\Models\ExamProgressModel
     */
    public $examProgress;
    public $validation;
    public $input;
    public $examModel;
    public $load;
    public $applicationModel;
    public $smsModel;
    public $html2pdf;
    public $emailModel;
    public function __construct()
    {



        parent::__construct();
        
        
        $this->html2pdf = service('html2pdf');$this->appLib = service('appLib'); 
$this->exam = new \App\Models\ExamModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->sms = new \App\Models\SmsModel();
        $this->email = new \App\Models\EmailModel();
        $this->marksheetTemplate = new \App\Models\MarksheetTemplateModel();
        $this->examProgress = new \App\Models\ExamProgressModel();
    }
    /* exam form validation rules */
    protected function exam_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['type_id' => ["label" => translate('exam_type'), "rules" => 'trim|required']]);
        $this->validation->setRules(['mark_distribution[]' => ["label" => translate('mark_distribution'), "rules" => 'trim|required']]);
    }
    public function index()
    {
        if (!get_permission('exam', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('exam', 'is_view')) {
                ajax_access_denied();
            }
            $this->exam_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->examModel->exam_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('exam');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['examlist'] = $this->examModel->getExamList();
        $this->data['title'] = translate('exam_list');
        $this->data['sub_page'] = 'exam/index';
        $this->data['main_menu'] = 'exam';
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('exam', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->exam_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->examModel->exam_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('exam');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['exam'] = $this->appLib->getTable('exam', ['t.id' => $id], true);
        $this->data['title'] = translate('exam_list');
        $this->data['sub_page'] = 'exam/edit';
        $this->data['main_menu'] = 'exam';
        echo view('layout/index', $this->data);
    }
    // exam information delete stored in the database here
    public function delete($id)
    {
        if (!get_permission('exam', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('exam')->delete();
    }
    /* term form validation rules */
    protected function term_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['term_name' => ["label" => translate('name'), "rules" => 'trim|required|callback_unique_term']]);
    }
    // exam term information are prepared and stored in the database here
    public function term()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('exam_term', 'is_add')) {
                access_denied();
            }
            $this->term_validation();
            if ($this->validation->run() !== false) {
                //save exam term information in the database file
                $this->examModel->termSave($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect(current_url());
            }
        }
        $this->data['termlist'] = $this->appLib->getTable('exam_term');
        $this->data['sub_page'] = 'exam/term';
        $this->data['main_menu'] = 'exam';
        $this->data['title'] = translate('exam_term');
        echo view('layout/index', $this->data);
    }
    public function term_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('exam_term', 'is_edit')) {
                ajax_access_denied();
            }
            $this->term_validation();
            if ($this->validation->run() !== false) {
                //save exam term information in the database file
                $this->examModel->termSave($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('exam/term');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function term_delete($id)
    {
        if (!get_permission('exam_term', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('exam_term')->delete();
    }
    /* unique valid exam term name verification is done here */
    public function unique_term($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $term_id = $this->request->getPost('term_id');
        if (!empty($term_id)) {
            $this->db->where_not_in('id', $term_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('exam_term')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_term", translate('already_taken'));
            return false;
        }
    }
    public function mark_distribution()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('mark_distribution', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                // save mark distribution information in the database file
                $arrayDistribution = ['name' => $this->request->getPost('name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('exam_mark_distribution', $arrayDistribution)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect(current_url());
            }
        }
        $this->data['termlist'] = $this->appLib->getTable('exam_mark_distribution');
        $this->data['sub_page'] = 'exam/mark_distribution';
        $this->data['main_menu'] = 'exam';
        $this->data['title'] = translate('mark_distribution');
        echo view('layout/index', $this->data);
    }
    public function mark_distribution_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('mark_distribution', 'is_edit')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                // save mark distribution information in the database file
                $arrayDistribution = ['name' => $this->request->getPost('name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('id', $this->request->getPost('distribution_id'))->where();
                $this->db->table('exam_mark_distribution', $arrayDistribution)->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('exam/mark_distribution');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function mark_distribution_delete($id)
    {
        if (!get_permission('mark_distribution', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('exam_mark_distribution')->delete();
    }
    /* hall form validation rules */
    protected function hall_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['hall_no' => ["label" => translate('hall_no'), "rules" => 'trim|required|callback_unique_hall_no']]);
        $this->validation->setRules(['no_of_seats' => ["label" => translate('no_of_seats'), "rules" => 'trim|required|numeric']]);
    }
    /* exam hall information moderator and page */
    public function hall($action = '', $id = '')
    {
        if (isset($_POST['save'])) {
            if (!get_permission('exam_hall', 'is_add')) {
                access_denied();
            }
            $this->hall_validation();
            if ($this->validation->run() !== false) {
                //save exam hall information in the database file
                $this->examModel->hallSave($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect(current_url());
            }
        }
        $this->data['halllist'] = $this->appLib->getTable('exam_hall');
        $this->data['title'] = translate('exam_hall');
        $this->data['sub_page'] = 'exam/hall';
        $this->data['main_menu'] = 'exam';
        echo view('layout/index', $this->data);
    }
    public function hall_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('exam_hall', 'is_edit')) {
                ajax_access_denied();
            }
            $this->hall_validation();
            if ($this->validation->run() !== false) {
                //save exam hall information in the database file
                $this->examModel->hallSave($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('exam/hall');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function hall_delete($id)
    {
        if (!get_permission('exam_hall', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('exam_hall')->delete();
    }
    /* exam hall number exists validation */
    public function unique_hall_no($hall_no)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $term_id = $this->request->getPost('term_id');
        if (!empty($term_id)) {
            $this->db->where_not_in('id', $term_id);
        }
        $this->db->table(['hall_no' => $hall_no, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('exam_hall')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_hall_no", translate('already_taken'));
            return false;
        }
    }
    /* exam mark information are prepared and stored in the database here */
    public function mark_entry()
    {
        if (!get_permission('exam_mark', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $subjectID = $this->request->getPost('subject_id');
        $examID = $this->request->getPost('exam_id');
        $this->data['branch_id'] = $branchID;
        $this->data['class_id'] = $classID;
        $this->data['section_id'] = $sectionID;
        $this->data['subject_id'] = $subjectID;
        $this->data['exam_id'] = $examID;
        if (isset($_POST['search'])) {
            $this->data['timetable_detail'] = $this->examModel->getTimetableDetail($classID, $sectionID, $examID, $subjectID);
            $this->data['student'] = $this->examModel->getMarkAndStudent($branchID, $classID, $sectionID, $examID, $subjectID);
        }
        $this->data['sub_page'] = 'exam/marks_register';
        $this->data['main_menu'] = 'mark';
        $this->data['title'] = translate('mark_entries');
        echo view('layout/index', $this->data);
    }
    public function mark_save()
    {
        if ($_POST !== []) {
            if (!get_permission('exam_mark', 'is_add')) {
                ajax_access_denied();
            }
            $inputMarks = $this->request->getPost('mark');
            foreach ($inputMarks as $key => $value) {
    if (!isset($value['absent'])) {
                    foreach ($value['assessment'] as $i => $row) {
                        $field = "mark[{$key
}][assessment][{$i}]";
                        $this->validation->setRules([$field => ["label" => translate('mark'), "rules" => "trim|numeric|callback_valid_Mark[{$i}]"]]);
                    }
                }
            }
            if ($this->validation->run() !== false) {
                $branchID = $this->applicationModel->get_branch_id();
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $subjectID = $this->request->getPost('subject_id');
                $examID = $this->request->getPost('exam_id');
                $inputMarks = $this->request->getPost('mark');
                foreach ($inputMarks as $value) {
    $assMark = [];
                    foreach ($value['assessment'] as $i => $row) {
                        $assMark[$i] = $row;
}
                    $arrayMarks = ['student_id' => $value['student_id'], 'exam_id' => $examID, 'class_id' => $classID, 'section_id' => $sectionID, 'subject_id' => $subjectID, 'branch_id' => $branchID, 'session_id' => get_session_id()];
                    $inputMark = isset($value['absent']) ? null : json_encode($assMark);
                    $absent = isset($value['absent']) ? 'on' : '';
                    $query = $builder->getWhere('mark', $arrayMarks);
                    if ($query->num_rows() > 0) {
                        if ((in_array('', $assMark) & !isset($value['absent'])) !== 0) {
                            $this->db->table('id', $query->row()->id)->where();
                            $this->db->table('mark')->delete();
                        } else {
                            $this->db->table('id', $query->row()->id)->where();
                            $this->db->table('mark', ['mark' => $inputMark, 'absent' => $absent])->update();
                        }
                    } elseif (!in_array('', $assMark) || isset($value['absent'])) {
                        $arrayMarks['mark'] = $inputMark;
                        $arrayMarks['absent'] = $absent;
                        $this->db->table('mark', $arrayMarks)->insert();
                        // send exam results sms
                        $this->smsModel->send_sms($arrayMarks, 5);
                    }
                }
                $message = translate('information_has_been_saved_successfully');
                $array = ['status' => 'success', 'message' => $message];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    //exam mark register validation check
    public function valid_Mark($val, $i)
    {
        $fullMark = $this->request->getPost('max_mark_' . $i);
        if ($fullMark < $val) {
            $this->validation->setRule("valid_Mark", translate("invalid_marks"));
            return false;
        }
        return true;
    }
    /* exam grade form validation rules */
    protected function grade_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['grade_point' => ["label" => translate('grade_point'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['lower_mark' => ["label" => translate('mark_from'), "rules" => 'trim|required']]);
        $this->validation->setRules(['upper_mark' => ["label" => translate('mark_upto'), "rules" => 'trim|required']]);
    }
    /* exam grade information are prepared and stored in the database here */
    public function grade($action = '')
    {
        if (!get_permission('exam_grade', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('exam_grade', 'is_view')) {
                ajax_access_denied();
            }
            $this->grade_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->examModel->gradeSave($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('exam/grade');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['title'] = translate('grades_range');
        $this->data['sub_page'] = 'exam/grade';
        $this->data['main_menu'] = 'mark';
        echo view('layout/index', $this->data);
    }
    // exam grade information updating here
    public function grade_edit($id = '')
    {
        if (!get_permission('exam_grade', 'is_edit')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $this->grade_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->examModel->gradeSave($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('exam/grade');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['grade'] = $this->appLib->getTable('grade', ['t.id' => $id], true);
        $this->data['sub_page'] = 'exam/grade_edit';
        $this->data['title'] = translate('grades_range');
        $this->data['main_menu'] = 'exam';
        echo view('layout/index', $this->data);
    }
    public function grade_delete($id = '')
    {
        if (get_permission('exam_grade', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('grade')->delete();
        }
    }
    public function marksheet()
    {
        if (!get_permission('report_card', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['session_id' => ["label" => translate('academic_year'), "rules" => 'trim|required']]);
            $this->validation->setRules(['exam_id' => ["label" => translate('exam'), "rules" => 'trim|required']]);
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
            $this->validation->setRules(['template_id' => ["label" => translate('marksheet') . " " . translate('template'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $sessionID = $this->request->getPost('session_id');
                $examID = $this->request->getPost('exam_id');
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $builder->select('e.roll,e.id as enrollID,s.*,c.name as category');
                $this->db->from('enroll as e');
                $builder->join('student as s', 'e.student_id = s.id', 'inner');
                $builder->join('mark as m', 's.id = m.student_id', 'inner');
                $builder->join('student_category as c', 'c.id = s.category_id', 'left');
                $builder->join('exam_rank as r', 'r.exam_id = m.exam_id and r.enroll_id = e.id', 'left');
                $this->db->table('e.session_id', $sessionID)->where();
                $this->db->table('m.session_id', $sessionID)->where();
                $this->db->table('m.class_id', $classID)->where();
                $this->db->table('m.section_id', $sectionID)->where();
                $this->db->table('e.branch_id', $branchID)->where();
                $this->db->table('m.exam_id', $examID)->where();
                $this->db->group_by('m.student_id');
                $this->db->order_by('r.rank', 'ASC');
                $this->data['student'] = $builder->get()->result_array();
            }
        }
        $this->data['branch_id'] = $branchID;
        $this->data['sub_page'] = 'exam/marksheet';
        $this->data['main_menu'] = 'exam_reports';
        $this->data['title'] = translate('report_card');
        echo view('layout/index', $this->data);
    }
    public function reportCardPrint()
    {
        if ($_POST !== []) {
            if (!get_permission('report_card', 'is_view')) {
                ajax_access_denied();
            }
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['examID'] = $this->request->getPost('exam_id');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            echo view('exam/reportCard', $this->data, true);
        }
    }
    public function reportCardPdf()
    {
        if ($_POST !== []) {
            if (!get_permission('report_card', 'is_view')) {
                ajax_access_denied();
            }
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['examID'] = $this->request->getPost('exam_id');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            $this->data['marksheet_template'] = $this->marksheet_templateModel->getTemplate($this->data['templateID'], $this->data['branchID']);
            $html = view('exam/reportCard_PDF', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/pdf-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            return $this->html2pdf->mpdf->Output(time() . '.pdf', "I");
        }
        return null;
    }
    public function pdf_sendByemail()
    {
        if ($_POST !== []) {
            if (!get_permission('report_card', 'is_view')) {
                ajax_access_denied();
            }
            $enrollID = $this->request->getPost('enrollID');
            $this->data['student_array'] = [$this->request->getPost('student_id')];
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['examID'] = $this->request->getPost('exam_id');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            $this->data['marksheet_template'] = $this->marksheet_templateModel->getTemplate($this->data['templateID'], $this->data['branchID']);
            $html = view('exam/reportCard_PDF', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/pdf-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            $file = $this->html2pdf->mpdf->Output(time() . '.pdf', "S");
            $data['exam_name'] = get_type_name_by_id('exam', $this->data['examID']);
            $data['file'] = $file;
            $data['enroll_id'] = $enrollID;
            $response = $this->emailModel->emailPDFexam_marksheet($data);
            if ($response == true) {
                $array = ['status' => 'success', 'message' => translate('mail_sent_successfully')];
            } else {
                $array = ['status' => 'error', 'message' => translate('something_went_wrong')];
            }
            echo json_encode($array);
        }
    }
    /* tabulation sheet report generating here */
    public function tabulation_sheet()
    {
        if (!get_permission('tabulation_sheet', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        if (!empty($this->request->getPost('submit'))) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $examID = $this->request->getPost('exam_id');
            $sessionID = $this->request->getPost('session_id');
            $this->data['students_list'] = $this->examModel->searchExamStudentsByRank($classID, $sectionID, $sessionID, $examID, $branchID);
            $this->data['exam_details'] = $this->examModel->getExamByID($examID);
            $this->data['get_subjects'] = $this->examModel->getSubjectList($examID, $classID, $sectionID, $sessionID);
        }
        $this->data['title'] = translate('tabulation_sheet');
        $this->data['sub_page'] = 'exam/tabulation_sheet';
        $this->data['main_menu'] = 'exam_reports';
        echo view('layout/index', $this->data);
    }
    public function getDistributionByBranch()
    {
        $html = "";
        $this->request->getPost('table');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table('exam_mark_distribution')->get('exam_mark_distribution')->result_array();
            if (count($result) > 0) {
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            }
        }
        echo $html;
    }
    // exam publish status
    public function publish_status()
    {
        if (get_permission('exam', 'is_add')) {
            $id = $this->request->getPost('id');
            $status = $this->request->getPost('status');
            $arrayData['status'] = $status == 'true' ? 1 : 0;
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('exam', $arrayData)->update();
            $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
            echo json_encode($return);
        }
    }
    // exam result publish status
    public function publish_result_status()
    {
        if (get_permission('exam', 'is_add')) {
            $id = $this->request->getPost('id');
            $status = $this->request->getPost('status');
            $arrayData['publish_result'] = $status == 'true' ? 1 : 0;
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('exam', $arrayData)->update();
            $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
            echo json_encode($return);
        }
    }
    public function class_position()
    {
        if (!get_permission('generate_position', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        if (!empty($this->request->getPost('submit'))) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $examID = $this->request->getPost('exam_id');
            $sessionID = $this->request->getPost('session_id');
            $this->data['students_list'] = $this->examModel->searchExamStudentsByRank($classID, $sectionID, $sessionID, $examID, $branchID);
            $this->data['exam_details'] = $this->examModel->getExamByID($examID);
            $this->data['get_subjects'] = $this->examModel->getSubjectList($examID, $classID, $sectionID, $sessionID);
        }
        $this->data['title'] = translate('class_position');
        $this->data['sub_page'] = 'exam/class_position';
        $this->data['main_menu'] = 'mark';
        echo view('layout/index', $this->data);
    }
    public function save_position()
    {
        if ($_POST !== []) {
            if (!get_permission('generate_position', 'is_view')) {
                ajax_access_denied();
            }
            $rank = $this->request->getPost('rank');
            foreach ($rank as $key => $value) {
    $this->validation->setRules(['rank[' . $key . '][position]' => ["label" => translate('position'), "rules" => 'trim|numeric|required']]);
}
            if ($this->validation->run() == true) {
                $examID = $this->request->getPost('exam_id');
                foreach ($rank as $value) {
    $q = $db->table('exam_rank')->get('exam_rank');
                    if ($q->num_rows() == 0) {
                        $arrayRank = ['rank' => $value['position'], 'teacher_comments' => $value['teacher_comments'], 'principal_comments' => $value['principal_comments'], 'enroll_id' => $value['enroll_id'], 'exam_id' => $examID];
                        $this->db->table('exam_rank', $arrayRank)->insert();
} else {
                        $this->db->table('id', $q->row()->id)->where();
                        $this->db->table('exam_rank', ['rank' => $value['position'], 'teacher_comments' => $value['teacher_comments'], 'principal_comments' => $value['principal_comments']])->update();
                    }
                }
                $message = translate('information_has_been_saved_successfully');
                $array = ['status' => 'success', 'message' => $message];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Exam_progress.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\ExamProgressModel;
use App\Models\MarksheetTemplateModel;
use App\Models\SubjectModel;
use App\Models\SmsModel;
use App\Models\EmailModel;
/**
 * @package : Ramom school management system
 * @version : 6.6
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Exam_progress.php
 * @copyright : Reserved RamomCoder Team
 */
class Exam_progress extends AdminController
 
{
    public $appLib;
    protected $db;



    /**
     * @var App\Models\ExamProgressModel
     */
    public $examProgress;
    /**
     * @var App\Models\MarksheetTemplateModel
     */
    public $marksheetTemplate;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    public $applicationModel;
    public $validation;
    public $input;
    public $load;
    public $html2pdf;
    public $emailModel;
    public function __construct()
    {



        parent::__construct();
        
        
        $this->html2pdf = service('html2pdf');$this->appLib = service('appLib'); 
$this->examProgress = new \App\Models\ExamProgressModel();
        $this->marksheetTemplate = new \App\Models\MarksheetTemplateModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->sms = new \App\Models\SmsModel();
        $this->email = new \App\Models\EmailModel();
    }
    public function marksheet()
    {
        if (!get_permission('progress_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'required']]);
            $this->validation->setRules(['exam_id[]' => ["label" => translate('exam'), "rules" => 'required']]);
            $this->validation->setRules(['session_id' => ["label" => translate('academic_year'), "rules" => 'required']]);
            $this->validation->setRules(['template_id' => ["label" => translate('marksheet') . " " . translate('template'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $sessionID = $this->request->getPost('session_id');
                $examID = $this->request->getPost('exam_id[]');
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $builder->select('e.roll,e.id as enrollID,s.*,c.name as category');
                $this->db->from('enroll as e');
                $builder->join('student as s', 'e.student_id = s.id', 'inner');
                $builder->join('mark as m', 'm.student_id = s.id', 'inner');
                $builder->join('student_category as c', 'c.id = s.category_id', 'left');
                $this->db->table('e.session_id', $sessionID)->where();
                $this->db->table('e.class_id', $classID)->where();
                $this->db->table('e.section_id', $sectionID)->where();
                $this->db->table('e.branch_id', $branchID)->where();
                $this->db->where_in('m.exam_id', $examID);
                $this->db->group_by('m.student_id');
                $this->db->order_by('e.id', 'ASC');
                $this->data['examIDArr'] = $examID;
                $this->data['student'] = $builder->get()->result_array();
            }
        }
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-select/dist/css/bootstrap-select.min.css'], 'js' => ['vendor/bootstrap-select/dist/js/bootstrap-select.min.js']];
        $this->data['branch_id'] = $branchID;
        $this->data['sub_page'] = 'exam_progress/marksheet';
        $this->data['main_menu'] = 'exam_reports';
        $this->data['title'] = translate('progress') . " " . translate('progress_reports');
        echo view('layout/index', $this->data);
    }
    public function reportCardPrint()
    {
        if ($_POST !== []) {
            if (!get_permission('progress_reports', 'is_view')) {
                ajax_access_denied();
            }
            $this->data['examArray'] = $this->request->getPost('exam_id[]');
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['remarks_array'] = $this->request->getPost('remarks');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            echo view('exam_progress/reportCard', $this->data, true);
        }
    }
    public function reportCardPdf()
    {
        if ($_POST !== []) {
            if (!get_permission('progress_reports', 'is_view')) {
                ajax_access_denied();
            }
            $this->data['examArray'] = $this->request->getPost('exam_id[]');
            $this->data['student_array'] = $this->request->getPost('student_id');
            $this->data['remarks_array'] = $this->request->getPost('remarks');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            $html = view('exam_progress/reportCard_PDF', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/pdf-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            return $this->html2pdf->mpdf->Output(time() . '.pdf', "I");
        }
        return null;
    }
    public function pdf_sendByemail()
    {
        if ($_POST !== []) {
            if (!get_permission('report_card', 'is_view')) {
                ajax_access_denied();
            }
            $enrollID = $this->request->getPost('enrollID');
            $this->data['examArray'] = $this->request->getPost('exam_id[]');
            $this->data['student_array'] = [$this->request->getPost('student_id')];
            $this->data['remarks_array'] = $this->request->getPost('remarks');
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['print_date'] = $this->request->getPost('print_date');
            $this->data['sessionID'] = $this->request->getPost('session_id');
            $this->data['templateID'] = $this->request->getPost('template_id');
            $this->data['branchID'] = $this->applicationModel->get_branch_id();
            $html = view('exam_progress/reportCard_PDF', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/pdf-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            $file = $this->html2pdf->mpdf->Output(time() . '.pdf', "S");
            $data['exam_name'] = "Progress Reports";
            $data['file'] = $file;
            $data['enroll_id'] = $enrollID;
            $response = $this->emailModel->emailPDFexam_marksheet($data);
            if ($response == true) {
                $array = ['status' => 'success', 'message' => translate('mail_sent_successfully')];
            } else {
                $array = ['status' => 'error', 'message' => translate('something_went_wrong')];
            }
            echo json_encode($array);
        }
    }
    // get exam list based on the branch
    public function getExamByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $builder->select('id,name,term_id');
            $this->db->table(['branch_id' => $branchID, 'session_id' => get_session_id()])->where();
            $this->db->order_by('id', 'asc');
            $result = $builder->get('exam')->result_array();
            if (count($result) > 0) {
                foreach ($result as $row) {
    if ($row['term_id'] != 0) {
                        $term = $db->table('exam_term')->get('exam_term')->row()->name;
                        $name = $row['name'] . ' (' . $term . ')';
} else {
                        $name = $row['name'];
                    }
                    $html .= '<option value="' . $row['id'] . '">' . $name . '</option>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getDistributionByBranch()
    {
        $html = "";
        $this->request->getPost('table');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table('exam_mark_distribution')->get('exam_mark_distribution')->result_array();
            if (count($result) > 0) {
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            }
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Fees.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
/**
 * @package : Ramom school management system
 * @version : 6.6
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Fees.php
 * @copyright : Reserved RamomCoder Team
 */
class Fees extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    public $validation;
    public $input;
    public $feesModel;
    public $load;
    public $applicationModel;
    public $html2pdf;
    public $emailModel;
    public $smsModel;
    public function __construct()
    {

        parent::__construct();
        
        
        $this->html2pdf = service('html2pdf');$this->appLib = service('appLib'); 
$this->fees = new \App\Models\FeesModel();
        $this->email = new \App\Models\EmailModel();
        if (!moduleIsEnabled('student_accounting')) {
            access_denied();
        }
    }
    public function index()
    {
        return redirect()->to(base_url('fees/type'));
    }
    /* fees type form validation rules */
    protected function type_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['type_name' => ["label" => translate('name'), "rules" => 'trim|required|callback_unique_type']]);
    }
    /* fees type control */
    public function type()
    {
        if (!get_permission('fees_type', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('fees_type', 'is_add')) {
                ajax_access_denied();
            }
            $this->type_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->feesModel->typeSave($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['categorylist'] = $this->appLib->getTable('fees_type', ['system' => 0]);
        $this->data['title'] = translate('fees_type');
        $this->data['sub_page'] = 'fees/type';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function type_edit($id = '')
    {
        if (!get_permission('fees_type', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->type_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->feesModel->typeSave($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('fees/type');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['category'] = $this->appLib->getTable('fees_type', ['t.id' => $id], true);
        $this->data['title'] = translate('fees_type');
        $this->data['sub_page'] = 'fees/type_edit';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function type_delete($id = '')
    {
        if (get_permission('fees_type', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('fees_type')->delete();
        }
    }
    public function unique_type($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $typeID = $this->request->getPost('type_id');
        if (!empty($typeID)) {
            $this->db->where_not_in('id', $typeID);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('fees_type')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_type", translate('already_taken'));
            return false;
        }
    }
    public function group($branch_id = '')
    {
        if (!get_permission('fees_group', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('fees_group', 'is_add')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['name' => ["label" => translate('group_name'), "rules" => 'trim|required']]);
            $elems = $this->request->getPost('elem');
            $sel = 0;
            if (count($elems) > 0) {
                foreach ($elems as $key => $value) {
    if (isset($value['fees_type_id'])) {
                        $sel++;
                        $this->validation->setRules(['elem[' . $key . '][due_date]' => ["label" => translate('due_date'), "rules" => 'trim|required']]);
                        $this->validation->setRules(['elem[' . $key . '][amount]' => ["label" => translate('amount'), "rules" => 'trim|required|greater_than[0]']]);
}
                }
            }
            if ($this->validation->run() !== false) {
                if ($sel != 0) {
                    $arrayGroup = ['name' => $this->request->getPost('name'), 'description' => $this->request->getPost('description'), 'session_id' => get_session_id(), 'branch_id' => $this->applicationModel->get_branch_id()];
                    $this->db->table('fee_groups', $arrayGroup)->insert();
                    $groupID = $this->db->insert_id();
                    foreach ($elems as $row) {
    if (isset($row['fees_type_id'])) {
                            $arrayData = ['fee_groups_id' => $groupID, 'fee_type_id' => $row['fees_type_id'], 'due_date' => date("Y-m-d", strtotime((string) $row['due_date'])), 'amount' => $row['amount']];
                            $this->db->table(['fee_groups_id' => $groupID, 'fee_type_id' => $row['fees_type_id']])->where();
                            $query = $builder->get("fee_groups_details");
                            if ($query->num_rows() == 0) {
                                $this->db->table('fee_groups_details', $arrayData)->insert();
}
                        }
                    }
                    set_alert('success', translate('information_has_been_saved_successfully'));
                } else {
                    set_alert('error', 'At least one type has to be selected.');
                }
                $url = base_url('fees/group');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branch_id;
        $this->data['categorylist'] = $this->appLib->getTable('fee_groups', ['t.session_id' => get_session_id(), 't.system' => 0]);
        $this->data['title'] = translate('fees_group');
        $this->data['sub_page'] = 'fees/group';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function group_edit($id = '')
    {
        if (!get_permission('fees_group', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->validation->setRules(['name' => ["label" => translate('group_name'), "rules" => 'trim|required']]);
            $elems = $this->request->getPost('elem');
            $sel = [];
            if (count($elems) > 0) {
                foreach ($elems as $key => $value) {
    if (isset($value['fees_type_id'])) {
                        $sel[] = $value['fees_type_id'];
                        $this->validation->setRules(['elem[' . $key . '][due_date]' => ["label" => translate('due_date'), "rules" => 'trim|required']]);
                        $this->validation->setRules(['elem[' . $key . '][amount]' => ["label" => translate('amount'), "rules" => 'trim|required|greater_than[0]']]);
}
                }
            }
            if ($this->validation->run() !== false) {
                if ($sel !== []) {
                    $groupID = $this->request->getPost('group_id');
                    $arrayGroup = ['name' => $this->request->getPost('name'), 'description' => $this->request->getPost('description')];
                    $this->db->table('id', $groupID)->where();
                    $this->db->table('fee_groups', $arrayGroup)->update();
                    foreach ($elems as $row) {
    if (isset($row['fees_type_id'])) {
                            $arrayData = ['fee_groups_id' => $groupID, 'fee_type_id' => $row['fees_type_id'], 'due_date' => date("Y-m-d", strtotime((string) $row['due_date'])), 'amount' => $row['amount']];
                            $this->db->table(['fee_groups_id' => $groupID, 'fee_type_id' => $row['fees_type_id']])->where();
                            $query = $builder->get("fee_groups_details");
                            if ($query->num_rows() == 0) {
                                $this->db->table('fee_groups_details', $arrayData)->insert();
} else {
                                $this->db->table('id', $query->row()->id)->where();
                                $this->db->table('fee_groups_details', $arrayData)->update();
                            }
                        }
                    }
                    $this->db->where_not_in('fee_type_id', $sel);
                    $this->db->table('fee_groups_id', $groupID)->where();
                    $this->db->table('fee_groups_details')->delete();
                    set_alert('success', translate('information_has_been_updated_successfully'));
                } else {
                    set_alert('error', 'At least one type has to be selected.');
                }
                $url = base_url('fees/group');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['group'] = $this->appLib->getTable('fee_groups', ['t.id' => $id], true);
        $this->data['title'] = translate('fees_group');
        $this->data['sub_page'] = 'fees/group_edit';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function group_delete($id)
    {
        if (get_permission('fees_group', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('fee_groups')->delete();
            if ($db->affectedRows() > 0) {
                $this->db->table('fee_groups_id', $id)->where();
                $this->db->table('fee_groups_details')->delete();
            }
        }
    }
    /* fees type form validation rules */
    protected function fine_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['group_id' => ["label" => translate('group_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['fine_type_id' => ["label" => translate('fees_type'), "rules" => 'trim|required|callback_check_feetype']]);
        $this->validation->setRules(['fine_type' => ["label" => translate('fine_type'), "rules" => 'trim|required']]);
        $this->validation->setRules(['fine_value' => ["label" => translate('fine') . " " . translate('value'), "rules" => 'trim|required|numeric|greater_than[0]']]);
        $this->validation->setRules(['fee_frequency' => ["label" => translate('late_fee_frequency'), "rules" => 'trim|required']]);
    }
    public function fine_setup()
    {
        if (!get_permission('fees_fine_setup', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (!get_permission('fees_fine_setup', 'is_add')) {
                ajax_access_denied();
            }
            $this->fine_validation();
            if ($this->validation->run() !== false) {
                $insertData = ['group_id' => $this->request->getPost('group_id'), 'type_id' => $this->request->getPost('fine_type_id'), 'fine_value' => $this->request->getPost('fine_value'), 'fine_type' => $this->request->getPost('fine_type'), 'fee_frequency' => $this->request->getPost('fee_frequency'), 'branch_id' => $branchID, 'session_id' => get_session_id()];
                $this->db->table('fee_fine', $insertData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['finelist'] = $this->appLib->getTable('fee_fine');
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('fine_setup');
        $this->data['main_menu'] = 'fees';
        $this->data['sub_page'] = 'fees/fine_setup';
        echo view('layout/index', $this->data);
    }
    public function fine_setup_edit($id = '')
    {
        if (!get_permission('fees_fine_setup', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $this->fine_validation();
            if ($this->validation->run() !== false) {
                $insertData = ['group_id' => $this->request->getPost('group_id'), 'type_id' => $this->request->getPost('fine_type_id'), 'fine_value' => $this->request->getPost('fine_value'), 'fine_type' => $this->request->getPost('fine_type'), 'fee_frequency' => $this->request->getPost('fee_frequency'), 'branch_id' => $branchID, 'session_id' => get_session_id()];
                $this->db->table('id', $id)->where();
                $this->db->table('fee_fine', $insertData)->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('fees/fine_setup');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['fine'] = $this->appLib->getTable('fee_fine', ['t.id' => $id], true);
        $this->data['title'] = translate('fine_setup');
        $this->data['sub_page'] = 'fees/fine_setup_edit';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function check_feetype($id)
    {
        $groupID = $this->request->getPost('group_id');
        $fineID = $this->request->getPost('fine_id');
        if (!empty($fineID)) {
            $this->db->where_not_in('id', $fineID);
        }
        $this->db->table('group_id', $groupID)->where();
        $this->db->table('type_id', $id)->where();
        $query = $builder->get('fee_fine');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("check_feetype", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    public function fine_delete($id)
    {
        if (get_permission('fees_fine_setup', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('fee_fine')->delete();
        }
    }
    public function allocation()
    {
        if (!get_permission('fees_allocation', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['fee_group_id'] = $this->request->getPost('fee_group_id');
            $this->data['branch_id'] = $branchID;
            $this->data['studentlist'] = $this->feesModel->getStudentAllocationList($this->data['class_id'], $this->data['section_id'], $this->data['fee_group_id'], $branchID);
        }
        if (isset($_POST['save'])) {
            $student_array = $this->request->getPost('stu_operations');
            $student_ids = $this->request->getPost('student_ids');
            $student_sel_array = $student_array ?? [];
            $delStudent = array_diff($student_ids, $student_sel_array);
            $fee_groupID = $this->request->getPost('fee_group_id');
            foreach ($student_array as $value) {
    $arrayData = ['student_id' => $value, 'group_id' => $fee_groupID, 'session_id' => get_session_id(), 'branch_id' => $branchID];
                $this->db->table($arrayData)->where();
                $q = $builder->get('fee_allocation');
                if ($q->num_rows() == 0) {
                    $this->db->table('fee_allocation', $arrayData)->insert();
}
            }
            if ($delStudent !== []) {
                $this->db->where_in('student_id', $delStudent);
                $this->db->table('group_id', $fee_groupID)->where();
                $this->db->table('session_id', get_session_id())->where();
                $this->db->table('fee_allocation')->delete();
            }
            set_alert('success', translate('information_has_been_saved_successfully'));
            return redirect()->to(base_url('fees/allocation'));
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('fees_allocation');
        $this->data['sub_page'] = 'fees/allocation';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function allocation_save()
    {
        if (!get_permission('fees_allocation', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $student_array = $this->request->getPost('stu_operations');
            $student_ids = $this->request->getPost('student_ids');
            $student_sel_array = $student_array ?? [];
            $delStudent = array_diff($student_ids, $student_sel_array);
            $fee_groupID = $this->request->getPost('fee_group_id');
            if (!empty($student_sel_array)) {
                foreach ($student_array as $value) {
    $arrayData = ['student_id' => $value, 'group_id' => $fee_groupID, 'session_id' => get_session_id(), 'branch_id' => $branchID];
                    $this->db->table($arrayData)->where();
                    $q = $builder->get('fee_allocation');
                    if ($q->num_rows() == 0) {
                        $this->db->table('fee_allocation', $arrayData)->insert();
}
                }
            }
            if ($delStudent !== []) {
                $this->db->where_in('student_id', $delStudent);
                $this->db->table('group_id', $fee_groupID)->where();
                $this->db->table('session_id', get_session_id())->where();
                $this->db->table('fee_allocation')->delete();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
        }
    }
    /* student fees invoice search user interface */
    public function invoice_list()
    {
        if (!get_permission('invoice', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['invoicelist'] = $this->feesModel->getInvoiceList($this->data['class_id'], $this->data['section_id'], $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('payments_history');
        $this->data['sub_page'] = 'fees/invoice_list';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function invoice_delete($enrollID = '')
    {
        if (!get_permission('invoice', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('student_id', $enrollID)->where();
        $result = $builder->get('fee_allocation')->result_array();
        foreach ($result as $value) {
    $this->db->table('allocation_id', $value['id'])->where();
            $this->db->table('fee_payment_history')->delete();
}
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('student_id', $enrollID)->where();
        $this->db->table('fee_allocation')->delete();
    }
    /* invoice user interface with information are controlled here */
    public function invoice($enrollID = '')
    {
        if (!get_permission('invoice', 'is_view')) {
            access_denied();
        }
        $basic = $this->feesModel->getInvoiceBasic($enrollID);
        if (empty($basic)) {
            return redirect()->to(base_url('dashboard'));
        }
        $this->data['invoice'] = $this->feesModel->getInvoiceStatus($enrollID);
        $this->data['basic'] = $basic;
        $this->data['title'] = translate('invoice_history');
        $this->data['main_menu'] = 'fees';
        $this->data['sub_page'] = 'fees/collect';
        echo view('layout/index', $this->data);
    }
    public function invoicePrint()
    {
        if (!get_permission('invoice', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->data['student_array'] = $this->request->getPost('student_id');
            echo view('fees/invoicePrint', $this->data, true);
        }
    }
    public function invoicePDFdownload()
    {
        if (!get_permission('invoice', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->data['student_array'] = $this->request->getPost('student_id');
            $html = view('fees/invoicePDFdownload', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/ramom.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            return $this->html2pdf->mpdf->Output(time() . '.pdf', "I");
        }
        return null;
    }
    public function pdf_sendByemail()
    {
        if (!get_permission('invoice', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->data['student_array'] = [$this->request->getPost('enrollID')];
            $html = view('fees/invoicePDFdownload', $this->data, true);
            $this->Html2pdf = service('html2pdf');
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/vendor/bootstrap/css/bootstrap.min.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/custom-style.css')), 1);
            $this->html2pdf->mpdf->WriteHTML(file_get_contents(base_url('assets/css/ramom.css')), 1);
            $this->html2pdf->mpdf->WriteHTML($html);
            $this->html2pdf->mpdf->SetDisplayMode('fullpage');
            $this->html2pdf->mpdf->autoScriptToLang = true;
            $this->html2pdf->mpdf->baseScript = 1;
            $this->html2pdf->mpdf->autoLangToFont = true;
            $file = $this->html2pdf->mpdf->Output(time() . '.pdf', "S");
            $data['file'] = $file;
            $data['enroll_id'] = $this->request->getPost('enrollID');
            $response = $this->emailModel->emailPDF_Fee_invoice($data);
            if ($response == true) {
                $array = ['status' => 'success', 'message' => translate('mail_sent_successfully')];
            } else {
                $array = ['status' => 'error', 'message' => translate('something_went_wrong')];
            }
            echo json_encode($array);
        }
    }
    public function due_invoice()
    {
        if (!get_permission('due_invoice', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $feegroup = explode("|", (string) $this->request->getPost('fees_type'));
            $feegroup_id = $feegroup[0];
            $fee_feetype_id = $feegroup[1];
            $this->data['invoicelist'] = $this->feesModel->getDueInvoiceList($this->data['class_id'], $this->data['section_id'], $feegroup_id, $fee_feetype_id);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('payments_history');
        $this->data['sub_page'] = 'fees/due_invoice';
        $this->data['main_menu'] = 'fees';
        echo view('layout/index', $this->data);
    }
    public function fee_add()
    {
        if (!get_permission('collect_fees', 'is_add')) {
            ajax_access_denied();
        }
        $this->validation->setRules(['fees_type' => ["label" => translate('fees_type'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
        $this->validation->setRule('amount', translate('amount'), ['trim', 'required', 'numeric', 'greater_than[0]', ['deposit_verify', [$this->fees_model, 'depositAmountVerify']]]);
        $this->validation->setRule('discount_amount', translate('discount'), ['trim', 'numeric', ['deposit_verify', [$this->fees_model, 'depositAmountVerify']]]);
        $this->validation->setRules(['pay_via' => ["label" => translate('payment_method'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $feesType = explode("|", (string) $this->request->getPost('fees_type'));
            $amount = $this->request->getPost('amount');
            $fineAmount = $this->request->getPost('fine_amount');
            $discountAmount = $this->request->getPost('discount_amount');
            $date = $this->request->getPost('date');
            $payVia = $this->request->getPost('pay_via');
            $arrayFees = ['allocation_id' => $feesType[0], 'type_id' => $feesType[1], 'collect_by' => get_loggedin_user_id(), 'amount' => $amount - $discountAmount, 'discount' => $discountAmount, 'fine' => $fineAmount, 'pay_via' => $payVia, 'remarks' => $this->request->getPost('remarks'), 'date' => $date];
            $this->db->table('fee_payment_history', $arrayFees)->insert();
            $payment_historyID = $this->db->insert_id();
            // transaction voucher save function
            if (isset($_POST['account_id'])) {
                $arrayTransaction = ['account_id' => $this->request->getPost('account_id'), 'amount' => $amount + $fineAmount - $discountAmount, 'date' => $date];
                $this->feesModel->saveTransaction($arrayTransaction, $payment_historyID);
            }
            // send payment confirmation sms
            if (isset($_POST['guardian_sms'])) {
                $arrayData = ['student_id' => $this->request->getPost('student_id'), 'amount' => $amount + $fineAmount - $discountAmount, 'paid_date' => _d($date)];
                $this->smsModel->send_sms($arrayData, 2);
            }
            set_alert('success', translate('information_has_been_saved_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'url' => '', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function getBalanceByType()
    {
        $input = $this->request->getPost('typeID');
        if (empty($input)) {
            $balance = 0;
            $fine = 0;
        } else {
            $feesType = explode("|", (string) $input);
            $fine = $this->feesModel->feeFineCalculation($feesType[0], $feesType[1]);
            $b = $this->feesModel->getBalance($feesType[0], $feesType[1]);
            $balance = $b['balance'];
            $fine = abs($fine - $b['fine']);
        }
        echo json_encode(['balance' => $balance, 'fine' => $fine]);
    }
    public function getTypeByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        $typeID = $_POST['type_id'] ?? 0;
        if (!empty($branchID)) {
            $this->db->table('session_id', get_session_id())->where();
            $this->db->table('branch_id', $branchID)->where();
            $result = $builder->get('fee_groups')->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $html .= '<optgroup label="' . $row['name'] . '">';
                    $this->db->table('fee_groups_id', $row['id'])->where();
                    $resultdetails = $builder->get('fee_groups_details')->result_array();
                    foreach ($resultdetails as $t) {
                        $sel = $t['fee_groups_id'] . "|" . $t['fee_type_id'] == $typeID ? 'selected' : '';
                        $html .= '<option value="' . $t['fee_groups_id'] . "|" . $t['fee_type_id'] . '"' . $sel . '>' . get_type_name_by_id('fees_type', $t['fee_type_id']) . '</option>';
}
                    $html .= '</optgroup>';
                }
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getGroupByBranch()
    {
        $html = "";
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table('fee_groups')->get('fee_groups')->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getTypeByGroup()
    {
        $html = "";
        $groupID = $this->request->getPost('group_id');
        $typeID = $_POST['type_id'] ?? 0;
        if (!empty($groupID)) {
            $builder->select('t.id,t.name');
            $this->db->from('fee_groups_details as gd');
            $builder->join('fees_type as t', 't.id = gd.fee_type_id', 'left');
            $this->db->table('gd.fee_groups_id', $groupID)->where();
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $sel = $row['id'] == $typeID ? 'selected' : '';
                    $html .= '<option value="' . $row['id'] . '" ' . $sel . '>' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('first_select_the_group') . '</option>';
        }
        echo $html;
    }
    protected function reminder_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['frequency' => ["label" => translate('frequency'), "rules" => 'trim|required']]);
        $this->validation->setRules(['days' => ["label" => translate('days'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['message' => ["label" => translate('message'), "rules" => 'trim|required']]);
    }
    public function reminder()
    {
        if (!get_permission('fees_reminder', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (!get_permission('fees_reminder', 'is_add')) {
                ajax_access_denied();
            }
            $this->reminder_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $post['branch_id'] = $branchID;
                $this->feesModel->reminderSave($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['reminderlist'] = $this->appLib->getTable('fees_reminder');
        $this->data['title'] = translate('fees_reminder');
        $this->data['main_menu'] = 'fees';
        $this->data['sub_page'] = 'fees/reminder';
        echo view('layout/index', $this->data);
    }
    public function edit_reminder($id = '')
    {
        if (!get_permission('fees_reminder', 'is_edit')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->reminder_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $post['branch_id'] = $branchID;
                $this->feesModel->reminderSave($post);
                $url = base_url('fees/reminder');
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['reminder'] = $this->appLib->getTable('fees_reminder', ['t.id' => $id], true);
        $this->data['title'] = translate('fees_reminder');
        $this->data['main_menu'] = 'fees';
        $this->data['sub_page'] = 'fees/edit_reminder';
        echo view('layout/index', $this->data);
    }
    public function reminder_delete($id = '')
    {
        if (get_permission('fees_reminder', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('fees_reminder')->delete();
        }
    }
    public function due_report()
    {
        if (!get_permission('fees_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['invoicelist'] = $this->feesModel->getDueReport($this->data['class_id'], $this->data['section_id']);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('due_fees_report');
        $this->data['sub_page'] = 'fees/due_report';
        $this->data['main_menu'] = 'fees_repots';
        echo view('layout/index', $this->data);
    }
    public function payment_history()
    {
        if (!get_permission('fees_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $classID = $this->request->getPost('class_id');
            $paymentVia = $this->request->getPost('payment_via');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['invoicelist'] = $this->feesModel->getStuPaymentHistory($classID, "", $paymentVia, $start, $end, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('fees_payment_history');
        $this->data['sub_page'] = 'fees/payment_history';
        $this->data['main_menu'] = 'fees_repots';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function student_fees_report()
    {
        if (!get_permission('fees_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $enroll_id = $this->request->getPost('enroll_id');
            $typeID = $this->request->getPost('fees_type');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['invoicelist'] = $this->feesModel->getStuPaymentReport($classID, $sectionID, $enroll_id, $typeID, $start, $end, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_fees_report');
        $this->data['sub_page'] = 'fees/student_fees_report';
        $this->data['main_menu'] = 'fees_repots';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function fine_report()
    {
        if (!get_permission('fees_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost('search')) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $paymentVia = $this->request->getPost('payment_via');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['invoicelist'] = $this->feesModel->getStuPaymentHistory($classID, $sectionID, $paymentVia, $start, $end, $branchID, true);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('fees_fine_reports');
        $this->data['sub_page'] = 'fees/fine_report';
        $this->data['main_menu'] = 'fees_repots';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function paymentRevert()
    {
        if (!get_permission('fees_revert', 'is_delete')) {
            $array = ['status' => 'error', 'message' => translate('access_denied')];
            echo json_encode($array);
            exit;
        }
        $array = ['status' => 'success', 'message' => translate('information_deleted')];
        $ids = $this->request->getPost('id');
        foreach ($ids as $value) {
    $feeDetails = $db->table('fee_payment_history')->get('fee_payment_history')->row();
            if (!empty($feeDetails)) {
                $amount = $feeDetails->amount + $feeDetails->fine;
                $sql = "SELECT `transactions`.`account_id`, `transactions_links_details`.`transactions_id` FROM `transactions_links_details` INNER JOIN `transactions` ON `transactions`.`id` = `transactions_links_details`.`transactions_id` WHERE `transactions_links_details`.`payment_id` = " . $db->escape($value);
                $transactionsDetails = $db->query($sql)->row();
                if (!empty($transactionsDetails)) {
                    $sql = "UPDATE `transactions` SET `amount` = `amount` + {$amount
}, `cr` = `cr` - {$amount}, `bal` = `bal` - {$amount} WHERE `id` = " . $db->escape($transactionsDetails->transactions_id);
                    $db->query($sql);
                    $sql = "UPDATE `accounts` SET `balance` = `balance` - {$amount} WHERE `id` = " . $db->escape($transactionsDetails->account_id);
                    $db->query($sql);
                    /*$this->db->set('amount', 'amount+' . $amount, false);
                                          $this->db->set('cr', 'cr-' . $amount, false);
                                          $this->db->set('bal', 'bal-' . $amount, false);
                                          $this->db->table('id', $transactionsDetails->transactions_id)->where();
                                          $this->db->table('transactions')->update();
                      
                                          $this->db->set('balance', 'balance-' . $amount, false);
                                          $this->db->table('id', $transactionsDetails->account_id)->where();
                                          $this->db->table('accounts')->update();*/
                }
                $this->db->table('id', $value)->where();
                $this->db->table('fee_payment_history')->delete();
            }
        }
        echo json_encode($array);
    }
    public function fee_fully_paid()
    {
        if (!get_permission('collect_fees', 'is_add')) {
            ajax_access_denied();
        }
        $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['pay_via' => ["label" => translate('payment_method'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $date = $this->request->getPost('date');
            $payVia = $this->request->getPost('pay_via');
            $invoiceID = $this->request->getPost('invoice_id');
            $allocations = $this->feesModel->getInvoiceDetails($invoiceID);
            $totalBalance = 0;
            $totalFine = 0;
            foreach ($allocations as $row) {
    $fine = $this->feesModel->feeFineCalculation($row['allocation_id'], $row['fee_type_id']);
                $b = $this->feesModel->getBalance($row['allocation_id'], $row['fee_type_id']);
                $fine = abs($fine - $b['fine']);
                if ($b['balance'] != 0) {
                    $totalBalance += $b['balance'];
                    $totalFine += $fine;
                    $arrayFees = ['allocation_id' => $row['allocation_id'], 'type_id' => $row['fee_type_id'], 'collect_by' => get_loggedin_user_id(), 'amount' => $b['balance'], 'discount' => 0, 'fine' => $fine, 'pay_via' => $payVia, 'remarks' => $this->request->getPost('remarks'), 'date' => $date];
                    $this->db->table('fee_payment_history', $arrayFees)->insert();
}
            }
            // transaction voucher save function
            if (isset($_POST['account_id'])) {
                $arrayTransaction = ['account_id' => $this->request->getPost('account_id'), 'amount' => $totalBalance + $totalFine, 'date' => $date];
                $this->feesModel->saveTransaction($arrayTransaction);
            }
            // send payment confirmation sms
            if (isset($_POST['guardian_sms'])) {
                $arrayData = ['student_id' => $this->request->getPost('student_id'), 'amount' => $totalBalance + $totalFine, 'paid_date' => $date];
                $this->smsModel->send_sms($arrayData, 2);
            }
            set_alert('success', translate('information_has_been_saved_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'url' => '', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function printFeesPaymentHistory()
    {
        if ($_POST !== []) {
            $record = $this->request->getPost('data');
            $record_array = json_decode((string) $record, true);
            $this->db->where_in('id', array_column($record_array, 'payment_id'));
            $paymentHistory = $builder->select("sum(amount) as total_amount,sum(discount) as total_discount,sum(fine) as total_fine")->get('fee_payment_history')->row_array();
            $this->data['total_paid'] = $paymentHistory['total_amount'];
            $this->data['total_discount'] = $paymentHistory['total_discount'];
            $this->data['total_fine'] = $paymentHistory['total_fine'];
            echo view('fees/printFeesPaymentHistory', $this->data);
        }
    }
    public function printFeesInvoice()
    {
        if ($_POST !== []) {
            $record = $this->request->getPost('data');
            $record_array = json_decode((string) $record);
            $total_fine = 0;
            $total_discount = 0;
            $total_paid = 0;
            $total_balance = 0;
            $total_amount = 0;
            foreach ($record_array as $value) {
    $deposit = $this->feesModel->getStudentFeeDeposit($value->allocationID, $value->feeTypeID);
                $full_amount = $value->feeAmount;
                $type_discount = $deposit['total_discount'];
                $type_fine = $deposit['total_fine'];
                $type_amount = $deposit['total_amount'];
                $balance = $full_amount - ($type_amount + $type_discount);
                $total_discount += $type_discount;
                $total_fine += $type_fine;
                $total_paid += $type_amount;
                $total_balance += $balance;
                $total_amount += $full_amount;
}
            $this->data['total_amount'] = $total_amount;
            $this->data['total_paid'] = $total_paid;
            $this->data['total_discount'] = $total_discount;
            $this->data['total_fine'] = $total_fine;
            $this->data['total_balance'] = $total_balance;
            echo view('fees/printFeesInvoice', $this->data);
        }
    }
    public function payReceiptPrint()
    {
        if ($_POST !== []) {
            if (!get_permission('collect_fees', 'is_add')) {
                ajax_access_denied();
            }
            $studentID = $this->request->getPost('student_id');
            $record = $this->request->getPost('data');
            $this->data['studentID'] = $studentID;
            $this->data['record'] = $record;
            echo view('fees/paySlipPrint', $this->data);
        }
    }
    public function selectedFeesPay()
    {
        if (!get_permission('collect_fees', 'is_add')) {
            ajax_access_denied();
        }
        $items = $this->request->getPost('collect_fees');
        foreach ($items as $key => $value) {
    $this->validation->setRules(['collect_fees[' . $key . '][date]' => ["label" => translate('date'), "rules" => 'trim|required']]);
            $this->validation->setRules(['collect_fees[' . $key . '][pay_via]' => ["label" => translate('payment_method'), "rules" => 'trim|required']]);
            $this->validation->setRules(['collect_fees[' . $key . '][amount]' => ["label" => translate('amount'), "rules" => 'trim|required|numeric|greater_than[0]']]);
            $this->validation->setRules(['collect_fees[' . $key . '][discount_amount]' => ["label" => translate('discount'), "rules" => 'trim|numeric']]);
            $this->validation->setRules(['collect_fees[' . $key . '][fine_amount]' => ["label" => translate('fine'), "rules" => 'trim|numeric']]);
            if (isset($value['account_id'])) {
                $this->validation->setRules(['collect_fees[' . $key . '][account_id]' => ["label" => translate('account'), "rules" => 'trim|required']]);
}
            $remainAmount = $this->feesModel->getBalance($value['allocation_id'], $value['type_id']);
            if ($remainAmount['balance'] < $value['amount']) {
                $error = ['collect_fees[' . $key . '][amount]' => 'Amount cannot be greater than the remaining.'];
                $array = ['status' => 'fail', 'error' => $error];
                echo json_encode($array);
                exit;
            }
            $remainAmount = $this->feesModel->getBalance($value['allocation_id'], $value['type_id']);
            if ($remainAmount['balance'] < $value['discount_amount']) {
                $error = ['collect_fees[' . $key . '][discount_amount]' => 'Amount cannot be greater than the remaining.'];
                $array = ['status' => 'fail', 'error' => $error];
                echo json_encode($array);
                exit;
            }
        }
        if ($this->validation->run() !== false) {
            $studentID = $this->request->getPost('student_id');
            foreach ($items as $value) {
    $amount = $value['amount'];
                $fineAmount = $value['fine_amount'];
                $discountAmount = $value['discount_amount'];
                $date = $value['date'];
                $payVia = $value['pay_via'];
                $arrayFees = ['allocation_id' => $value['allocation_id'], 'type_id' => $value['type_id'], 'collect_by' => get_loggedin_user_id(), 'amount' => $amount - $discountAmount, 'discount' => $discountAmount, 'fine' => $fineAmount, 'pay_via' => $payVia, 'remarks' => $value['remarks'], 'date' => $date];
                $this->db->table('fee_payment_history', $arrayFees)->insert();
                // transaction voucher save function
                if (isset($value['account_id'])) {
                    $arrayTransaction = ['account_id' => $value['account_id'], 'amount' => $amount + $fineAmount - $discountAmount, 'date' => $date];
                    $this->feesModel->saveTransaction($arrayTransaction);
}
                // send payment confirmation sms
                $arrayData = ['student_id' => $studentID, 'amount' => $amount + $fineAmount - $discountAmount, 'paid_date' => _d($date)];
                $this->smsModel->send_sms($arrayData, 2);
            }
            set_alert('success', translate('information_has_been_saved_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function selectedFeesCollect()
    {
        if ($_POST !== []) {
            $record = $this->request->getPost('data');
            $record_array = json_decode((string) $record);
            $this->data['student_id'] = $this->request->getPost('student_id');
            $this->data['branch_id'] = $this->applicationModel->get_branch_id();
            $this->data['record_array'] = $record_array;
            echo view('fees/selectedFeesCollect', $this->data);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Home.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\StudentFieldsModel;
use App\Models\EmailModel;
use App\Models\TestimonialModel;
use App\Models\GalleryModel;
use App\Models\AdmissionpaymentModel;
use App\Models\CardManageModel;
use App\Models\TimetableModel;
use App\Models\ExamModel;
use App\Models\CertificateModel;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Home.php
 * @copyright : Reserved RamomCoder Team
 */
class Home extends FrontendController
 
{
    protected $db;




    public $load;
    /**
     * @var App\Models\StudentFieldsModel
     */
    public $studentFields;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\TestimonialModel
     */
    public $testimonial;
    /**
     * @var App\Models\GalleryModel
     */
    public $gallery;
    public $homeModel;
    public $input;
    public $pagination;
    public $validation;
    public $student_fieldsModel;
    /**
     * @var App\Models\AdmissionpaymentModel
     */
    public $admissionpayment;
    public $admissionpaymentModel;
    public $emailModel;
    public $session;
    public $upload;
    public $recaptcha;
    public $mailer;
    /**
     * @var App\Models\CardManageModel
     */
    public $cardManage;
    /**
     * @var App\Models\TimetableModel
     */
    public $timetable;
    /**
     * @var App\Models\ExamModel
     */
    public $exam;
    public $examModel;
    /**
     * @var App\Models\CertificateModel
     */
    public $certificate;
    public $uri;
    public function __construct()
    {




        parent::__construct();
        
        
        
        
        $this->recaptcha = service('recaptcha');$this->mailer = service('mailer');$this->ciqrcode = service('ciqrcode');$this->appLib = service('appLib'); 
$this->load->helpers('custom_fields');
        $this->studentFields = new \App\Models\StudentFieldsModel();
        $this->email = new \App\Models\EmailModel();
        $this->testimonial = new \App\Models\TestimonialModel();
        $this->gallery = new \App\Models\GalleryModel();
        $this->Mailer = service('mailer');
    }
    public function index()
    {
        $this->home();
    }
    public function home()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['sliders'] = $this->homeModel->getCmsHome('slider', $branchID, 1, false);
        $this->data['features'] = $this->homeModel->getCmsHome('features', $branchID, 1, false);
        $this->data['wellcome'] = $this->homeModel->getCmsHome('wellcome', $branchID);
        $this->data['teachers'] = $this->homeModel->getCmsHome('teachers', $branchID);
        $this->data['testimonial'] = $this->homeModel->getCmsHome('testimonial', $branchID);
        $this->data['services'] = $this->homeModel->getCmsHome('services', $branchID);
        $this->data['cta_box'] = $this->homeModel->getCmsHome('cta', $branchID);
        $this->data['statistics'] = $this->homeModel->getCmsHome('statistics', $branchID);
        $this->data['page_data'] = $this->homeModel->get('front_cms_home_seo', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/index', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function about()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_about', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/about', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function faq()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_faq', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/faq', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function events()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $url_alias = $this->data['cms_setting']['url_alias'];
        $getLatestEventList = $this->homeModel->getLatestEventList($branchID);
        $page = html_escape(urldecode((string) $this->request->getGet('page')));
        if (is_numeric($page)) {
            $page = empty($page) ? 0 : $page;
        } else {
            $page = 0;
        }
        $total_records = empty($getLatestEventList) ? 0 : count($getLatestEventList);
        $config = [];
        $config['page_query_string'] = TRUE;
        $config['query_string_segment'] = 'page';
        $config["base_url"] = base_url() . $url_alias . '/events';
        $config["total_rows"] = $total_records;
        $config["per_page"] = 12;
        $config['full_tag_open'] = '<ul class="pagination justify-content-center">';
        $config['full_tag_close'] = '</ul>';
        $config['first_link'] = '<i class="far fa-angle-double-left"></i>';
        $config['first_tag_open'] = '<li class="previous">';
        $config['first_tag_close'] = '</li>';
        $config['last_link'] = '<i class="far fa-angle-double-right"></i>';
        $config['last_tag_open'] = '<li class="next">';
        $config['last_tag_close'] = '</li>';
        $config['next_link'] = '<i class="far fa-angle-right"></i>';
        $config['next_tag_open'] = '<li class="next">';
        $config['next_tag_close'] = '</li>';
        $config['prev_link'] = '<i class="far fa-angle-left"></i>';
        $config['prev_tag_open'] = '<li class="previous">';
        $config['prev_tag_close'] = '</li>';
        $config['cur_tag_open'] = '<li class="active"><span>';
        $config['cur_tag_close'] = '</span></li>';
        $config['num_tag_open'] = '<li>';
        $config['num_tag_close'] = '</il>';
        $this->pagination->initialize($config);
        $conditions['limit'] = $config["per_page"];
        $conditions['start'] = $page;
        $this->data["links"] = $this->pagination->create_links();
        $this->data["results"] = $this->homeModel->getLatestEventList($branchID, $conditions);
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_events', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/events', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function event_view($id)
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['event'] = $this->homeModel->get('event', ['id' => $id, 'branch_id' => $branchID, 'status' => 1, 'show_web' => 1], true);
        if (empty($this->data['event']['id'])) {
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->data['page_data'] = $this->homeModel->get('front_cms_events', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/event_view', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function news_view($alias = '')
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['event'] = $this->homeModel->get('front_cms_news_list', ['alias' => $alias, 'branch_id' => $branchID, 'show_web' => 1], true);
        if (empty($this->data['event']['id'])) {
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->data['page_data'] = $this->homeModel->get('front_cms_news', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/news_view', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function teachers()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_teachers', ['branch_id' => $branchID], true);
        $this->data['departments'] = $this->homeModel->get_teacher_departments($branchID);
        $this->data['doctor_list'] = $this->homeModel->get_teacher_list("", $branchID);
        $this->data['main_contents'] = view('home/teachers', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function admission()
    {
        if (!$this->data['cms_setting']['online_admission']) {
            redirect(site_url('home'));
        }
        $branchID = $this->homeModel->getDefaultBranch();
        $captcha = $this->data['cms_setting']['captcha_status'];
        if ($captcha == 'enable') {
            $this->Recaptcha = service('recaptcha', ['site_key' => $this->data['cms_setting']['recaptcha_site_key'], 'secret_key' => $this->data['cms_setting']['recaptcha_secret_key']]);
            $this->data['recaptcha'] = ['widget' => $this->recaptcha->getWidget(), 'script' => $this->recaptcha->getScriptTag()];
        }
        if ($_POST !== []) {
            $this->validation->setRules(["first_name" => ["label" => "First Name", "rules" => "trim|required"]]);
            $this->validation->setRules(["class_id" => ["label" => "Class", "rules" => "trim|required"]]);
            $this->validation->setRules(["guardian_photo" => ["label" => "Guardian Photo", "rules" => "callback_handle_upload[guardian_photo]"]]);
            $this->validation->setRules(["student_photo" => ["label" => "Student Photo", "rules" => "callback_handle_upload[student_photo]"]]);
            $validationArr = $this->student_fieldsModel->getOnlineStatusArr($branchID);
            unset($validationArr[0]);
            foreach ($validationArr as $value) {
    if ($value->status && $value->required) {
                    if ($value->prefix == 'student_email' || $value->prefix == 'guardian_email') {
                        $this->validation->setRules(["{$value->prefix
}" => ["label" => "Email", "rules" => 'trim|required|valid_email']]);
                    } elseif ($value->prefix == 'student_mobile_no' || $value->prefix == 'guardian_mobile_no') {
                        $this->validation->setRules(["{$value->prefix}" => ["label" => "Mobile No", "rules" => 'trim|required|numeric']]);
                    } elseif ($value->prefix == 'student_photo' || $value->prefix == 'guardian_photo' || $value->prefix == 'upload_documents') {
                        if (isset($_FILES["{$value->prefix}"]) && empty($_FILES["{$value->prefix}"]['name'])) {
                            $this->validation->setRule("{$value->prefix}", ucwords(str_replace('_', ' ', $value->prefix)), "required");
                        }
                    } elseif ($value->prefix == 'previous_school_details') {
                        $this->validation->setRules(["school_name" => ["label" => "School Name", "rules" => "trim|required"]]);
                        $this->validation->setRules(["qualification" => ["label" => "Qualification", "rules" => "trim|required"]]);
                    } else {
                        $this->validation->setRule($value->prefix, ucwords(str_replace('_', ' ', $value->prefix)), 'trim|required');
                    }
                }
            }
            if ($captcha == 'enable') {
                $this->validation->setRules(['g-recaptcha-response' => ["label" => 'Captcha', "rules" => 'trim|required']]);
            }
            // custom fields validation rules
            $customFields = getOnlineCustomFields('student', $branchID);
            foreach ($customFields as $fields_value) {
    if ($fields_value['required']) {
                    $fieldsID = $fields_value['id'];
                    $fieldLabel = $fields_value['field_label'];
                    $this->validation->setRules(["custom_fields[student][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
            }
            if ($this->validation->run() == true) {
                $admissionDate = empty($_POST['admission_date']) ? "" : date("Y-m-d", strtotime((string) $this->request->getPost('admission_date')));
                $birthday = empty($_POST['birthday']) ? "" : date("Y-m-d", strtotime((string) $this->request->getPost('birthday')));
                $previous_details = $this->request->getPost('school_name');
                if (!empty($previous_details)) {
                    $previous_details = ['school_name' => $this->request->getPost('school_name'), 'qualification' => $this->request->getPost('qualification'), 'remarks' => $this->request->getPost('previous_remarks')];
                    $previous_details = json_encode($previous_details);
                } else {
                    $previous_details = "";
                }
                do {
                    $reference_no = mt_rand(01, 99999999);
                    $refence_status = $this->homeModel->checkAdmissionReferenceNo($reference_no);
                } while ($refence_status);
                $arrayData = ['reference_no' => $reference_no, 'first_name' => $this->request->getPost('first_name'), 'last_name' => $this->request->getPost('last_name'), 'gender' => $this->request->getPost('gender'), 'birthday' => $birthday, 'admission_date' => $admissionDate, 'religion' => $this->request->getPost('religion'), 'caste' => $this->request->getPost('caste'), 'blood_group' => $this->request->getPost('blood_group'), 'mobile_no' => $this->request->getPost('student_mobile_no'), 'mother_tongue' => $this->request->getPost('mother_tongue'), 'present_address' => $this->request->getPost('present_address'), 'permanent_address' => $this->request->getPost('permanent_address'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'category_id' => $this->request->getPost('category'), 'email' => $this->request->getPost('student_email'), 'student_photo' => $this->uploadImage('images/student', 'student_photo'), 'previous_school_details' => $previous_details, 'guardian_name' => $this->request->getPost('guardian_name'), 'guardian_relation' => $this->request->getPost('guardian_relation'), 'father_name' => $this->request->getPost('father_name'), 'mother_name' => $this->request->getPost('mother_name'), 'grd_occupation' => $this->request->getPost('guardian_occupation'), 'grd_income' => $this->request->getPost('guardian_income'), 'grd_education' => $this->request->getPost('guardian_education'), 'grd_email' => $this->request->getPost('guardian_email'), 'grd_mobile_no' => $this->request->getPost('guardian_mobile_no'), 'grd_address' => $this->request->getPost('guardian_address'), 'grd_city' => $this->request->getPost('guardian_city'), 'grd_state' => $this->request->getPost('guardian_state'), 'grd_photo' => $this->uploadImage('images/parent', 'guardian_photo'), 'status' => 1, 'branch_id' => $branchID, 'class_id' => $this->request->getPost('class_id'), 'section_id' => $this->request->getPost('section'), 'doc' => $this->uploadImage('online_ad_documents', 'upload_documents'), 'apply_date' => date("Y-m-d H:i:s"), 'created_date' => date("Y-m-d H:i:s")];
                $this->db->table('online_admission', $arrayData)->insert();
                $studentID = $this->db->insert_id();
                // handle custom fields data
                $class_slug = 'student';
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFieldsOnline($customField, $studentID);
                }
                // check out admission payment status
                $this->admissionpayment = new \App\Models\AdmissionpaymentModel();
                $getStudent = $this->admissionpaymentModel->getStudentDetails($studentID);
                if ($getStudent['fee_elements']['status'] == 0) {
                    $url = base_url("home/admission_confirmation/" . $reference_no);
                    $section_name = empty($arrayData['section_id']) ? "N/A" : get_type_name_by_id('section', $arrayData['section_id']);
                    // applicant email send 
                    $arrayData['institute_name'] = get_type_name_by_id('branch', $arrayData['branch_id']);
                    $arrayData['reference_no'] = $reference_no;
                    $arrayData['student_name'] = $arrayData['first_name'] . " " . $arrayData['last_name'];
                    $arrayData['class_name'] = get_type_name_by_id('class', $arrayData['class_id']);
                    $arrayData['section_name'] = $section_name;
                    $arrayData['payment_url'] = base_url("admissionpayment/index/" . $reference_no);
                    $arrayData['admission_copy_url'] = $url;
                    $arrayData['paid_amount'] = 0;
                    $this->emailModel->onlineAdmission($arrayData);
                    $success = "Thank you for submitting the online registration form. Please you can print this copy.";
                    session()->set_flashdata('success', $success);
                } else {
                    $url = base_url("admissionpayment/index/" . $reference_no);
                }
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_admission', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/admission', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function checkAdmissionStatus()
    {
        if ($_POST !== []) {
            $this->validation->setRules(["refno" => ["label" => "Enter Your Reference Number", "rules" => "trim|required|callback_admissionstatus"]]);
            if ($this->validation->run() == true) {
                $reference_no = $this->request->getPost("refno");
                $url = base_url("home/admission_confirmation/" . $reference_no);
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    public function admissionstatus($reference_no)
    {
        if (!empty($reference_no)) {
            $this->db->table('reference_no', $reference_no)->where();
            $query = $builder->get('online_admission')->num_rows();
            if ($query < 1) {
                $this->validation->setRule('admissionstatus', "Invalid Reference Number.");
                return false;
            }
        }
        return true;
    }
    public function handle_upload($str, $fields)
    {
        if (isset($_FILES["{$fields}"]) && !empty($_FILES["{$fields}"]['name'])) {
            $file_size = $_FILES["{$fields}"]["size"];
            $file_name = $_FILES["{$fields}"]["name"];
            $allowedExts = ['jpg', 'jpeg', 'png'];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["{$fields}"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('handle_upload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
                if ($file_size > 2097152) {
                    $this->validation->setRule('handle_upload', translate('file_size_shoud_be_less_than') . " 2048KB.");
                    return false;
                }
            } else {
                $this->validation->setRule('handle_upload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        }
        return null;
    }
    public function uploadImage($role, $fields)
    {
        $return_photo = '';
        if (isset($_FILES["{$fields}"]) && !empty($_FILES["{$fields}"]['name'])) {
            $config['upload_path'] = './uploads/' . $role . '/';
            $config['overwrite'] = FALSE;
            $config['encrypt_name'] = TRUE;
            $config['allowed_types'] = '*';
            $file = $this->request->getFile('attachment_file'); $file->initialize($config);
            if ($this->upload->do_upload("{$fields}")) {
                $return_photo = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
            }
        }
        return $return_photo;
    }
    public function admission_confirmation($studentID = '')
    {
        $this->admissionpayment = new \App\Models\AdmissionpaymentModel();
        $getStudent = $this->admissionpaymentModel->getStudentDetails($studentID);
        if (empty($getStudent['id'])) {
            set_alert('error', "This application was not found.");
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->data['student'] = $getStudent;
        $this->data['branchID'] = $this->data['student']['branch_id'];
        $this->data['page_data'] = $this->homeModel->get('front_cms_admission', ['branch_id' => $this->data['student']['branch_id']], true);
        $this->data['main_contents'] = view('home/admission_confirmation', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function contact()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $captcha = $this->data['cms_setting']['captcha_status'];
        if ($captcha == 'enable') {
            $this->Recaptcha = service('recaptcha', ['site_key' => $this->data['cms_setting']['recaptcha_site_key'], 'secret_key' => $this->data['cms_setting']['recaptcha_secret_key']]);
            $this->data['recaptcha'] = ['widget' => $this->recaptcha->getWidget(), 'script' => $this->recaptcha->getScriptTag()];
        }
        if ($_POST !== []) {
            $this->validation->setRules(['name' => ["label" => 'Name', "rules" => 'trim|required']]);
            $this->validation->setRules(['email' => ["label" => 'Email', "rules" => 'trim|required|valid_email']]);
            $this->validation->setRules(['phoneno' => ["label" => 'Phone', "rules" => 'trim|required']]);
            $this->validation->setRules(['subject' => ["label" => 'Subject', "rules" => 'trim|required']]);
            $this->validation->setRules(['message' => ["label" => 'Message', "rules" => 'trim|required']]);
            if ($captcha == 'enable') {
                $this->validation->setRules(['g-recaptcha-response' => ["label" => 'Captcha', "rules" => 'trim|required']]);
            }
            if ($this->validation->run() !== false) {
                if ($captcha == 'enable') {
                    $captchaResponse = $this->recaptcha->verifyResponse($this->request->getPost('g-recaptcha-response'));
                } else {
                    $captchaResponse = ['success' => true];
                }
                if ($captchaResponse['success'] == true) {
                    $name = $this->request->getPost('name');
                    $email = $this->request->getPost('email');
                    $phoneno = $this->request->getPost('phoneno');
                    $subject = $this->request->getPost('subject');
                    $message = $this->request->getPost('message');
                    $msg = '<h3>Sender Information</h3>';
                    $msg .= '<br><br><b>Name: </b> ' . $name;
                    $msg .= '<br><br><b>Email: </b> ' . $email;
                    $msg .= '<br><br><b>Phone: </b> ' . $phoneno;
                    $msg .= '<br><br><b>Subject: </b> ' . $subject;
                    $msg .= '<br><br><b>Message: </b> ' . $message;
                    $data = ['branch_id' => $branchID, 'recipient' => $this->data['cms_setting']['receive_contact_email'], 'subject' => 'Contact Form Email', 'message' => $msg];
                    $send = $this->mailer->send($data, true);
                    if ($send == true) {
                        session()->set_flashdata('msg_success', 'Message Successfully Sent. We will contact you shortly.');
                    } else {
                        session()->set_flashdata('msg_error', 'Message Not Successfully Sent. Error - ' . $send);
                    }
                } else {
                    $error = 'Captcha is invalid';
                    session()->set_flashdata('error', $error);
                }
                return redirect()->to(base_url('home/contact'));
            }
        }
        $this->data['page_data'] = $this->homeModel->get('front_cms_contact', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/contact', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function admit_card()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_admitcard', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/admit_card', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function admitCardprintFn()
    {
        if ($_POST !== []) {
            $this->cardManage = new \App\Models\CardManageModel();
            $this->timetable = new \App\Models\TimetableModel();
            $this->Ciqrcode = service('ciqrcode', ['cacheable' => false]);
            $this->validation->setRules(['exam_id' => ["label" => translate('exam'), "rules" => 'trim|required']]);
            $this->validation->setRules(['register_no' => ["label" => translate('register_no'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                //get all QR Code file
                $files = glob('uploads/qr_code/*');
                foreach ($files as $file) {
    if (is_file($file)) {
                        unlink($file);
                        //delete file
}
                }
                $registerNo = $this->request->getPost('register_no');
                $userID = $db->table('student')->get('student')->row_array();
                if (empty($userID)) {
                    $array = ['status' => '0', 'error' => "Register No Not Found."];
                    echo json_encode($array);
                    exit;
                }
                $templateID = $this->request->getPost('templete_id');
                if (empty($templateID) || $templateID == 0) {
                    $array = ['status' => '0', 'error' => "No Default Template Set."];
                    echo json_encode($array);
                    exit;
                }
                $this->data['exam_id'] = $this->request->getPost('exam_id');
                $this->data['userID'] = $userID;
                $this->data['template'] = $this->card_manageModel->get('card_templete', ['id' => $templateID], true);
                $this->data['print_date'] = date('Y-m-d');
                $card_data = view('home/admitCardprintFn', $this->data, true);
                $array = ['status' => 'success', 'card_data' => $card_data];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function exam_results()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_exam_results', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/exam_results', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function examResultsPrintFn()
    {
        $this->exam = new \App\Models\ExamModel();
        if ($_POST !== []) {
            $this->validation->setRules(['exam_id' => ["label" => translate('exam'), "rules" => 'trim|required']]);
            $this->validation->setRules(['register_no' => ["label" => translate('register_no'), "rules" => 'trim|required']]);
            $this->validation->setRules(['session_id' => ["label" => translate('academic_year'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $sessionID = $this->request->getPost('session_id');
                $registerNo = $this->request->getPost('register_no');
                $examID = $this->request->getPost('exam_id');
                $builder->select('student.id,enroll.class_id,enroll.section_id');
                $this->db->from('enroll');
                $builder->join('student', 'student.id = enroll.student_id', 'inner');
                $this->db->table('student.register_no', $registerNo)->where();
                $this->db->table('enroll.session_id', $sessionID)->where();
                $userID = $builder->get()->row_array();
                if (empty($userID)) {
                    $array = ['status' => '0', 'error' => "Register No Not Found."];
                    echo json_encode($array);
                    exit;
                }
                $result = $this->examModel->getStudentReportCard($userID['id'], $examID, $sessionID, $userID['class_id'], $userID['section_id']);
                if (empty($result['exam'])) {
                    $array = ['status' => '0', 'error' => "Exam Results Not Found."];
                    echo json_encode($array);
                    exit;
                }
                $this->data['result'] = $result;
                $this->data['sessionID'] = $sessionID;
                $this->data['userID'] = $userID['id'];
                $this->data['examID'] = $examID;
                $this->data['grade_scale'] = $this->request->getPost('grade_scale');
                $this->data['attendance'] = $this->request->getPost('attendance');
                $this->data['print_date'] = date('Y-m-d');
                $card_data = view('home/reportCard', $this->data, true);
                $array = ['status' => 'success', 'card_data' => $card_data];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function certificates()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_certificates', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/certificates', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function certificatesPrintFn()
    {
        if ($_POST !== []) {
            $this->certificate = new \App\Models\CertificateModel();
            $this->Ciqrcode = service('ciqrcode', ['cacheable' => false]);
            //get all QR Code file
            $files = glob('uploads/qr_code/*');
            foreach ($files as $file) {
    if (is_file($file)) {
                    unlink($file);
                    //delete file
}
            }
            $this->validation->setRules(['templete_id' => ["label" => translate('certificate'), "rules" => 'trim|required']]);
            $this->validation->setRules(['register_no' => ["label" => translate('register_no'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $registerNo = $this->request->getPost('register_no');
                $examID = $this->request->getPost('exam_id');
                $userID = $db->table('student')->get('student')->row_array();
                if (empty($userID)) {
                    $array = ['status' => '0', 'error' => "Register No Not Found."];
                    echo json_encode($array);
                    exit;
                }
                $this->data['user_type'] = 1;
                $templateID = $this->request->getPost('templete_id');
                $this->data['template'] = $this->certificateModel->get('certificates_templete', ['id' => $templateID], true);
                $this->data['userID'] = $userID['id'];
                $this->data['print_date'] = date('Y-m-d');
                $card_data = view('home/certificatesPrintFn', $this->data, true);
                $array = ['status' => 'success', 'card_data' => $card_data];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function gallery()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_gallery', ['branch_id' => $branchID], true);
        $this->data['category'] = $this->homeModel->getGalleryCategory($branchID);
        $this->data['galleryList'] = $this->homeModel->getGalleryList($branchID);
        $this->data['main_contents'] = view('home/gallery', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function gallery_view($alias = '')
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_gallery', ['branch_id' => $branchID], true);
        $this->data['gallery'] = $this->homeModel->get('front_cms_gallery_content', ['branch_id' => $branchID, 'alias' => $alias], true);
        $this->data['category'] = $this->homeModel->getGalleryCategory($branchID);
        $this->data['galleryList'] = $this->homeModel->getGalleryList($branchID);
        $this->data['main_contents'] = view('home/gallery_view', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function page($url = '')
    {
        $builder->select('front_cms_menu.title as menu_title,front_cms_menu.alias,front_cms_pages.*');
        $this->db->from('front_cms_menu');
        $builder->join('front_cms_pages', 'front_cms_pages.menu_id = front_cms_menu.id', 'inner');
        $this->db->table('front_cms_menu.alias', $url)->where();
        $this->db->table('front_cms_menu.publish', 1)->where();
        $getData = $builder->get()->row_array();
        $this->data['page_data'] = $getData;
        $this->data['active_menu'] = 'page';
        $this->data['main_contents'] = view('home/page', $this->data, true);
        view('home/layout/index', $this->data);
    }
    public function getSectionByClass()
    {
        $html = "";
        $classID = $this->request->getPost("class_id");
        if (!empty($classID)) {
            $result = $builder->select('sections_allocation.section_id,section.name')->from('sections_allocation')->join('section', 'section.id = sections_allocation.section_id', 'left')->where('sections_allocation.class_id', $classID)->get()->result_array();
            if (is_array($result) && count($result)) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['section_id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_selection_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_class_first') . '</option>';
        }
        echo $html;
    }
    public function get_branch_url()
    {
        $branch_id = $this->request->getPost("branch_id");
        $url = $db->table('front_cms_setting')->get('front_cms_setting')->row_array();
        $this->uri->segment(4) ?: $this->uri->segment(3);
        echo json_encode(['url_alias' => base_url($url['url_alias'])]);
    }
    public function news()
    {
        $branchID = $this->homeModel->getDefaultBranch();
        $url_alias = $this->data['cms_setting']['url_alias'];
        $getLatestNewsList = $this->homeModel->getLatestNewsList($branchID);
        $page = html_escape(urldecode((string) $this->request->getGet('page')));
        if (is_numeric($page)) {
            $page = empty($page) ? 0 : $page;
        } else {
            $page = 0;
        }
        $total_records = empty($getLatestNewsList) ? 0 : count($getLatestNewsList);
        $config = [];
        $config['page_query_string'] = TRUE;
        $config['query_string_segment'] = 'page';
        $config["base_url"] = base_url() . $url_alias . '/news';
        $config["total_rows"] = $total_records;
        $config["per_page"] = 12;
        $config['full_tag_open'] = '<ul class="pagination justify-content-center">';
        $config['full_tag_close'] = '</ul>';
        $config['first_link'] = '<i class="far fa-angle-double-left"></i>';
        $config['first_tag_open'] = '<li class="previous">';
        $config['first_tag_close'] = '</li>';
        $config['last_link'] = '<i class="far fa-angle-double-right"></i>';
        $config['last_tag_open'] = '<li class="next">';
        $config['last_tag_close'] = '</li>';
        $config['next_link'] = '<i class="far fa-angle-right"></i>';
        $config['next_tag_open'] = '<li class="next">';
        $config['next_tag_close'] = '</li>';
        $config['prev_link'] = '<i class="far fa-angle-left"></i>';
        $config['prev_tag_open'] = '<li class="previous">';
        $config['prev_tag_close'] = '</li>';
        $config['cur_tag_open'] = '<li class="active"><span>';
        $config['cur_tag_close'] = '</span></li>';
        $config['num_tag_open'] = '<li>';
        $config['num_tag_close'] = '</il>';
        $this->pagination->initialize($config);
        $conditions['limit'] = $config["per_page"];
        $conditions['start'] = $page;
        $this->data["links"] = $this->pagination->create_links();
        $this->data["results"] = $this->homeModel->getLatestNewsList($branchID, $conditions);
        $this->data['branchID'] = $branchID;
        $this->data['page_data'] = $this->homeModel->get('front_cms_news', ['branch_id' => $branchID], true);
        $this->data['main_contents'] = view('home/news', $this->data, true);
        view('home/layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Homework.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SubjectModel;
use App\Models\SmsModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Homework.php
 * @copyright : Reserved RamomCoder Team
 */
class Homework extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\HomeworkModel
     */
    public $homework;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $applicationModel;
    public $input;
    public $load;
    public $validation;
    public $homeworkModel;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->homework = new \App\Models\HomeworkModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->sms = new \App\Models\SmsModel();
        if (!moduleIsEnabled('homework')) {
            access_denied();
        }
    }
    public function index()
    {
        // check access permission
        if (!get_permission('homework', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $subjectID = $this->request->getPost('subject_id');
            $this->data['homeworklist'] = $this->homeworkModel->getList($classID, $sectionID, $subjectID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('homework');
        $this->data['sub_page'] = 'homework/index';
        $this->data['main_menu'] = 'homework';
        echo view('layout/index', $this->data);
    }
    public function add()
    {
        if (!get_permission('homework', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->homework_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $response = $this->homeworkModel->save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('homework');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('homework');
        $this->data['sub_page'] = 'homework/add';
        $this->data['main_menu'] = 'homework';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('homework', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->homework_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $response = $this->homeworkModel->save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('homework');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['homework'] = $this->appLib->getTable('homework', ['t.id' => $id], true);
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('homework');
        $this->data['sub_page'] = 'homework/edit';
        $this->data['main_menu'] = 'homework';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        echo view('layout/index', $this->data);
    }
    public function evaluate($id = '')
    {
        // check access permission
        if (!get_permission('homework_evaluate', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['homeworklist'] = $this->homeworkModel->getEvaluate($id);
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('homework');
        $this->data['sub_page'] = 'homework/evaluate_list';
        $this->data['main_menu'] = 'homework';
        echo view('layout/index', $this->data);
    }
    function evaluate_save()
    {
        // check access permission
        if (!get_permission('homework_evaluate', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $evaluate = $this->request->getPost('evaluate');
                $homeworkID = $this->request->getPost('homework_id');
                $date = date("Y-m-d", strtotime((string) $this->request->getPost('date')));
                foreach ($evaluate as $value) {
    $attStatus = $value['status'] ?? "";
                    $arrayAttendance = ['homework_id' => $homeworkID, 'student_id' => $value['student_id'], 'status' => $attStatus, 'rank' => $value['rank'], 'remark' => $value['remark'], 'date' => $date];
                    if (empty($value['evaluation_id'])) {
                        $this->db->table('homework_evaluation', $arrayAttendance)->insert();
} else {
                        $this->db->table('id', $value['evaluation_id'])->where();
                        $this->db->table('homework_evaluation', ['rank' => $value['rank'], 'status' => $attStatus, 'remark' => $value['remark'], 'date' => $date])->update();
                    }
                }
                $this->db->table('id', $homeworkID)->where();
                $this->db->table('homework', ['evaluation_date' => $date, 'evaluated_by' => get_loggedin_user_id()])->update();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'message' => translate('information_has_been_saved_successfully')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    public function evaluateModal()
    {
        $this->data['homeworkID'] = $this->request->getPost('homework_id');
        echo view('homework/evaluateModal', $this->data, true);
    }
    public function report()
    {
        // check access permission
        if (!get_permission('evaluation_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $subjectID = $this->request->getPost('subject_id');
            $this->data['homeworklist'] = $this->homeworkModel->getList($classID, $sectionID, $subjectID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('homework');
        $this->data['sub_page'] = 'homework/report';
        $this->data['main_menu'] = 'homework';
        echo view('layout/index', $this->data);
    }
    public function evaluateDetails()
    {
        $id = $this->request->getPost('homework_id');
        $this->data['homeworklist'] = $this->homeworkModel->getEvaluate($id);
        echo view('homework/evaluateDetails', $this->data, true);
    }
    public function download($id)
    {
        helper('download');
        $name = get_type_name_by_id('homework', $id, 'document');
        $ext = explode(".", (string) $name);
        $filepath = "./uploads/attachments/homework/" . $id . "." . $ext[1];
        $data = file_get_contents($filepath);
        return $this->response->download($name, $data);
    }
    public function download_submitted()
    {
        helper('download');
        $encrypt_name = urldecode((string) $this->request->getGet('file'));
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $encrypt_name)) {
            $file_name = $db->table('homework_submit')->get('homework_submit')->row()->file_name;
            if (!empty($file_name)) {
                return $this->response->download($file_name, file_get_contents('uploads/attachments/homework_submit/' . $encrypt_name));
            }
        }
    }
    public function delete($id = '')
    {
        if (get_permission('homework', 'is_delete') && !empty($id)) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $name = get_type_name_by_id('homework', $id, 'document');
            $ext = explode(".", (string) $name);
            $this->db->table('id', $id)->where();
            $this->db->table('homework')->delete();
            $filepath = "./uploads/attachments/homework/" . $id . "." . $ext[1];
            if (file_exists($filepath)) {
                unlink($filepath);
            }
        }
    }
    /* homework form validation rules */
    protected function homework_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
        $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
        $this->validation->setRules(['subject_id' => ["label" => translate('subject'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date_of_homework' => ["label" => translate('date_of_homework'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date_of_submission' => ["label" => translate('date_of_submission'), "rules" => 'trim|required']]);
        if (isset($_POST['published_later'])) {
            $this->validation->setRules(['schedule_date' => ["label" => translate('schedule_date'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['homework' => ["label" => translate('homework'), "rules" => 'trim|required']]);
        $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_handle_upload']]);
    }
    // upload file form validation
    public function handle_upload()
    {
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $allowedExts = array_map('trim', array_map('strtolower', explode(',', (string) $this->data['global_config']['file_extension'])));
            $allowedSizeKB = $this->data['global_config']['file_size'];
            $allowedSize = floatval(1024 * $allowedSizeKB);
            $file_size = $_FILES["attachment_file"]["size"];
            $file_name = $_FILES["attachment_file"]["name"];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["attachment_file"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('handle_upload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
                if ($file_size > $allowedSize) {
                    $this->validation->setRule('handle_upload', translate('file_size_shoud_be_less_than') . " {$allowedSizeKB} KB.");
                    return false;
                }
            } else {
                $this->validation->setRule('handle_upload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        } else {
            if (isset($_POST['homework_id'])) {
                return true;
            }
            $this->validation->setRule('handle_upload', "The Attachment field is required.");
            return false;
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Hostels.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\HostelModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Hostels.php
 * @copyright : Reserved RamomCoder Team
 */
class Hostels extends AdminController
 
{
    public $appLib;
    protected $db;



    /**
     * @var App\Models\HostelModel
     */
    public $hostel;
    public $validation;
    public $input;
    public $hostelModel;
    public $load;
    public $applicationModel;
    public function __construct()
    {



        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->hostel = new \App\Models\HostelModel();
    }
    /* hostel form validation rules */
    protected function hostel_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('hostel_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'required']]);
        $this->validation->setRules(['watchman_name' => ["label" => translate('watchman_name'), "rules" => 'trim|required']]);
    }
    public function index()
    {
        if (!get_permission('hostel', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('hostel', 'is_add')) {
                ajax_access_denied();
            }
            $this->hostel_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all hostel information in the database file
                $this->hostelModel->hostel_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('hostels');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['hostellist'] = $this->appLib->getTable('hostel');
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('hostel_master');
        $this->data['sub_page'] = 'hostels/index';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    // the hostel information is updated here
    public function edit($id = '')
    {
        if (!get_permission('hostel', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->hostel_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all hostel information in the database file
                $this->hostelModel->hostel_save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('hostels');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['hostel'] = $this->appLib->getTable('hostel', ['t.id' => $id], true);
        $this->data['title'] = translate('hostel_master');
        $this->data['sub_page'] = 'hostels/edit';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        if (get_permission('hostel', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('hostel')->delete();
        }
    }
    /* category form validation rules */
    protected function category_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['category_name' => ["label" => translate('category'), "rules" => 'trim|required|callback_unique_category']]);
        $this->validation->setRules(['type' => ["label" => translate('category_for'), "rules" => 'required']]);
    }
    // category information are prepared and stored in the database here
    public function category()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('hostel_category', 'is_add')) {
                access_denied();
            }
            $this->category_validation();
            if ($this->validation->run() !== false) {
                //save hostel type information in the database file
                $this->hostelModel->category_save($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('hostels/category'));
            }
        }
        $this->data['categorylist'] = $this->appLib->getTable('hostel_category');
        $this->data['title'] = translate('category');
        $this->data['sub_page'] = 'hostels/category';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    public function category_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('hostel_category', 'is_edit')) {
                ajax_access_denied();
            }
            $this->category_validation();
            if ($this->validation->run() !== false) {
                //update exam term information in the database file
                $this->hostelModel->category_save($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('hostels/category');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function category_delete($id)
    {
        if (get_permission('hostel_category', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('hostel_category')->delete();
        }
    }
    // validate here, if the check type name
    public function unique_category($name)
    {
        $categoryID = $this->request->getPost('category_id');
        $type = $this->request->getPost('type');
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($categoryID)) {
            $this->db->where_not_in('id', $categoryID);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('type', $type)->where();
        $this->db->table('branch_id', $branchID)->where();
        $query = $builder->get('hostel_category');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_category", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    // room information are prepared and stored in the database here
    public function room()
    {
        if (!get_permission('hostel_room', 'is_view')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('hostel_room', 'is_add')) {
                ajax_access_denied();
            }
            $this->room_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all hostel information in the database file
                $this->hostelModel->room_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['roomlist'] = $this->appLib->getTable('hostel_room');
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('hostel_room');
        $this->data['sub_page'] = 'hostels/room';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    // the room information is updated here
    public function edit_room($id = '')
    {
        if (!get_permission('hostel_room', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->room_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all hostel information in the database file
                $this->hostelModel->room_save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('hostels/room');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['room'] = $this->appLib->getTable('hostel_room', ['t.id' => $id], true);
        $this->data['title'] = translate('hostels_room_edit');
        $this->data['sub_page'] = 'hostels/room_edit';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    public function delete_room($id = '')
    {
        if (get_permission('hostel_room', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('hostel_room')->delete();
        }
    }
    // validate here, if the check room name
    public function unique_room_name($name)
    {
        $room_id = $this->request->getPost('room_id');
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($room_id)) {
            $this->db->where_not_in('id', $room_id);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('branch_id', $branchID)->where();
        $query = $builder->get('hostel_room');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_room_name", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    // student allocation report is generated here
    public function allocation_report()
    {
        if (!get_permission('hostel_allocation', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['allocationlist'] = $this->hostelModel->allocation_report($classID, $sectionID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('allocation_list');
        $this->data['sub_page'] = 'hostels/allocation';
        $this->data['main_menu'] = 'hostels';
        echo view('layout/index', $this->data);
    }
    public function allocation_delete($id)
    {
        if (get_permission('hostel_allocation', 'is_delete')) {
            $builder->select('student_id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $student_id = $builder->get('enroll')->row()->student_id;
            if (!empty($student_id)) {
                $arrayData = ['hostel_id' => 0, 'room_id' => 0];
                $this->db->table('id', $student_id)->where();
                $this->db->table('student', $arrayData)->update();
            }
        }
    }
    // get a list of branch based information
    public function getCategoryByBranch()
    {
        $type = $this->request->getPost('type');
        $branchID = $this->applicationModel->get_branch_id();
        $html = '';
        if (!empty($branchID)) {
            $result = $db->table('hostel_category')->get('hostel_category')->result_array();
            if (count($result) > 0) {
                echo '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    /* get a list of branch based information */
    public function getRoomByHostel()
    {
        $html = '';
        $hostelID = $this->request->getPost('hostel_id');
        if (!empty($hostelID)) {
            $rooms = $db->table('hostel_room')->get('hostel_room')->result_array();
            if (count($rooms) > 0) {
                echo '<option value="">' . translate('select') . '</option>';
                foreach ($rooms as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . ' (' . get_type_name_by_id('hostel_category', $row['category_id']) . ')' . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_hostel_first') . '</option>';
        }
        echo $html;
    }
    public function getCategoryDetails()
    {
        $id = $this->request->getPost('id');
        $this->db->table('id', $id)->where();
        $query = $builder->get('hostel_category');
        $result = $query->row_array();
        echo json_encode($result);
    }
    protected function room_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('hostel_name'), "rules" => 'trim|required|callback_unique_room_name']]);
        $this->validation->setRules(['hostel_id' => ["label" => translate('hostel_name'), "rules" => 'required']]);
        $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'trim|required']]);
        $this->validation->setRules(['number_of_beds' => ["label" => translate('no_of_beds'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['bed_fee' => ["label" => translate('cost_per_bed'), "rules" => 'trim|required|numeric']]);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Inventory.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Inventory.php
 * @copyright : Reserved RamomCoder Team
 */
class Inventory extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\InventoryModel
     */
    public $inventory;
    public $validation;
    public $input;
    public $inventoryModel;
    public $applicationModel;
    public $load;
    public $session;
    public function __construct()
    {

        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->inventory = new \App\Models\InventoryModel();
        if (!moduleIsEnabled('inventory')) {
            access_denied();
        }
    }
    public function index()
    {
        $this->product();
    }
    /* product form validation rules */
    protected function product_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['product_name' => ["label" => translate('product') . " " . translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['product_code' => ["label" => translate('product') . " " . translate('code'), "rules" => 'trim|required']]);
        $this->validation->setRules(['product_category' => ["label" => translate('product') . " " . translate('category'), "rules" => 'trim|required']]);
        $this->validation->setRules(['purchase_unit' => ["label" => translate('purchase_unit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['sales_unit' => ["label" => translate('sales_unit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['unit_ratio' => ["label" => translate('unit_ratio'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['purchase_price' => ["label" => translate('purchase_price'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['sales_price' => ["label" => translate('sales_price'), "rules" => 'trim|required|numeric']]);
    }
    // add new product
    public function product()
    {
        // check access permission
        if (!get_permission('product', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('product', 'is_add')) {
                ajax_access_denied();
            }
            $this->product_validation();
            if ($this->validation->run() == true) {
                // save product information in the database
                $post = $this->request->getPost();
                $this->inventoryModel->save_product($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['productlist'] = $this->inventoryModel->get_product_list();
        $this->data['unitlist'] = $this->appLib->getSelectByBranch('product_unit', $branchID);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/product';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // update existing product
    public function product_edit($id)
    {
        // check access permission
        if (!get_permission('product', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->product_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->inventoryModel->save_product($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => base_url('inventory/product')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['product'] = $this->appLib->getTable('product', ['t.id' => $id], true);
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $this->data['product']['branch_id']);
        $this->data['unitlist'] = $this->appLib->getSelectByBranch('product_unit', $this->data['product']['branch_id']);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/product_edit';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // delete product from database
    public function product_delete($id)
    {
        // check access permission
        if (!get_permission('product', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('product')->delete();
    }
    // add category from database
    public function category()
    {
        if (isset($_POST['category'])) {
            if (!get_permission('product_category', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['category_name' => ["label" => 'Category Name', "rules" => 'trim|required|callback_unique_category']]);
            if ($this->validation->run() !== false) {
                $arrayCategory = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('product_category', $arrayCategory)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('inventory/category'));
            }
        }
        $this->data['categorylist'] = $this->appLib->getTable('product_category');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/category';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    public function category_edit()
    {
        // check access permission
        if (!get_permission('product_category', 'is_edit')) {
            access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['category_name' => ["label" => 'Category Name', "rules" => 'trim|required|callback_unique_category']]);
        if ($this->validation->run() !== false) {
            $arrayCategory = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $category_id = $this->request->getPost('category_id');
            $this->db->table('id', $category_id)->where();
            $this->db->table('product_category', $arrayCategory)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
        }
        return redirect()->to(base_url('inventory/category'));
    }
    // delete category from database
    public function category_delete($id)
    {
        // check access permission
        if (!get_permission('product_category', 'is_delete')) {
            access_denied();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('product_category')->delete();
    }
    // duplicate category name check in db
    public function unique_category($name)
    {
        $branch_id = $this->applicationModel->get_branch_id();
        $category_id = $this->request->getPost('category_id');
        if (!empty($category_id)) {
            $this->db->where_not_in('id', $category_id);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('branch_id', $branch_id)->where();
        $query = $builder->get('product_category');
        if ($query->num_rows() > 0) {
            if (!empty($category_id)) {
                set_alert('error', "The Category name are already used");
            } else {
                $this->validation->setRule("unique_category", "The %s name are already used.");
            }
            return false;
        } else {
            return true;
        }
    }
    // add new supplier member
    public function supplier()
    {
        // check access permission
        if (!get_permission('product_supplier', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('product_supplier', 'is_add')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['supplier_name' => ["label" => translate('supplier_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['contact_number' => ["label" => translate('contact_number'), "rules" => 'trim|required|numeric']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->inventoryModel->save_supplier($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['supplierlist'] = $this->appLib->getTable('product_supplier');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/supplier';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // update existing supplier member
    public function supplier_edit($id)
    {
        // check access permission
        if (!get_permission('product_supplier', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['supplier_name' => ["label" => translate('supplier_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['contact_number' => ["label" => translate('contact_number'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->inventoryModel->save_supplier($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => base_url('inventory/supplier')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['supplier'] = $this->appLib->getTable('product_supplier', ['t.id' => $id], true);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/supplier_edit';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // delete existing supplier member
    public function supplier_delete($id)
    {
        // check access permission
        if (!get_permission('product_supplier', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('product_supplier')->delete();
    }
    public function unit()
    {
        if (isset($_POST['unit'])) {
            if (!get_permission('product_unit', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['unit_name' => ["label" => 'Unit Name', "rules" => 'trim|required|callback_unique_unit']]);
            if ($this->validation->run() !== false) {
                $arrayUnit = ['name' => $this->request->getPost('unit_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('product_unit', $arrayUnit)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('inventory/unit'));
            }
        }
        $this->data['unitlist'] = $this->inventoryModel->get('product_unit', '', false, true);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/unit';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    public function unit_edit()
    {
        if (!get_permission('product_unit', 'is_edit')) {
            access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['unit_name' => ["label" => 'Unit Name', "rules" => 'trim|required|callback_unique_unit']]);
        if ($this->validation->run() !== false) {
            $unit_id = $this->request->getPost('unit_id');
            $arrayUnit = ['name' => $this->request->getPost('unit_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $unit_id)->where();
            $this->db->table('product_unit', $arrayUnit)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
        }
        return redirect()->to(base_url('inventory/unit'));
    }
    public function unit_delete($id)
    {
        if (!get_permission('product_unit', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('product_unit')->delete();
    }
    public function unitDetails()
    {
        if (get_permission('product_unit', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('product_unit');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    public function unique_unit($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $unit_id = $this->request->getPost('unit_id');
        if (!empty($unit_id)) {
            $this->db->where_not_in('id', $unit_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('student_category')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_unit", translate('already_taken'));
            return false;
        }
    }
    // add new product purchase bill
    public function purchase()
    {
        if (!get_permission('product_purchase', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['purchaselist'] = $this->inventoryModel->get_purchase_list();
        $this->data['productlist'] = $this->inventoryModel->getProductByBranch($branchID);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/purchase';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    public function purchaseItems()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['productlist'] = $this->inventoryModel->getProductByBranch($branchID);
        echo view('inventory/purchaseItems', $this->data, true);
    }
    public function getPurchasePrice()
    {
        $id = $this->request->getPost('id');
        $price = $db->table('product')->get('product')->row_array();
        $unit = $db->table('product_unit')->get('product_unit')->row();
        echo json_encode(['price' => $price['price'], 'unit' => $unit->name]);
    }
    /* purchase form validation rules */
    protected function purchase_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['supplier_id' => ["label" => 'Supplier', "rules" => 'trim|required']]);
        $this->validation->setRules(['store_id' => ["label" => 'Store', "rules" => 'trim|required']]);
        $this->validation->setRules(['bill_no' => ["label" => 'Bill No', "rules" => 'trim|required']]);
        $this->validation->setRules(['purchase_status' => ["label" => 'Purchase Status', "rules" => 'trim|required']]);
        $this->validation->setRules(['date' => ["label" => 'Date', "rules" => 'trim|required']]);
        $items = $this->request->getPost('purchases');
        if (!empty($items)) {
            foreach ($items as $key => $value) {
    $this->validation->setRules(['purchases[' . $key . '][product]' => ["label" => 'Product', "rules" => 'trim|required']]);
                $this->validation->setRules(['purchases[' . $key . '][quantity]' => ["label" => 'Quantity', "rules" => 'trim|required']]);
}
        }
    }
    public function purchase_save()
    {
        if (!get_permission('product_purchase', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->purchase_validation();
            if ($this->validation->run() == false) {
                $msg = ['supplierID' => form_error('supplier_id'), 'storeID' => form_error('store_id'), 'bill_no' => form_error('bill_no'), 'purchase_status' => form_error('purchase_status'), 'date' => form_error('date'), 'delivery_time' => form_error('delivery_time'), 'payment_amount' => form_error('payment_amount')];
                if (is_superadmin_loggedin()) {
                    $msg['branch_id'] = form_error('branch_id');
                }
                $items = $this->request->getPost('purchases');
                if (!empty($items)) {
                    foreach ($items as $key => $value) {
    $msg['product' . $key] = form_error('purchases[' . $key . '][product]');
                        $msg['quantity' . $key] = form_error('purchases[' . $key . '][quantity]');
}
                }
                $array = ['status' => 'fail', 'url' => '', 'error' => $msg];
            } else {
                $data = $this->request->getPost();
                $this->inventoryModel->save_purchase($data);
                $url = base_url('inventory/purchase');
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            }
            echo json_encode($array);
        }
    }
    public function purchaseMakeReceived($id = '')
    {
        if (!get_permission('product_purchase', 'is_eit')) {
            access_denied();
        }
        if (!empty($id)) {
            $r = $db->table('purchase_bill')->get('purchase_bill')->row()->cid;
            if ($r > 0) {
                $bill_details = $db->table('purchase_bill_details')->get('purchase_bill_details')->getResult();
                foreach ($bill_details as $value) {
    $unit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
                    $sql = "UPDATE `product` SET `available_stock` = `available_stock` + " . $value->quantity * $unit_ratio . " WHERE `id` = " . $db->escape($value->product_id);
                    $db->query($sql);
}
                $this->db->table('id', $id)->where();
                $this->db->table('purchase_bill', ['purchase_status' => 2])->update();
            }
        }
    }
    public function purchase_edit_save()
    {
        if (!get_permission('product_purchase', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            // validate inputs
            $this->validation->setRules(['supplier_id' => ["label" => 'Supplier', "rules" => 'trim|required']]);
            $this->validation->setRules(['store_id' => ["label" => 'Store', "rules" => 'trim|required']]);
            $this->validation->setRules(['bill_no' => ["label" => 'Bill No', "rules" => 'trim|required']]);
            $this->validation->setRules(['purchase_status' => ["label" => 'Purchase Status', "rules" => 'trim|required']]);
            $this->validation->setRules(['date' => ["label" => 'Date', "rules" => 'trim|required']]);
            $items = $this->request->getPost('purchases');
            foreach ($items as $key => $value) {
    $this->validation->setRules(['purchases[' . $key . '][product]' => ["label" => 'Product', "rules" => 'trim|required']]);
                $this->validation->setRules(['purchases[' . $key . '][quantity]' => ["label" => 'Quantity', "rules" => 'trim|required']]);
}
            if ($this->validation->run() == false) {
                $msg = ['supplierID' => form_error('supplier_id'), 'storeID' => form_error('store_id'), 'bill_no' => form_error('bill_no'), 'purchase_status' => form_error('purchase_status'), 'date' => form_error('date'), 'delivery_time' => form_error('delivery_time'), 'payment_amount' => form_error('payment_amount')];
                foreach ($items as $key => $value) {
    $msg['product' . $key] = form_error('purchases[' . $key . '][product]');
                    $msg['quantity' . $key] = form_error('purchases[' . $key . '][quantity]');
}
                $array = ['status' => 'fail', 'url' => '', 'error' => $msg];
            } else {
                $purchase_bill_id = $this->request->getPost('purchase_bill_id');
                $supplier_id = $this->request->getPost('supplier_id');
                $store_id = $this->request->getPost('store_id');
                $bill_no = $this->request->getPost('bill_no');
                $purchase_status = $this->request->getPost('purchase_status');
                $grand_total = $this->request->getPost('grand_total');
                $discount = $this->request->getPost('total_discount');
                $purchase_paid = $this->request->getPost('purchase_paid');
                $net_total = $this->request->getPost('net_grand_total');
                $date = $this->request->getPost('date');
                $remarks = $this->request->getPost('remarks');
                $payment_status = $net_total <= $purchase_paid ? 3 : 2;
                $array_invoice = ['supplier_id' => $supplier_id, 'store_id' => $store_id, 'bill_no' => $bill_no, 'remarks' => $remarks, 'total' => $grand_total, 'discount' => $discount, 'due' => $net_total - $purchase_paid, 'purchase_status' => $purchase_status, 'payment_status' => $payment_status, 'date' => date('Y-m-d', strtotime((string) $date)), 'modifier_id' => get_loggedin_user_id()];
                $this->db->table('id', $purchase_bill_id)->where();
                $this->db->table('purchase_bill', $array_invoice)->update();
                $purchases = $this->request->getPost('purchases');
                foreach ($purchases as $value) {
    $array_product = ['purchase_bill_id' => $purchase_bill_id, 'product_id' => $value['product'], 'unit_price' => $value['unit_price'], 'discount' => $value['discount'], 'quantity' => $value['quantity'], 'sub_total' => $value['sub_total']];
                    if (isset($value['old_product_id'])) {
                        if ($value['old_product_id'] == $value['product']) {
                            $unit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
                            if (isset($value['old_quantity'])) {
                                if ($value['quantity'] >= $value['old_quantity']) {
                                    $stock = floatval($value['quantity'] * $unit_ratio - $value['old_quantity'] * $unit_ratio);
                                    $this->inventoryModel->stock_upgrade($stock, $value['product']);
} else {
                                    $stock = floatval($value['old_quantity'] * $unit_ratio - $value['quantity'] * $unit_ratio);
                                    $this->inventoryModel->stock_upgrade($stock, $value['product'], false);
                                }
                            }
                        } else {
                            $unit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
                            $newunit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
                            $this->inventoryModel->stock_upgrade($value['old_quantity'] * $unit_ratio, $value['old_product_id'], false);
                            $this->inventoryModel->stock_upgrade($value['quantity'] * $newunit_ratio, $value['product']);
                        }
                    }
                    if (isset($value['old_bill_details_id'])) {
                        $this->db->table('id', $value['old_bill_details_id'])->where();
                        $this->db->table('purchase_bill_details', $array_product)->update();
                    } else {
                        $unit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
                        $this->inventoryModel->stock_upgrade($value['quantity'] * $unit_ratio, $value['product']);
                        $this->db->table('purchase_bill_details', $array_product)->insert();
                    }
                }
                $url = base_url('inventory/purchase');
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            }
            echo json_encode($array);
        }
    }
    // update existing product purchase bill
    public function purchase_edit($id)
    {
        if (!get_permission('product_purchase', 'is_edit')) {
            access_denied();
        }
        $this->data['purchaselist'] = $this->appLib->getTable('purchase_bill', ['t.id' => $id], true);
        $branchID = $this->data['purchaselist']['branch_id'];
        $this->data['branch_id'] = $branchID;
        $this->data['productlist'] = $this->inventoryModel->getProductByBranch($branchID);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/purchase_edit';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // delete product purchase bill from database
    public function purchase_delete($id)
    {
        if (!get_permission('product_purchase', 'is_delete')) {
            access_denied();
        }
        $getStock = $builder->getWhere('purchase_bill_details', ['purchase_bill_id' => $id])->result();
        foreach ($getStock as $value) {
    $unit_ratio = $db->table('product')->get('product')->row()->unit_ratio;
            $this->inventoryModel->stock_upgrade($value->quantity * $unit_ratio, $value->product_id, false);
}
        $this->db->table('id', $id)->where();
        $this->db->table('purchase_bill')->delete();
        $this->db->table('purchase_bill_id', $id)->where();
        $this->db->table('purchase_bill_details')->delete();
        //delete purchase payment history from database
        $this->db->table('purchase_bill_id', $id)->where();
        $this->db->table('purchase_payment_history')->delete();
    }
    public function purchase_bill($id = '')
    {
        if (!get_permission('purchase_payment', 'is_add')) {
            access_denied();
        }
        $this->data['billdata'] = $this->inventoryModel->get_invoice($id);
        if (empty($this->data['billdata'])) {
            access_denied();
        }
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['payvia_list'] = $this->appLib->getSelectList('payment_types');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/purchase_bill';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // purchase partially payment add
    public function add_payment()
    {
        if (!get_permission('purchase_payment', 'is_add')) {
            access_denied();
        }
        if ($this->request->getPost()) {
            $data = $this->request->getPost();
            $data['getbill'] = $db->table('purchase_bill')->get('purchase_bill')->row_array();
            $this->validation->setRules(['paid_date' => ["label" => 'Paid Date', "rules" => 'trim|required']]);
            $this->validation->setRules(['payment_amount' => ["label" => 'Payment Amount', "rules" => 'trim|required|numeric|greater_than[1]|callback_payment_validation']]);
            $this->validation->setRules(['pay_via' => ["label" => 'Pay Via', "rules" => 'trim|required']]);
            $this->validation->setRules(['attach_document' => ["label" => translate('attach_document'), "rules" => 'callback_fileHandleUpload[attach_document]']]);
            if ($this->validation->run() !== false) {
                $this->inventoryModel->save_payment($data);
                set_alert('success', translate('payment_successfull'));
                if (get_permission('purchase_payment', 'is_view')) {
                    session()->set_flashdata('active_tab', 2);
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // payment amount validation
    public function payment_validation($amount)
    {
        $bill_id = $this->request->getPost('purchase_bill_id');
        $due_amount = $db->table('purchase_bill')->get('purchase_bill')->row()->due;
        if ($amount <= $due_amount) {
            return true;
        } else {
            $this->validation->setRule("payment_validation", "Payment Amount Is More Than The Due Amount.");
            return false;
        }
    }
    /* store form validation rules */
    protected function store_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['store_name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['store_code' => ["label" => translate('store_code'), "rules" => 'trim|required']]);
        $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
    }
    /* add new store member */
    public function store()
    {
        // check access permission
        if (!get_permission('product_store', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('product_store', 'is_add')) {
                ajax_access_denied();
            }
            $this->store_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->inventoryModel->save_store($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['storelist'] = $this->appLib->getTable('product_store');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/store';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // update existing store member
    public function store_edit($id)
    {
        // check access permission
        if (!get_permission('product_store', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->store_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $this->inventoryModel->save_store($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => base_url('inventory/store')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['store'] = $this->appLib->getTable('product_store', ['t.id' => $id], true);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/store_edit';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // delete existing store
    public function store_delete($id)
    {
        // check access permission
        if (!get_permission('product_store', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('product_store')->delete();
    }
    /* sales form validation rules */
    protected function sales_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sale_to' => ["label" => translate('sale_to'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['bill_no' => ["label" => translate('bill_no'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['payment_amount' => ["label" => translate('payment_amount'), "rules" => 'trim|numeric|callback_sales_amount']]);
        $payment_amount = $this->request->getPost('payment_amount');
        if (!empty($payment_amount)) {
            $this->validation->setRules(['pay_via' => ["label" => translate('pay_via'), "rules" => 'trim|required']]);
        }
        $items = $this->request->getPost('sales');
        if (!empty($items)) {
            foreach ($items as $key => $value) {
    $this->validation->setRules(['sales[' . $key . '][category]' => ["label" => translate('category'), "rules" => 'trim|required']]);
                $this->validation->setRules(['sales[' . $key . '][product]' => ["label" => translate('product'), "rules" => 'trim|required']]);
                $this->validation->setRules(['sales[' . $key . '][quantity]' => ["label" => translate('quantity'), "rules" => 'trim|required']]);
}
        }
    }
    public function sales()
    {
        if (!get_permission('product_sales', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['saleslist'] = $this->inventoryModel->getSalesList();
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $branchID);
        $this->data['payvia_list'] = $this->appLib->getSelectList('payment_types');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/sales';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    public function sales_save()
    {
        if (!get_permission('product_sales', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->sales_validation();
            if ($this->validation->run() == false) {
                $msg = ['bill_no' => form_error('bill_no'), 'payment_amount' => form_error('payment_amount'), 'pay_via' => form_error('pay_via'), 'roleID' => form_error('role_id'), 'receiverID' => form_error('sale_to'), 'date' => form_error('date')];
                if (is_superadmin_loggedin()) {
                    $msg['branchID'] = form_error('branch_id');
                }
                $items = $this->request->getPost('sales');
                if (!empty($items)) {
                    foreach ($items as $key => $value) {
    $msg['category' . $key] = form_error('sales[' . $key . '][category]');
                        $msg['product' . $key] = form_error('sales[' . $key . '][product]');
                        $msg['quantity' . $key] = form_error('sales[' . $key . '][quantity]');
}
                }
                $array = ['status' => 'fail', 'url' => '', 'error' => $msg];
            } else {
                $data = $this->request->getPost();
                $this->inventoryModel->save_sales($data);
                $url = base_url('inventory/sales');
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            }
            echo json_encode($array);
        }
    }
    public function getSaleprice()
    {
        $id = $this->request->getPost('id');
        $price = $db->table('product')->get('product')->row_array();
        $unit = $db->table('product_unit')->get('product_unit')->row();
        echo json_encode(['price' => $price['salesprice'], 'unit' => $unit->name, 'availablestock' => translate('available_stock_quantity') . " : " . $price['available_stock']]);
    }
    public function saleItems()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $branchID);
        echo view('inventory/saleItems', $this->data, true);
    }
    public function getProductByCategory()
    {
        $category_id = $this->request->getPost('category_id');
        $selected_id = $this->request->getPost('selected_id');
        $branchID = $this->applicationModel->get_branch_id();
        $productlist = $db->table('product')->get('product')->result_array();
        $html = "<option value=''>" . translate('select') . "</option>";
        foreach ($productlist as $product) {
    $selected = $product['id'] == $selected_id ? 'selected' : '';
            $html .= "<option value='" . $product['id'] . "' " . $selected . ">" . $product['name'] . " (" . $product['code'] . ")</option>";
}
        echo $html;
    }
    // check valid received amount
    public function sales_amount($amount)
    {
        if (!empty($amount)) {
            $net_payable = $this->request->getPost('net_payable_amount');
            if ($net_payable < $amount) {
                $this->validation->setRule('sales_amount', "Invalid Received Amount.");
                return false;
            }
        }
        return true;
    }
    public function sales_invoice($id = '')
    {
        if (!get_permission('product_sales', 'is_view')) {
            access_denied();
        }
        $this->data['billdata'] = $this->inventoryModel->getSalesInvoice($id);
        if (empty($this->data['billdata'])) {
            access_denied();
        }
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['payvia_list'] = $this->appLib->getSelectList('payment_types');
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/sales_invoice';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    // sales partially payment add
    public function add_sales_payment()
    {
        if (!get_permission('sales_payment', 'is_add')) {
            access_denied();
        }
        if ($this->request->getPost()) {
            $data = $this->request->getPost();
            $data['getbill'] = $db->table('sales_bill')->get('sales_bill')->row_array();
            $this->validation->setRules(['paid_date' => ["label" => 'Paid Date', "rules" => 'trim|required']]);
            $this->validation->setRules(['payment_amount' => ["label" => 'Payment Amount', "rules" => 'trim|required|numeric|greater_than[1]|callback_sales_amount_validation']]);
            $this->validation->setRules(['pay_via' => ["label" => 'Pay Via', "rules" => 'trim|required']]);
            $this->validation->setRules(['attach_document' => ["label" => translate('attach_document'), "rules" => 'callback_fileHandleUpload[attach_document]']]);
            if ($this->validation->run() !== false) {
                $this->inventoryModel->save_sales_payment($data);
                set_alert('success', translate('payment_successfull'));
                if (get_permission('purchase_payment', 'is_view')) {
                    session()->set_flashdata('active_tab', 2);
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // payment amount validation
    public function sales_amount_validation($amount)
    {
        $bill_id = $this->request->getPost('sales_bill_id');
        $due_amount = $db->table('sales_bill')->get('sales_bill')->row()->due;
        if ($amount <= $due_amount) {
            return true;
        } else {
            $this->validation->setRule("sales_amount_validation", "Payment Amount Is More Than The Due Amount.");
            return false;
        }
    }
    // delete product sales bill from database
    public function sales_delete($id)
    {
        if (!get_permission('product_sales', 'is_delete')) {
            access_denied();
        }
        $getStock = $builder->getWhere('sales_bill_details', ['sales_bill_id' => $id])->result();
        foreach ($getStock as $value) {
    $this->inventoryModel->stock_upgrade($value->quantity, $value->product_id);
}
        $this->db->table('id', $id)->where();
        $this->db->table('sales_bill')->delete();
        $this->db->table('sales_bill_id', $id)->where();
        $this->db->table('sales_bill_details')->delete();
        $this->db->table('sales_bill_id', $id)->where();
        $this->db->table('sales_bill_details')->delete();
    }
    /* issue form validation rules */
    protected function issue_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sale_to' => ["label" => translate('sale_to'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date_of_issue' => ["label" => translate('date_of_issue'), "rules" => 'trim|required']]);
        $this->validation->setRules(['due_date' => ["label" => translate('due_date'), "rules" => 'trim|required']]);
        $items = $this->request->getPost('sales');
        if (!empty($items)) {
            foreach ($items as $key => $value) {
    $this->validation->setRules(['sales[' . $key . '][category]' => ["label" => translate('category'), "rules" => 'trim|required']]);
                $this->validation->setRules(['sales[' . $key . '][product]' => ["label" => translate('product'), "rules" => 'trim|required']]);
                $this->validation->setRules(['sales[' . $key . '][quantity]' => ["label" => translate('quantity'), "rules" => 'trim|required']]);
}
        }
    }
    public function issue()
    {
        if (!get_permission('product_issue', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['saleslist'] = $this->inventoryModel->getIssueList();
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $branchID);
        $this->data['title'] = translate('inventory');
        $this->data['sub_page'] = 'inventory/issue';
        $this->data['main_menu'] = 'inventory';
        echo view('layout/index', $this->data);
    }
    public function issue_save()
    {
        if (!get_permission('product_issue', 'is_add')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->issue_validation();
            if ($this->validation->run() == false) {
                $msg = ['date_of_issue' => form_error('date_of_issue'), 'due_date' => form_error('due_date'), 'roleID' => form_error('role_id'), 'receiverID' => form_error('sale_to')];
                if (is_superadmin_loggedin()) {
                    $msg['branchID'] = form_error('branch_id');
                }
                $items = $this->request->getPost('sales');
                if (!empty($items)) {
                    foreach ($items as $key => $value) {
    $msg['category' . $key] = form_error('sales[' . $key . '][category]');
                        $msg['product' . $key] = form_error('sales[' . $key . '][product]');
                        $msg['quantity' . $key] = form_error('sales[' . $key . '][quantity]');
}
                }
                $array = ['status' => 'fail', 'url' => '', 'error' => $msg];
            } else {
                $data = $this->request->getPost();
                $this->inventoryModel->save_issue($data);
                $url = base_url('inventory/issue');
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            }
            echo json_encode($array);
        }
    }
    public function issueItems()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $branchID);
        echo view('inventory/issueItems', $this->data, true);
    }
    // delete product issue from database
    public function issue_delete($id)
    {
        if (!get_permission('product_issue', 'is_delete')) {
            access_denied();
        }
        $getStock = $builder->getWhere('product_issues_details', ['issues_id' => $id])->result();
        foreach ($getStock as $value) {
    $this->inventoryModel->stock_upgrade($value->quantity, $value->product_id);
}
        $this->db->table('id', $id)->where();
        $this->db->table('product_issues')->delete();
        $this->db->table('issues_id', $id)->where();
        $this->db->table('product_issues_details')->delete();
    }
    public function returnProduct()
    {
        if ($_POST !== []) {
            if (!get_permission('product_issue', 'is_add')) {
                ajax_access_denied();
            }
            $id = $this->request->getPost('issue_id');
            $getStock = $builder->getWhere('product_issues_details', ['issues_id' => $id])->result();
            foreach ($getStock as $value) {
    $this->inventoryModel->stock_upgrade($value->quantity, $value->product_id);
}
            $this->db->table('id', $id)->where();
            $this->db->table('product_issues', ['status' => 1, 'return_date' => date("Y-m-d")])->update();
            set_alert('success', translate('information_has_been_saved_successfully'));
            $array = ['status' => 'success'];
            echo json_encode($array);
        }
    }
    public function getIssueDetails()
    {
        if (get_permission('product_issue', 'is_view')) {
            $this->data['salary_id'] = $this->request->getPost('id');
            echo view('inventory/issue_modalView', $this->data);
        }
    }
    // inventory reports
    public function stockreport()
    {
        if (!get_permission('inventory_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $category_id = $this->request->getPost('category_id');
            $this->data['results'] = $this->inventoryModel->get_stock_product_wisereport($branchID, $category_id);
        }
        $this->data['title'] = translate('inventory');
        $this->data['categorylist'] = $this->appLib->getSelectByBranch('product_category', $branchID, true);
        $this->data['sub_page'] = 'inventory/stockreport';
        $this->data['main_menu'] = 'inventory_report';
        echo view('layout/index', $this->data);
    }
    public function purchase_report()
    {
        if (!get_permission('inventory_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $supplier_id = $this->request->getPost('supplier_id');
            $payment_status = $this->request->getPost('payment_status');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->inventoryModel->get_purchase_report($branchID, $supplier_id, $payment_status, $start, $end);
        }
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        $this->data['title'] = translate('inventory');
        $this->data['supplierlist'] = $this->appLib->getSelectByBranch('product_supplier', $branchID, true);
        $this->data['sub_page'] = 'inventory/purchase_report';
        $this->data['main_menu'] = 'inventory_report';
        echo view('layout/index', $this->data);
    }
    public function sales_report()
    {
        if (!get_permission('inventory_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $supplier_id = $this->request->getPost('supplier_id');
            $payment_status = $this->request->getPost('payment_status');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->inventoryModel->get_sales_report($branchID, $payment_status, $start, $end);
        }
        $this->data['title'] = translate('inventory');
        $this->data['supplierlist'] = $this->appLib->getSelectByBranch('product_supplier', $branchID, true);
        $this->data['sub_page'] = 'inventory/sales_report';
        $this->data['main_menu'] = 'inventory_report';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function issues_report()
    {
        if (!get_permission('inventory_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $supplier_id = $this->request->getPost('supplier_id');
            $payment_status = $this->request->getPost('payment_status');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['daterange'] = $daterange;
            $this->data['results'] = $this->inventoryModel->getIssuesreport($branchID, $start, $end);
        }
        $this->data['title'] = translate('inventory');
        $this->data['supplierlist'] = $this->appLib->getSelectByBranch('product_supplier', $branchID, true);
        $this->data['sub_page'] = 'inventory/issues_report';
        $this->data['main_menu'] = 'inventory_report';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function getDataByBranch()
    {
        $html = "";
        $table = $this->request->getPost('table');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table($table)->get($table)->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                $html .= "<option value='all'>" . translate('all_select') . "</option>";
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getProductUnitDetails()
    {
        if (get_permission('product_unit', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $query = $builder->get('product_unit');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Leave.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Leave.php
 * @copyright : Reserved RamomCoder Team
 */
class Leave extends AdminController
 
{
    public $appLib;
    protected $db;

    /**
     * @var App\Models\LeaveModel
     */
    public $leave;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    public $input;
    public $emailModel;
    public $applicationModel;
    public $load;
    public $validation;
    public $upload;
    public function __construct()
    {

        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->leave = new \App\Models\LeaveModel();
        $this->email = new \App\Models\EmailModel();
        $this->leaveModel = new \App\Models\LeaveModel();
        $this->emailModel = new \App\Models\EmailModel();
    }
    public function index()
    {
        if (!get_permission('leave_manage', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['update'])) {
            if (!get_permission('leave_manage', 'is_add')) {
                access_denied();
            }
            $arrayLeave = ['approved_by' => get_loggedin_user_id(), 'status' => $this->request->getPost('status'), 'comments' => $this->request->getPost('comments')];
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            $this->db->table('leave_application', $arrayLeave)->update();
            // getting information for send email alert
            $getApplication = $this->db->table('leave_application')->where('id', $id)->get()->getRow();
            if ($getApplication->role_id == 7) {
                $getApplicant = $db->table('student')->get('student')->row();
            } else {
                $getApplicant = $db->table('staff')->get('staff')->row();
            }
            $arrayLeave['applicant'] = $getApplicant->name;
            $arrayLeave['email'] = $getApplicant->email;
            $arrayLeave['start_date'] = $getApplication->start_date;
            $arrayLeave['end_date'] = $getApplication->end_date;
            $arrayLeave['comments'] = $getApplication->comments;
            $this->emailModel->sentLeaveRequest($arrayLeave);
            set_alert('success', translate('information_has_been_updated_successfully'));
            return redirect()->to(base_url('leave'));
        }
        $where = [];
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $where['la.branch_id'] = $branch_id;
        }
        if (isset($_POST['search'])) {
            $user_role = $this->request->getPost('role_id');
            $where['la.role_id'] = $user_role;
        }
        $this->data['title'] = translate('leave');
        $this->data['sub_page'] = 'leave/index';
        $this->data['leavelist'] = $this->leaveModel->getLeaveList($where);
        $this->data['main_menu'] = 'leave';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    // get add leave modal
    public function getApprovelLeaveDetails()
    {
        if (get_permission('leave_manage', 'is_add')) {
            $this->data['leave_id'] = $this->request->getPost('id');
            echo view('leave/approvel_modalView', $this->data);
        }
    }
    public function save()
    {
        if ($_POST !== []) {
            if (!get_permission('leave_manage', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['user_role' => ["label" => translate('role'), "rules" => 'trim|required']]);
            $this->validation->setRules(['applicant_id' => ["label" => translate('applicant'), "rules" => 'trim|required']]);
            $this->validation->setRules(['leave_category' => ["label" => translate('leave_category'), "rules" => 'required|callback_leave_check']]);
            $this->validation->setRules(['daterange' => ["label" => translate('leave_date'), "rules" => 'trim|required|callback_date_check']]);
            $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_handle_upload']]);
            if ($this->validation->run() !== false) {
                $applicant_id = $this->request->getPost('applicant_id');
                $role_id = $this->request->getPost('user_role');
                $leave_type_id = $this->request->getPost('leave_category');
                $branch_id = $this->applicationModel->get_branch_id();
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start_date = date("Y-m-d", strtotime($daterange[0]));
                $end_date = date("Y-m-d", strtotime($daterange[1]));
                $reason = $this->request->getPost('reason');
                $comments = $this->request->getPost('comments');
                $apply_date = date("Y-m-d H:i:s");
                $datetime1 = new DateTime($start_date);
                $datetime2 = new DateTime($end_date);
                $leave_days = $datetime2->diff($datetime1)->format("%a") + 1;
                $orig_file_name = '';
                $enc_file_name = '';
                // upload attachment file
                if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
                    $config['upload_path'] = './uploads/attachments/leave/';
                    $config['allowed_types'] = "*";
                    $config['max_size'] = '2024';
                    $config['encrypt_name'] = true;
                    $file = $this->request->getFile('attachment_file'); $file->initialize($config);
                    $file = $this->request->getFile('attachment_file'); $file->do_upload("attachment_file");
                    $orig_file_name = $file = $this->request->getFile('attachment_file'); $file->data('orig_name');
                    $enc_file_name = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
                }
                $arrayData = ['user_id' => $applicant_id, 'role_id' => $role_id, 'branch_id' => $branch_id, 'session_id' => get_session_id(), 'category_id' => $leave_type_id, 'reason' => $reason, 'start_date' => date("Y-m-d", strtotime($start_date)), 'end_date' => date("Y-m-d", strtotime($end_date)), 'leave_days' => $leave_days, 'status' => 2, 'orig_file_name' => $orig_file_name, 'enc_file_name' => $enc_file_name, 'apply_date' => $apply_date, 'approved_by' => get_loggedin_user_id(), 'comments' => $comments];
                $this->db->table('leave_application', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('leave');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function delete($id = '')
    {
        if (get_permission('leave_manage', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('leave_application')->delete();
        }
    }
    public function date_check($daterange)
    {
        $daterange = explode(' - ', (string) $daterange);
        $start_date = date("Y-m-d", strtotime($daterange[0]));
        $end_date = date("Y-m-d", strtotime($daterange[1]));
        $today = date('Y-m-d');
        if ($today === $start_date) {
            $this->validation->setRule('date_check', "You can not leave the current day.");
            return false;
        }
        if ($this->request->getPost('applicant_id')) {
            $applicant_id = $this->request->getPost('applicant_id');
            $role_id = $this->request->getPost('user_role');
        } else {
            $applicant_id = get_loggedin_user_id();
            $role_id = loggedin_role_id();
        }
        $getUserLeaves = $builder->getWhere('leave_application', ['user_id' => $applicant_id, 'role_id' => $role_id])->result();
        if (!empty($getUserLeaves)) {
            foreach ($getUserLeaves as $user_leave) {
    $get_dates = $this->user_leave_days($user_leave->start_date, $user_leave->end_date);
                $result_start = in_array($start_date, $get_dates);
                $result_end = in_array($end_date, $get_dates);
                if ($result_start || $result_end) {
                    $this->validation->setRule('date_check', 'Already have leave in the selected time.');
                    return false;
}
            }
        }
        return true;
    }
    public function leave_check($type_id, string $fields, array $data)
    {
        if (!empty($type_id)) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start_date = new DateTime(date("Y-m-d", strtotime($daterange[0])));
            $end_date = new DateTime(date("Y-m-d", strtotime($daterange[1])));
    
            if ($this->request->getPost('applicant_id')) {
                $applicant_id = $this->request->getPost('applicant_id');
                $role_id = $this->request->getPost('user_role');
            } else {
                $applicant_id = get_loggedin_user_id(); // Ensure this function is defined or adapt as necessary
                $role_id = loggedin_role_id(); // Ensure this function is defined or adapt as necessary
            }
    
            if ($end_date > $start_date) {
                $db = db_connect(); // Get database connection
                $leave_total = get_type_name_by_id('leave_category', $type_id, 'days'); // Ensure this function is defined or adapt as necessary
                $total_spent = $db->table('leave_application')
                                  ->where('user_id', $applicant_id)
                                  ->where('role_id', $role_id)
                                  ->selectSum('total_days')
                                  ->get()
                                  ->getRow()
                                  ->total_days;
    
                $leave_days = $end_date->diff($start_date)->format("%a") + 1;
                $left_leave = $leave_total - $total_spent;
    
                if ($left_leave < $leave_days) {
                    $this->validator->setError('daterange', "Applied for {$leave_days} days, maximum allowed is {$left_leave} days.");
                    return false;
                } else {
                    return true;
                }
            } else {
                $this->validator->setError('daterange', "Select a valid date range.");
                return false;
            }
        }
        return true;
    }
    
    public function getRequestDetails()
    {
        $this->data['leave_id'] = $this->request->getPost('id');
        echo view('leave/modal_request_details', $this->data);
    }
    public function request()
    {
        // check access permission
        if (!get_permission('leave_request', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['save'])) {
            if (!get_permission('leave_request', 'is_add')) {
                access_denied();
            }
            $this->validation->setRules(['leave_category' => ["label" => translate('leave_category'), "rules" => 'required|callback_leave_check']]);
            $this->validation->setRules(['daterange' => ["label" => translate('leave_date'), "rules" => 'trim|required|callback_date_check']]);
            $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_handle_upload']]);
            if ($this->validation->run() !== false) {
                $leave_type_id = $this->request->getPost('leave_category');
                $branch_id = $this->applicationModel->get_branch_id();
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start_date = date("Y-m-d", strtotime($daterange[0]));
                $end_date = date("Y-m-d", strtotime($daterange[1]));
                $reason = $this->request->getPost('reason');
                $apply_date = date("Y-m-d H:i:s");
                $datetime1 = new DateTime($start_date);
                $datetime2 = new DateTime($end_date);
                $leave_days = $datetime2->diff($datetime1)->format("%a") + 1;
                $orig_file_name = '';
                $enc_file_name = '';
                // upload attachment file
                if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
                    $config['upload_path'] = './uploads/attachments/leave/';
                    $config['allowed_types'] = "*";
                    $config['max_size'] = '2024';
                    $config['encrypt_name'] = true;
                    $file = $this->request->getFile('attachment_file'); $file->initialize($config);
                    $file = $this->request->getFile('attachment_file'); $file->do_upload("attachment_file");
                    $orig_file_name = $file = $this->request->getFile('attachment_file'); $file->data('orig_name');
                    $enc_file_name = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
                }
                $arrayData = ['user_id' => get_loggedin_user_id(), 'role_id' => loggedin_role_id(), 'session_id' => get_session_id(), 'category_id' => $leave_type_id, 'reason' => $reason, 'branch_id' => $branch_id, 'start_date' => date("Y-m-d", strtotime($start_date)), 'end_date' => date("Y-m-d", strtotime($end_date)), 'leave_days' => $leave_days, 'status' => 1, 'orig_file_name' => $orig_file_name, 'enc_file_name' => $enc_file_name, 'apply_date' => $apply_date];
                $this->db->table('leave_application', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('leave/request'));
            }
        }
        $where = ['la.user_id' => get_loggedin_user_id(), 'la.role_id' => loggedin_role_id()];
        $this->data['leavelist'] = $this->leaveModel->getLeaveList($where);
        $this->data['title'] = translate('leaves');
        $this->data['sub_page'] = 'leave/request';
        $this->data['main_menu'] = 'leave';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function request_delete($id = '')
    {
        $where = ['status' => 1, 'user_id' => get_loggedin_user_id(), 'role_id' => loggedin_role_id(), 'id' => $id];
        $app = $this->db->table('leave_application')->where($where)->get()->getRowArray();
        $file_name = FCPATH . 'uploads/attachments/leave/' . $app['enc_file_name'];
        if (file_exists($file_name)) {
            unlink($file_name);
        }
        $this->db->table($where)->delete('leave_application')->where();
    }
    /* category form validation rules */
    protected function category_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['leave_category' => ["label" => translate('leave_category'), "rules" => 'trim|required|callback_unique_category']]);
        $this->validation->setRules(['leave_days' => ["label" => translate('leave_days'), "rules" => 'trim|required']]);
        $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'trim|required']]);
    }
    // leave category information are prepared and stored in the database here
    public function category()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('leave_category', 'is_add')) {
                access_denied();
            }
            $this->category_validation();
            if ($this->validation->run() !== false) {
                $arrayData = ['branch_id' => $this->applicationModel->get_branch_id(), 'name' => $this->request->getPost('leave_category'), 'role_id' => $this->request->getPost('role_id'), 'days' => $this->request->getPost('leave_days')];
                $this->db->table('leave_category', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('leave/category'));
            }
        }
        $this->data['title'] = translate('leave');
        $this->data['category'] = $this->appLib->getTable('leave_category');
        $this->data['sub_page'] = 'leave/category';
        $this->data['main_menu'] = 'leave';
        echo view('layout/index', $this->data);
    }
    public function category_edit()
    {
        if (!get_permission('leave_category', 'is_edit')) {
            ajax_access_denied();
        }
        $this->category_validation();
        if ($this->validation->run() !== false) {
            $category_id = $this->request->getPost('category_id');
            $arrayData = ['branch_id' => $this->applicationModel->get_branch_id(), 'name' => $this->request->getPost('leave_category'), 'role_id' => $this->request->getPost('role_id'), 'days' => $this->request->getPost('leave_days')];
            $this->db->table('id', $category_id)->where();
            $this->db->table('leave_category', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function category_delete($id = '')
    {
        if (!get_permission('leave_category', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('leave_category')->delete();
    }
    public function getCategory()
    {
        $html = "";
        $roleID = $this->request->getPost("role_id");
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($roleID) && !empty($branchID)) {
            $query = $db->table('leave_category')->get('leave_category');
            if ($query->num_rows() != 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                $sections = $query->getResultArray();
                foreach ($sections as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . ' (' . $row['days'] . ')' . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select') . '</option>';
        }
        echo $html;
    }
    // unique valid name verification is done here
    public function unique_category($name)
    {
        $category_id = $this->request->getPost('category_id');
        $role_id = $this->request->getPost('role_id');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($category_id)) {
            $this->db->where_not_in('id', $category_id);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('role_id', $role_id)->where();
        $this->db->table('branch_id', $branch_id)->where();
        $query = $builder->get('leave_category');
        if ($query->num_rows() > 0) {
            if (!empty($category_id)) {
                set_alert('error', "The Category name are already used");
            } else {
                $this->validation->setRule("unique_category", translate('already_taken'));
            }
            return false;
        } else {
            return true;
        }
    }
    public function handle_upload()
    {
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $file_type = $_FILES["attachment_file"]['type'];
            $file_size = $_FILES["attachment_file"]["size"];
            $file_name = $_FILES["attachment_file"]["name"];
            $allowedExts = ['pdf', 'doc', 'xls', 'docx', 'xlsx', 'jpg', 'jpeg', 'png', 'gif', 'bmp'];
            $upload_size = 2097152;
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES['attachment_file']['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('handle_upload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
                if ($file_size > $upload_size) {
                    $this->validation->setRule('handle_upload', translate('file_size_shoud_be_less_than') . " " . $upload_size / 1024 . " KB");
                    return false;
                }
            } else {
                $this->validation->setRule('handle_upload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        } else {
            return true;
        }
    }
    public function download($id = '', $file = '')
    {
        if (!empty($id) && !empty($file)) {
            $builder->select('orig_file_name,enc_file_name');
            $this->db->table('id', $id)->where();
            $leave = $builder->get('leave_application')->row();
            if ($file != $leave->enc_file_name) {
                access_denied();
            }
            helper('download');
            $fileData = file_get_contents('./uploads/attachments/leave/' . $leave->enc_file_name);
            return $this->response->download($leave->orig_file_name, $fileData);
        }
    }
    public function user_leave_days($start_date, $end_date)
    {
        $dates = [];
        $current = strtotime((string) $start_date);
        $end_date = strtotime((string) $end_date);
        while ($current <= $end_date) {
            $dates[] = date('Y-m-d', $current);
            $current = strtotime('+1 day', $current);
        }
        return $dates;
    }
    public function reports()
    {
        if (!get_permission('leave_reports', 'is_view')) {
            access_denied();
        }
        $where = [];
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $where['la.branch_id'] = $branch_id;
        }
        if (isset($_POST['search'])) {
            $userRole = $this->request->getPost('role_id');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $where['la.start_date >='] = $start;
            $where['la.start_date <='] = $end;
            $where['la.role_id'] = $userRole;
            $this->data['leavelist'] = $this->leaveModel->getLeaveList($where);
        }
        $this->data['title'] = translate('leave');
        $this->data['sub_page'] = 'leave/reports';
        $this->data['main_menu'] = 'leave_reports';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Library.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Library.php
 * @copyright : Reserved RamomCoder Team
 */
class Library extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\LibraryModel
     */
    public $library;
    public $validation;
    public $input;
    public $libraryModel;
    public $applicationModel;
    public $load;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->library = new \App\Models\LibraryModel();
    }
    public function index()
    {
        if (is_loggedin()) {
            return redirect()->to(base_url('dashboard'));
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    /* book form validation rules */
    protected function book_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['book_title' => ["label" => translate('book_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['purchase_date' => ["label" => translate('purchase_date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['category_id' => ["label" => translate('book_category'), "rules" => 'trim|required']]);
        $this->validation->setRules(['publisher' => ["label" => translate('publisher'), "rules" => 'trim|required']]);
        $this->validation->setRules(['price' => ["label" => translate('price'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['total_stock' => ["label" => translate('total_stock'), "rules" => 'trim|required']]);
    }
    /* category form validation rules */
    protected function category_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('category'), "rules" => 'trim|required|callback_unique_category']]);
    }
    // book page
    public function book()
    {
        if (!get_permission('book', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('book', 'is_add')) {
                ajax_access_denied();
            }
            $this->book_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all route information in the database file
                $this->libraryModel->book_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('library/book');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['booklist'] = $this->appLib->getTable('book');
        $this->data['title'] = translate('books');
        $this->data['sub_page'] = 'library/book';
        $this->data['main_menu'] = 'library';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* the book information is updated here */
    public function book_edit($id = '')
    {
        if (!get_permission('book', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->book_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all route information in the database file
                $this->libraryModel->book_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('library/book');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['book'] = $this->appLib->getTable('book', ['t.id' => $id], true);
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['booklist'] = $this->appLib->getTable('book');
        $this->data['title'] = translate('books_entry');
        $this->data['sub_page'] = 'library/book_edit';
        $this->data['main_menu'] = 'library_book';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function book_delete($id = '')
    {
        if (get_permission('book', 'is_delete')) {
            $file = 'uploads/book_cover/' . get_type_name_by_id('book', $id, 'cover');
            if (file_exists($file)) {
                @unlink($file);
            }
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('book')->delete();
        }
    }
    // category information are prepared and stored in the database here
    public function category()
    {
        if (isset($_POST['save'])) {
            if (!get_permission('book_category', 'is_add')) {
                access_denied();
            }
            $this->category_validation();
            if ($this->validation->run() !== false) {
                //save hostel type information in the database file
                $this->libraryModel->category_save($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('library/category'));
            }
        }
        $this->data['categorylist'] = $this->appLib->getTable('book_category');
        $this->data['title'] = translate('category');
        $this->data['sub_page'] = 'library/category';
        $this->data['main_menu'] = 'library';
        echo view('layout/index', $this->data);
    }
    public function category_edit()
    {
        if ($_POST !== []) {
            if (!get_permission('book_category', 'is_edit')) {
                ajax_access_denied();
            }
            $this->category_validation();
            if ($this->validation->run() !== false) {
                //update book category information in the database file
                $this->libraryModel->category_save($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('library/category');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function category_delete($id)
    {
        if (get_permission('book_category', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('book_category')->delete();
        }
    }
    /* book issue information are prepared and stored in the database here */
    public function book_manage($action = '', $id = '')
    {
        if (!get_permission('book_manage', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['update'])) {
            if (!get_permission('book_manage', 'is_add')) {
                access_denied();
            }
            $arrayLeave = ['issued_by' => get_loggedin_user_id(), 'status' => $this->request->getPost('status')];
            $id = $this->request->getPost('id');
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('book_issues', $arrayLeave)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            redirect(current_url());
        }
        if ($action == "delete") {
            $this->db->table('id', $id)->where();
            $this->db->table('book_issues')->delete();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['booklist'] = $this->libraryModel->getBookIssueList();
        $this->data['title'] = translate('book_manage');
        $this->data['sub_page'] = 'library/book_manage';
        $this->data['main_menu'] = 'library';
        echo view('layout/index', $this->data);
    }
    public function bookIssued()
    {
        if ($_POST !== []) {
            if (!get_permission('book_manage', 'is_add')) {
                ajax_access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['category_id' => ["label" => translate('book_category'), "rules" => 'required']]);
            $this->validation->setRules(['book_id' => ["label" => translate('book_title'), "rules" => 'trim|required|callback_validation_stock']]);
            $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'required']]);
            $roleID = $this->request->getPost('role_id');
            if ($roleID == 7) {
                $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['user_id' => ["label" => translate('user_name'), "rules" => 'required']]);
            $this->validation->setRules(['date_of_expiry' => ["label" => 'Date Of Expiry', "rules" => 'trim|required|callback_validation_date']]);
            if ($this->validation->run() !== false) {
                $data = $this->request->getPost();
                //save book issued information in the database file
                $this->libraryModel->issued_save($data);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('library/book_manage');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function issued_book_delete($id)
    {
        if (get_permission('book_manage', 'is_delete')) {
            $status = get_type_name_by_id('book_issues', $id, 'status');
            if ($status == 2 || $status == 3) {
                if (!is_superadmin_loggedin()) {
                    $this->db->table('branch_id', get_loggedin_branch_id())->where();
                }
                $this->db->table('id', $id)->where();
                $this->db->table('book_issues')->delete();
            }
        }
    }
    public function request()
    {
        // check access permission
        if (!get_permission('book_request', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('book_request', 'is_add')) {
                access_denied();
            }
            $this->validation->setRules(['book_id' => ["label" => translate('book_title'), "rules" => 'required|callback_validation_stock']]);
            $this->validation->setRules(['date_of_issue' => ["label" => translate('date_of_issue'), "rules" => 'trim|required']]);
            $this->validation->setRules(['date_of_expiry' => ["label" => translate('date_of_expiry'), "rules" => 'trim|required|callback_validation_date']]);
            if ($this->validation->run() !== false) {
                $arrayIssue = ['branch_id' => get_loggedin_branch_id(), 'book_id' => $this->request->getPost('book_id'), 'user_id' => get_loggedin_user_id(), 'role_id' => loggedin_role_id(), 'date_of_issue' => date("Y-m-d", strtotime((string) $this->request->getPost('date_of_issue'))), 'date_of_expiry' => date("Y-m-d", strtotime((string) $this->request->getPost('date_of_expiry'))), 'issued_by' => get_loggedin_user_id(), 'status' => 0, 'session_id' => get_session_id()];
                $this->db->table('book_issues', $arrayIssue)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('library/request');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('library');
        $this->data['sub_page'] = 'library/request';
        $this->data['main_menu'] = 'library';
        echo view('layout/index', $this->data);
    }
    public function request_delete($id)
    {
        if (get_permission('book_request', 'is_delete')) {
            $status = get_type_name_by_id('book_issues', $id, 'status');
            if ($status == 0) {
                $this->db->table('id', $id)->where();
                $this->db->table('user_id', get_loggedin_user_id())->where();
                $this->db->table('role_id', loggedin_role_id())->where();
                $this->db->table('book_issues')->delete();
            }
        }
    }
    // validation book stock
    public function validation_stock($book_id)
    {
        $query = $db->table('book')->get('book')->row_array();
        $stock = $query['total_stock'];
        $issued = $query['issued_copies'];
        if ($stock == 0 || $issued >= $stock) {
            $this->validation->setRule("validation_stock", translate('the_book_is_not_available_in_stock'));
            return false;
        } else {
            return true;
        }
    }
    public function getBookApprovelDetails()
    {
        if (get_permission('book_manage', 'is_add')) {
            $this->data['book_id'] = $this->request->getPost('id');
            echo view('library/bookDetailsModal', $this->data);
        }
    }
    public function bookReturn()
    {
        if ($_POST !== []) {
            if (!get_permission('book_manage', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required|callback_return_validation']]);
            $this->validation->setRules(['fine_amount' => ["label" => translate('role'), "rules" => 'trim|numeric']]);
            if ($this->validation->run() !== false) {
                $id = $this->request->getPost('issue_id');
                $getData = $builder->getWhere('book_issues', ['id' => $id])->row_array();
                $type = $this->request->getPost('type');
                $date = strtotime((string) $this->request->getPost('date'));
                if ($type == '1') {
                    // update book issued copies value
                    $this->db->set('issued_copies', 'issued_copies-1', false);
                    $this->db->table('id', $getData['book_id'])->where();
                    $this->db->table('book')->update();
                    $arrayReturn = ['return_by' => get_loggedin_user_id(), 'status' => 3, 'fine_amount' => $this->request->getPost('fine_amount'), 'return_date' => date("Y-m-d", $date)];
                } elseif ($type == '2') {
                    $arrayReturn = ['fine_amount' => $this->request->getPost('fine_amount'), 'date_of_expiry' => date("Y-m-d", $date)];
                }
                if (!is_superadmin_loggedin()) {
                    $this->db->table('branch_id', get_loggedin_branch_id())->where();
                }
                $this->db->table('id', $id)->where();
                $this->db->table('book_issues', $arrayReturn)->update();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('library/book_manage');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // validation date
    public function validation_date($date)
    {
        if ($date) {
            $date = strtotime((string) $date);
            $today = strtotime(date('Y-m-d'));
            if ($today >= $date) {
                $this->validation->setRule("validation_date", translate('today_or_the_previous_day_can_not_be_issued'));
                return false;
            } else {
                return true;
            }
        }
        return null;
    }
    public function return_validation($date)
    {
        $date = strtotime((string) $date);
        $id = $this->request->getPost('issue_id');
        $get = $builder->select('date_of_issue,date_of_expiry')->get_where('book_issues', ['id' => $id])->row_array();
        if (strtotime((string) $get['date_of_issue']) >= $date) {
            $this->validation->setRule("return_validation", translate('invalid_return_date_entered'));
            return false;
        } else {
            return true;
        }
    }
    /* book category exists validation */
    public function unique_category($name)
    {
        $category_id = $this->request->getPost('category_id');
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($category_id)) {
            $this->db->where_not_in('id', $category_id);
        }
        $this->db->table('name', $name)->where();
        $this->db->table('branch_id', $branch_id)->where();
        $query = $builder->get('book_category');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_category", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    /* get book list based on the category */
    public function getBooksByCategory()
    {
        $categoryID = $this->request->getPost('category_id');
        $html = "";
        if (!empty($categoryID)) {
            $books = $builder->select('id,title')->get_where('book', ['category_id' => $categoryID])->result_array();
            if (count($books) > 0) {
                $html .= '<option value = "">' . translate('select') . '</option>';
                foreach ($books as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['title'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_category_first') . '</option>';
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Live_class.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\LiveClassModel;
use App\Models\SmsModel;
/**
 * @package : Ramom school management system
 * @version : 6.2
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Live_class.php
 * @copyright : Reserved RamomCoder Team
 */
class Live_class extends AdminController
{
    public $zoomLib;
    public $bigbluebuttonLib;
    /**
     * @var App\Models\LiveClassModel
     */
    public $liveClass;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $validation;
    public $input;
    public $applicationModel;
    public $live_classModel;
    public $load;
    public $session;
    public $zoom_lib;
    public $smsModel;
    public $db;
    public $appLib;
    public $bigbluebutton_lib;
    public function __construct()
    {
        parent::__construct();
        
        
        
        $this->zoomLib = service('zoomLib');
        $this->bigbluebuttonLib = service('bigbluebuttonLib');
        $this->appLib = service('appLib'); 
        $this->liveClass = new \App\Models\LiveClassModel();
        $this->sms = new \App\Models\SmsModel();
    }
    /* live class form validation rules */
    protected function zoom_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['live_class_method' => ["label" => translate('live_class_method'), "rules" => 'trim|required']]);
        $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
        $this->validation->setRules(['section[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
        $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['time_start' => ["label" => translate('time_start'), "rules" => 'trim|required|callback_timeslot_validation']]);
        $this->validation->setRules(['time_end' => ["label" => translate('time_end'), "rules" => 'trim|required']]);
        $this->validation->setRules(['duration' => ["label" => translate('duration'), "rules" => 'trim|required']]);
    }
    public function index()
    {
        if (!get_permission('live_class', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('live_class', 'is_add')) {
            $method = $this->request->getPost('live_class_method');
            $post = $this->request->getPost();
            $this->zoom_validation();
            if ($method == 2) {
                $this->validation->setRules(['meeting_id' => ["label" => translate('meeting_id'), "rules" => 'trim|required']]);
            }
            if ($method == 3) {
                $this->validation->setRules(['gmeet_url' => ["label" => "Gmeet URL", "rules" => 'trim|required']]);
            }
            if ($this->validation->run() !== false) {
                // save all route information in the database file
                $branchID = $this->applicationModel->get_branch_id();
                if ($method == 1) {
                    $getConfig = $this->live_classModel->get('live_class_config', ['branch_id' => $branchID], true);
                    $api_type = 0;
                    if (is_superadmin_loggedin()) {
                        $api_keys = ['zoom_api_key' => $getConfig['zoom_api_key'], 'zoom_api_secret' => $getConfig['zoom_api_secret']];
                    } else {
                        $getSelfAPI = $this->live_classModel->get('zoom_own_api', ['user_type' => 1, 'user_id' => get_loggedin_user_id()], true);
                        if ($getSelfAPI['zoom_api_key'] == '' || $getSelfAPI['zoom_api_secret'] == '' || $getConfig['staff_api_credential'] == 0) {
                            $api_keys = ['zoom_api_key' => $getConfig['zoom_api_key'], 'zoom_api_secret' => $getConfig['zoom_api_secret']];
                        } else {
                            $api_type = 1;
                            $api_keys = ['zoom_api_key' => $getSelfAPI['zoom_api_key'], 'zoom_api_secret' => $getSelfAPI['zoom_api_secret']];
                        }
                    }
                    $this->Zoom_lib = service('zoomLib', $api_keys);
                    $arrayZoom = ['live_class_method' => $method, 'title' => $post['title'], 'meeting_id' => "", 'meeting_password' => "", 'own_api_key' => $api_type, 'duration' => $post['duration'], 'bbb' => "", 'class_id' => $post['class_id'], 'section_id' => json_encode($this->request->getPost('section')), 'remarks' => $post['remarks'], 'date' => date("Y-m-d", strtotime((string) $post['date'])), 'start_time' => date("H:i", strtotime((string) $post['time_start'])), 'end_time' => date("H:i", strtotime((string) $post['time_end'])), 'created_by' => get_loggedin_user_id(), 'branch_id' => $branchID, 'setting' => ['timezone' => $this->data['global_config']['timezone'], 'password' => $post["zoom_password"], 'join_before_host' => $this->request->getPost("join_before_host"), 'host_video' => $this->request->getPost("host_video"), 'participant_video' => $this->request->getPost("participant_video"), 'option_mute_participants' => $this->request->getPost("option_mute_participants")]];
                    $access_token = session()->get("zoom_access_token");
                    if (empty($access_token)) {
                        set_alert('error', "Access Token not generated");
                        $array = ['status' => 'success'];
                        echo json_encode($array);
                        exit;
                    }
                    $response = $this->zoom_lib->createMeeting($arrayZoom, $access_token);
                    session()->set("zoom_access_token", "");
                    if (!empty($response->code)) {
                        set_alert('error', "The Token Signature resulted invalid when verified using the algorithm");
                        $array = ['status' => 'success'];
                        echo json_encode($array);
                        exit;
                    }
                    $arrayZoom['meeting_id'] = $response->id;
                    $arrayZoom['meeting_password'] = $response->encrypted_password;
                    $arrayZoom['bbb'] = json_encode(['join_url' => $response->join_url, 'start_url' => $response->start_url, 'password' => $response->password]);
                    unset($arrayZoom['setting']);
                    $this->live_classModel->save($arrayZoom);
                } elseif ($method == 2) {
                    $this->live_classModel->bbb_class_save($post);
                } elseif ($method == 3) {
                    $this->live_classModel->gmeet_save($post);
                }
                //send live class sms notification
                if (isset($post['send_notification_sms'])) {
                    foreach ($post['section'] as $value) {
    $stuList = $this->applicationModel->getStudentListByClassSection($post['class_id'], $value, $branchID);
                        foreach ($stuList as $row) {
                            $row['date_of_live_class'] = $post['date'];
                            $row['start_time'] = date("h:i A", strtotime((string) $post['time_start']));
                            $row['end_time'] = date("h:i A", strtotime((string) $post['time_end']));
                            $row['host_by'] = session()->get('name');
                            $this->smsModel->sendLiveClass($row);
}
                    }
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['liveClass'] = $this->live_classModel->getList();
        $this->data['title'] = translate('live_class_rooms');
        $this->data['sub_page'] = 'live_class/index';
        $this->data['main_menu'] = 'live_class';
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('live_class', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->award_validation();
            if ($this->validation->run() !== false) {
                // SAVE ALL ROUTE INFORMATION IN THE DATABASE FILE
                $this->live_classModel->save($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('live_class');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['live'] = $this->appLib->getTable('live_class', ['t.id' => $id], true);
        $this->data['title'] = translate('live_class');
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        $this->data['sub_page'] = 'live_class/edit';
        $this->data['main_menu'] = 'live_class_rooms';
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        if (get_permission('live_class', 'is_delete')) {
            $get = $this->live_classModel->get('live_class', ['id' => $id], true, true);
            if ($get['live_class_method'] == 1) {
                if ($get['own_api_key'] == 1) {
                    $getSelfAPI = $this->live_classModel->get('zoom_own_api', ['user_type' => 1, 'user_id' => $get['created_by']], true);
                    if ($getSelfAPI['zoom_api_key'] == '' || $getSelfAPI['zoom_api_secret'] == '') {
                        set_alert('error', "You created by your own zoom account, API Credential is missing.");
                        exit;
                    } else {
                        $api_keys = ['zoom_api_key' => $getSelfAPI['zoom_api_key'], 'zoom_api_secret' => $getSelfAPI['zoom_api_secret']];
                    }
                } else {
                    $getConfig = $this->live_classModel->get('live_class_config', ['branch_id' => $get['branch_id']], true);
                    $api_keys = ['zoom_api_key' => $getConfig['zoom_api_key'], 'zoom_api_secret' => $getConfig['zoom_api_secret']];
                }
                $this->Zoom_lib = service('zoomLib', $api_keys);
                $access_token = session()->get("zoom_access_token");
                $response = $this->zoom_lib->deleteMeeting($get['meeting_id'], $access_token);
                if (!is_superadmin_loggedin()) {
                    $this->db->table('branch_id', get_loggedin_branch_id())->where();
                }
                $this->db->table('id', $id)->where();
                $this->db->table('live_class')->delete();
            } else {
                $this->db->table('id', $id)->where();
                $this->db->table('live_class')->delete();
            }
        }
    }
    public function zoom_own_api()
    {
        if ($_POST !== []) {
            if (!get_permission('live_class', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['zoom_api_key' => ["label" => 'Zoom Api Key', "rules" => 'trim|required']]);
            $this->validation->setRules(['zoom_api_secret' => ["label" => 'Zoom Api Secret', "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $arrayData = ['user_type' => loggedin_role_id() !== 7 ? 1 : 2, 'user_id' => get_loggedin_user_id(), 'zoom_api_key' => $this->request->getPost('zoom_api_key'), 'zoom_api_secret' => $this->request->getPost('zoom_api_secret')];
                $api_id = $this->request->getPost('api_id');
                if (empty($api_id)) {
                    $this->db->table('zoom_own_api', $arrayData)->insert();
                } else {
                    $this->db->table('id', $api_id)->where();
                    $this->db->table('zoom_own_api', $arrayData)->update();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    public function hostModal()
    {
        if (get_permission('live_class', 'is_add')) {
            $this->data['meetingID'] = $this->request->getPost('meeting_id');
            echo view('live_class/hostModal', $this->data, true);
        }
    }
    public function zoom_meeting_start()
    {
        if (!get_permission('live_class', 'is_add')) {
            access_denied();
        }
        echo view('live_class/host', $this->data);
    }
    public function bbb_meeting_start()
    {
        if (!get_permission('live_class', 'is_add')) {
            access_denied();
        }
        $meetingID = $this->request->getGet('meeting_id', true);
        $liveID = $this->request->getGet('live_id', true);
        $getMeeting = $this->live_classModel->get('live_class', ['id' => $liveID, 'meeting_id' => $meetingID], true);
        $getStaff = $this->appLib->get_table('staff', get_loggedin_user_id(), true);
        if (empty($getMeeting)) {
            set_alert('error', translate('Meeting Not Found.'));
            return redirect()->to(base_url('live_class'));
        }
        $bbb_config = json_decode((string) $getMeeting['bbb'], true);
        // get BBB api config
        $getConfig = $this->live_classModel->get('live_class_config', ['branch_id' => $getMeeting['branch_id']], true);
        $api_keys = ['bbb_security_salt' => $getConfig['bbb_salt_key'], 'bbb_server_base_url' => $getConfig['bbb_server_base_url']];
        $this->Bigbluebutton_lib = service('bigbluebuttonLib', $api_keys);
        $arrayBBB = ['meeting_id' => $getMeeting['meeting_id'], 'title' => $getMeeting['title'], 'duration' => $getMeeting['duration'], 'moderator_password' => $bbb_config['moderator_password'], 'attendee_password' => $bbb_config['attendee_password'], 'max_participants' => $bbb_config['max_participants'], 'mute_on_start' => $bbb_config['mute_on_start'], 'set_record' => $bbb_config['mute_on_start'], 'presen_name' => $getStaff['name']];
        $response = $this->bigbluebutton_lib->createMeeting($arrayBBB);
        if ($response == false) {
            set_alert('error', "Can\\'t create room! please contact our administrator.");
            return redirect()->to(base_url('live_class'));
        } else {
            redirect($response);
        }
    }
    public function bbb_callback()
    {
        if (is_student_loggedin()) {
            return redirect()->to(base_url('userrole/live_class'));
        } else {
            return redirect()->to(base_url('live_class'));
        }
    }
    /* showing student list by class and section */
    public function reports()
    {
        // check access permission
        if (!get_permission('live_class_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $method = $this->request->getPost('live_class_method');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['livelist'] = $this->live_classModel->getReports($classID, $sectionID, $method, $start, $end, $branchID);
        }
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('live_class_reports');
        $this->data['main_menu'] = 'live_class';
        $this->data['sub_page'] = 'live_class/reports';
        echo view('layout/index', $this->data);
    }
    public function participation_list()
    {
        if (get_permission('live_class_reports', 'is_view') && $_POST) {
            $liveID = $this->request->getPost('live_id');
            $this->data['list'] = $this->live_classModel->get('live_class_reports', ['live_class_id' => $liveID]);
            echo view('live_class/participation_list', $this->data, true);
        }
    }
    public function timeslot_validation($time_start)
    {
        $time_end = $this->request->getPost('time_end');
        if (strtotime((string) $time_start) >= strtotime((string) $time_end)) {
            $this->validation->setRule("timeslot_validation", "The End time must be longer than the Start time.");
            return false;
        }
        return true;
    }
    public function getTokenURL()
    {
        if (get_permission('live_class', 'is_add') && $_POST) {
            $branchID = $this->applicationModel->get_branch_id();
            if (empty($branchID)) {
                echo json_encode(['status' => false, 'message' => translate('select_branch_first')]);
                exit;
            }
            $getConfig = $this->live_classModel->get('live_class_config', ['branch_id' => $branchID], true);
            if (is_superadmin_loggedin()) {
                $api_keys = ['zoom_api_key' => $getConfig['zoom_api_key'], 'zoom_api_secret' => $getConfig['zoom_api_secret']];
            } else {
                $getSelfAPI = $this->live_classModel->get('zoom_own_api', ['user_type' => 1, 'user_id' => get_loggedin_user_id()], true);
                if ($getSelfAPI['zoom_api_key'] == '' || $getSelfAPI['zoom_api_secret'] == '' || $getConfig['staff_api_credential'] == 0) {
                    $api_keys = ['zoom_api_key' => $getConfig['zoom_api_key'], 'zoom_api_secret' => $getConfig['zoom_api_secret']];
                } else {
                    $api_keys = ['zoom_api_key' => $getSelfAPI['zoom_api_key'], 'zoom_api_secret' => $getSelfAPI['zoom_api_secret']];
                }
            }
            if (empty($api_keys['zoom_api_key'])) {
                echo json_encode(['status' => false, 'message' => translate('zoom_configuration_not_found')]);
            } else {
                $url = "https://zoom.us/oauth/authorize?response_type=code&client_id=" . $api_keys['zoom_api_key'] . "&redirect_uri=" . base_url('live_class/zoom_OAuth');
                session()->set("zoomAPI", $api_keys);
                echo json_encode(['status' => true, 'url' => $url]);
            }
        }
    }
    public function zoom_OAuth()
    {
        if (!isset($_GET['code'])) {
            echo "Invalid Access token";
        } else {
            $zoomAPI = session()->get("zoomAPI");
            session()->set("zoomAPI", "");
            if (!empty($zoomAPI)) {
                $this->Zoom_lib = service('zoomLib', $zoomAPI);
                $response = $this->zoom_lib->get_access_token($_GET['code']);
                if (!empty($response)) {
                    session()->set("zoom_access_token", $response['access_token']);
                    set_alert('success', translate('access_token_generated_successfully'));
                    return redirect()->to(base_url('live_class'));
                }
            } else {
                echo "Redirection was successful.";
            }
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Modules.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\ModuleModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Modules.php
 * @copyright : Reserved RamomCoder Team
 */
class Modules extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\ModuleModel
     */
    public $module;
    public $load;
    public $applicationModel;
    public $input;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->module = new \App\Models\ModuleModel();
        if (!is_superadmin_loggedin()) {
            access_denied();
        }
    }
    public function index()
    {
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['sub_page'] = 'modules/index';
        $this->data['title'] = translate('modules');
        $this->data['main_menu'] = 'settings';
        echo view('layout/index', $this->data);
    }
    public function save()
    {
        if ($_POST !== []) {
            $branchID = $this->applicationModel->get_branch_id();
            $systemFields = $this->request->getPost('system_fields');
            foreach ($systemFields as $key => $value) {
    $is_status = isset($value['status']) ? 1 : 0;
                $arrayData = ['modules_id' => $key, 'branch_id' => $branchID, 'isEnabled' => $is_status];
                $exist_privileges = $db->table('modules_manage')->get('modules_manage')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('modules_manage', $arrayData, ['modules_id' => $key, 'branch_id' => $branchID])->update();
} else {
                    $this->db->table('modules_manage', $arrayData)->insert();
                }
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Multiclass.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Multiclass.php
 * @copyright : Reserved RamomCoder Team
 */
class Multiclass extends AdminController
{
    public $appLib;
    /**
     * @var App\Models\MulticlassModel
     */
    public $multiclass;
    public $applicationModel;
    public $input;
    public $load;
    public $validation;
    public $db;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->multiclass = new \App\Models\MulticlassModel();
        if (!moduleIsEnabled('multi_class')) {
            access_denied();
        }
    }
    public function index()
    {
        // check access permission
        if (!get_permission('multi_class', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['students'] = $this->multiclassModel->getStudentListByClassSection($classID, $sectionID, $branchID, false, true);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_list');
        $this->data['main_menu'] = 'admission';
        $this->data['sub_page'] = 'multiclass/index';
        $this->data['headerelements'] = ['js' => ['js/student.js']];
        echo view('layout/index', $this->data);
    }
    // student details
    public function ajaxClassList()
    {
        $id = $this->request->getPost('student_id');
        $this->data['student_id'] = $id;
        echo view('multiclass/ajax', $this->data, true);
    }
    public function saveData()
    {
        if (!get_permission('multi_class', 'is_add')) {
            ajax_access_denied();
        }
        $items = $this->request->getPost('multiclass');
        $student_id = $this->request->getPost('student_id');
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($items)) {
            foreach ($items as $key => $value) {
    $this->validation->setRules(['multiclass[' . $key . '][class_id]' => ["label" => translate('class'), "rules" => "required|callback_validClasss[{$key
}]"]]);
                $this->validation->setRules(['multiclass[' . $key . '][section_id]' => ["label" => translate('section'), "rules" => 'required']]);
            }
        }
        if ($this->validation->run() == true) {
            if (!empty($items)) {
                $not_delarray = [];
                foreach ($items as $value) {
    $arrayInsert = ['class_id' => $value['class_id'], 'section_id' => $value['section_id'], 'session_id' => get_session_id(), 'student_id' => $student_id, 'branch_id' => $branchID];
                    $this->db->table($arrayInsert)->where();
                    $q = $builder->get('enroll');
                    if ($q->num_rows() > 0) {
                        $not_delarray[] = $q->row()->id;
} else {
                        $this->db->table('enroll', $arrayInsert)->insert();
                        $not_delarray[] = $this->db->insert_id();
                    }
                }
                if ($not_delarray !== []) {
                    $this->db->table('session_id', get_session_id())->where();
                    $this->db->table('student_id', $student_id)->where();
                    $this->db->table('branch_id', $branchID)->where();
                    $this->db->where_not_in('id', $not_delarray);
                    $this->db->table('enroll')->delete();
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success', 'url' => '', 'error' => ''];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'url' => '', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function validClasss($id, $row)
    {
        $duplicate_array = [];
        $multiClass = $this->request->getPost('multiclass');
        foreach ($multiClass as $value) {
    $duplicate_array[] = $value['class_id'] . "-" . $value['section_id'];
}
        $duplicate_record = 0;
        foreach (array_count_values($duplicate_array) as $c) {
    if ($c > 1) {
                $duplicate_record = 1;
                break;
}
        }
        if ($duplicate_record !== 0 && count($multiClass) == $row + 1) {
            $this->validation->setRule("validClasss", "Duplicate Class Select.");
            return false;
        }
        return true;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Online_admission.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\OnlineAdmissionModel;
use App\Models\StudentFieldsModel;
use App\Models\EmailModel;
use App\Models\SmsModel;
/**
 * @package : Ramom school management system
 * @version : 5.8
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Online_admission.php
 * @copyright : Reserved RamomCoder Team
 */
class Online_admission extends AdminController
 
{
    protected $db;




    public $load;
    /**
     * @var App\Models\OnlineAdmissionModel
     */
    public $onlineAdmission;
    /**
     * @var App\Models\StudentFieldsModel
     */
    public $studentFields;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    public $applicationModel;
    public $input;
    public $appLib;
    public $online_admissionModel;
    public $validation;
    public $student_fieldsModel;
    public $emailModel;
    public $smsModel;
    public $uri;
    public function __construct()
    {




        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->load->helpers('custom_fields');
        $this->onlineAdmission = new \App\Models\OnlineAdmissionModel();
        $this->studentFields = new \App\Models\StudentFieldsModel();
        $this->email = new \App\Models\EmailModel();
        $this->sms = new \App\Models\SmsModel();
    }
    public function index()
    {
        // check access permission
        if (!get_permission('online_admission', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['students'] = $this->online_admissionModel->getOnlineAdmission($classID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_list');
        $this->data['main_menu'] = 'admission';
        $this->data['sub_page'] = 'online_admission/index';
        $this->data['headerelements'] = ['js' => ['js/student.js']];
        echo view('layout/index', $this->data);
    }
    // delete student from database
    public function delete($id)
    {
        if (get_permission('online_admission', 'is_delete')) {
            $branch_id = $db->table('online_admission')->get('online_admission')->row()->branch_id;
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('online_admission')->delete();
            if ($db->affectedRows() > 0) {
                $result = $db->table('custom_field')->get('custom_field')->result_array();
                foreach ($result as $value) {
    $this->db->table('relid', $id)->where();
                    $this->db->table('field_id', $value['id'])->where();
                    $this->db->table('custom_fields_values')->delete();
}
            }
        }
    }
    public function decline($id)
    {
        if (get_permission('online_admission', 'is_add')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('online_admission', ['status' => 3])->update();
        }
    }
    public function approved($student_id = '')
    {
        // check access permission
        if (!get_permission('online_admission', 'is_add')) {
            access_denied();
        }
        // check saas student add limit
        if ($this->appLib->isExistingAddon('saas') && !checkSaasLimit('student')) {
            set_alert('error', translate('update_your_package'));
            redirect(site_url('dashboard'));
        }
        $stuDetails = $this->online_admissionModel->get('online_admission', ['id' => $student_id, 'status !=' => 2], true, true);
        if (empty($stuDetails['id'])) {
            access_denied();
        }
        $branchID = $stuDetails['branch_id'];
        $getBranch = $this->db->table('branch')->where('id', $branchID)->get()->getRowArray();
        $guardian = false;
        if ($_POST !== []) {
            $newStudent_photo = 0;
            $newGuardian_photo = 0;
            $existStudent_photo = $this->request->getPost('exist_student_photo');
            $existGuardian_photo = $this->request->getPost('exist_guardian_photo');
            if (isset($_FILES["student_photo"]) && empty($_FILES["student_photo"]['name'])) {
                $newStudent_photo = 1;
            }
            if (isset($_FILES["guardian_photo"]) && empty($_FILES["guardian_photo"]['name'])) {
                $newGuardian_photo = 1;
            }
            $this->validation->setRules(['first_name' => ["label" => translate('first_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['year_id' => ["label" => translate('academic_year'), "rules" => 'trim|required']]);
            $this->validation->setRules(['register_no' => ["label" => translate('register_no'), "rules" => 'trim|required']]);
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
            // checking profile photo format
            $this->validation->setRules(['student_photo' => ["label" => translate('profile_picture'), "rules" => 'callback_photoHandleUpload[student_photo]']]);
            $this->validation->setRules(['guardian_photo' => ["label" => translate('profile_picture'), "rules" => 'callback_photoHandleUpload[guardian_photo]']]);
            // custom fields validation rules
            $customFields = getOnlineCustomFields('student', $branchID);
            foreach ($customFields as $fields_key => $fields_value) {
    if ($fields_value['required']) {
                    $fieldsID = $fields_value['id'];
                    $fieldLabel = $fields_value['field_label'];
                    $this->validation->setRules(["custom_fields[student][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
            }
            // system fields validation rules
            $validArr = [];
            $validationArr = $this->student_fieldsModel->getStatusArr($branchID);
            foreach ($validationArr as $value) {
    if ($value->status && $value->required) {
                    $validArr[$value->prefix] = 1;
}
            }
            if (isset($validArr['admission_date'])) {
                $this->validation->setRules(['admission_date' => ["label" => translate('admission_date'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['student_photo']) && ($newStudent_photo == 1 && empty($existStudent_photo))) {
                $this->validation->setRules(['student_photo' => ["label" => translate('profile_picture'), "rules" => 'required']]);
            }
            if (isset($validArr['roll'])) {
                $this->validation->setRules(['roll' => ["label" => translate('roll'), "rules" => 'trim|numeric|required|callback_unique_roll']]);
            } else {
                $this->validation->setRules(['roll' => ["label" => translate('roll'), "rules" => 'trim|numeric|callback_unique_roll']]);
            }
            if (isset($validArr['last_name'])) {
                $this->validation->setRules(['last_name' => ["label" => translate('last_name'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['gender'])) {
                $this->validation->setRules(['gender' => ["label" => translate('gender'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['birthday'])) {
                $this->validation->setRules(['birthday' => ["label" => translate('birthday'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['category'])) {
                $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['religion'])) {
                $this->validation->setRules(['religion' => ["label" => translate('religion'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['caste'])) {
                $this->validation->setRules(['caste' => ["label" => translate('caste'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['blood_group'])) {
                $this->validation->setRules(['blood_group' => ["label" => translate('blood_group'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['mother_tongue'])) {
                $this->validation->setRules(['mother_tongue' => ["label" => translate('mother_tongue'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['present_address'])) {
                $this->validation->setRules(['current_address' => ["label" => translate('present_address'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['permanent_address'])) {
                $this->validation->setRules(['permanent_address' => ["label" => translate('permanent_address'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['city'])) {
                $this->validation->setRules(['city' => ["label" => translate('city'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['state'])) {
                $this->validation->setRules(['state' => ["label" => translate('state'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['student_email'])) {
                $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
            }
            if (isset($validArr['student_mobile_no'])) {
                $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
            }
            if (isset($validArr['previous_school_details'])) {
                $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'trim|required']]);
                $this->validation->setRules(['qualification' => ["label" => translate('qualification'), "rules" => 'trim|required']]);
            }
            if (isset($validArr['guardian_name'])) {
                $this->validation->setRules(['grd_name' => ["label" => translate('name'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_relation'])) {
                $this->validation->setRules(['grd_relation' => ["label" => translate('relation'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['father_name'])) {
                $this->validation->setRules(['father_name' => ["label" => translate('father_name'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['mother_name'])) {
                $this->validation->setRules(['mother_name' => ["label" => translate('mother_name'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_occupation'])) {
                $this->validation->setRules(['grd_occupation' => ["label" => translate('occupation'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_income'])) {
                $this->validation->setRules(['grd_income' => ["label" => translate('occupation'), "rules" => 'trim|required|numeric']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_education'])) {
                $this->validation->setRules(['grd_education' => ["label" => translate('education'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_email'])) {
                $this->validation->setRules(['grd_email' => ["label" => translate('email'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_mobile_no'])) {
                $this->validation->setRules(['grd_mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_address'])) {
                $this->validation->setRules(['grd_address' => ["label" => translate('address'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_photo']) && ($newGuardian_photo == 1 && empty($existGuardian_photo))) {
                $this->validation->setRules(['guardian_photo' => ["label" => translate('guardian_picture'), "rules" => 'required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_city'])) {
                $this->validation->setRules(['grd_city' => ["label" => translate('city'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if (isset($validArr['guardian_state'])) {
                $this->validation->setRules(['grd_state' => ["label" => translate('state'), "rules" => 'trim|required']]);
                $guardian = true;
            }
            if ($getBranch['stu_generate'] == 0 || isset($_POST['student_id'])) {
                $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
                if (!isset($_POST['student_id'])) {
                    $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
                    $this->validation->setRules(['retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[password]']]);
                }
            }
            if ($getBranch['grd_generate'] == 0 && $guardian == true) {
                $this->validation->setRules(['grd_username' => ["label" => translate('username'), "rules" => 'trim|required|callback_get_valid_guardian_username']]);
                $this->validation->setRules(['grd_password' => ["label" => translate('password'), "rules" => 'trim|required']]);
                $this->validation->setRules(['grd_retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[grd_password]']]);
            }
            // custom fields validation rules
            $class_slug = "student";
            $customFields = getCustomFields($class_slug, $branchID);
            foreach ($customFields as $fields_value) {
    if ($fields_value['required']) {
                    $fieldsID = $fields_value['id'];
                    $fieldLabel = $fields_value['field_label'];
                    $this->validation->setRules(["custom_fields[student][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
            }
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                //save all student information in the database file
                $studentData = $this->online_admissionModel->save($post, $getBranch);
                $studentID = $studentData['student_id'];
                //save student enroll information in the database file
                $arrayEnroll = ['student_id' => $studentID, 'class_id' => $post['class_id'], 'section_id' => $post['section_id'] ?? 0, 'roll' => $post['roll'] ?? 0, 'session_id' => $post['year_id'], 'branch_id' => $branchID];
                $this->db->table('enroll', $arrayEnroll)->insert();
                $this->db->table('id', $stuDetails['id'])->where();
                $this->db->table('online_admission', ['status' => 2])->update();
                // handle custom fields data
                $class_slug = "student";
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $studentID);
                }
                // send student admission email
                $this->emailModel->studentAdmission($studentData);
                //send account activate sms
                $this->smsModel->send_sms($arrayEnroll, 1);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('online_admission');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['stuDetails'] = $stuDetails;
        $this->data['getBranch'] = $getBranch;
        $this->data['sub_page'] = 'online_admission/approved';
        $this->data['main_menu'] = 'admission';
        $this->data['register_id'] = $this->online_admissionModel->regSerNumber($branchID);
        $this->data['title'] = translate('online_admission');
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['js/student.js', 'vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    // unique valid username verification is done here
    public function unique_username($username)
    {
        if ($this->request->getPost('student_id')) {
            $student_id = $this->request->getPost('student_id');
            $login_id = $this->appLib->get_credential_id($student_id, 'student');
            $this->db->where_not_in('id', $login_id);
        }
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_username", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    /* unique valid guardian email address verification is done here */
    public function get_valid_guardian_username($username)
    {
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("get_valid_guardian_username", translate('username_has_already_been_used'));
            return false;
        } else {
            return true;
        }
    }
    /* unique valid student roll verification is done here */
    public function unique_roll($roll)
    {
        if (empty($roll)) {
            return true;
        }
        $branchID = $this->applicationModel->get_branch_id();
        $schoolSettings = $this->online_admissionModel->get('branch', ['id' => $branchID], true, false, 'unique_roll');
        $unique_roll = $schoolSettings['unique_roll'];
        if (empty($unique_roll) && $unique_roll == 0) {
            return true;
        }
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        if ($this->uri->segment(3)) {
            $this->db->where_not_in('student_id', $this->uri->segment(3));
        }
        if ($unique_roll == 2) {
            $this->db->table('section_id', $sectionID)->where();
        }
        $this->db->table(['roll' => $roll, 'class_id' => $classID, 'branch_id' => $branchID])->where();
        $q = $builder->get('enroll')->num_rows();
        if ($q == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_roll", translate('already_taken'));
            return false;
        }
    }
    /* unique valid register ID verification is done here */
    public function unique_registerid($register)
    {
        $this->applicationModel->get_branch_id();
        if ($this->uri->segment(3)) {
            $this->db->where_not_in('id', $this->uri->segment(3));
        }
        $this->db->table('register_no', $register)->where();
        $query = $builder->get('student')->num_rows();
        if ($query == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_registerid", translate('already_taken'));
            return false;
        }
    }
    public function download($id)
    {
        helper('download');
        $filepath = "./uploads/online_ad_documents/" . $id;
        $data = file_get_contents($filepath);
        return $this->response->download($id, $data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Onlineexam.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
use App\Models\SmsModel;
use App\Models\SubjectModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Onlineexam.php
 * @copyright : Reserved RamomCoder Team
 */
class Onlineexam extends AdminController
 
{
    public $appLib;
    protected $db;




    /**
     * @var App\Models\OnlineexamModel
     */
    public $onlineexam;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    public $load;
    public $input;
    public $onlineexamModel;
    public $validation;
    public $applicationModel;
    public $emailModel;
    public function __construct()
    {




        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->onlineexam = new \App\Models\OnlineexamModel();
        $this->email = new \App\Models\EmailModel();
        $this->sms = new \App\Models\SmsModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/bootstrap-timepicker/bootstrap-timepicker.js', 'js/online-exam.js']];
        if (!moduleIsEnabled('online_exam')) {
            access_denied();
        }
    }
    /* online exam controller */
    public function index()
    {
        // check access permission
        if (!get_permission('online_exam', 'is_view')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['examList'] = $this->onlineexamModel->examList();
        $this->data['title'] = translate('online_exam');
        $this->data['sub_page'] = 'onlineexam/index';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    /* online exam table list controller */
    public function getExamListDT()
    {
        if ($_POST !== []) {
            $postData = $this->request->getPost();
            $currencySymbol = $this->data['global_config']['currency_symbol'];
            echo $this->onlineexamModel->examListDT($postData, $currencySymbol);
        }
    }
    /* online exam edit controller */
    public function edit($id = '')
    {
        // check access permission
        if (!get_permission('online_exam', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->exam_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $branchID = $this->applicationModel->get_branch_id();
                $this->onlineexamModel->saveExam($post, $branchID);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('onlineexam');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['onlineexam'] = $this->appLib->getTable('online_exam', ['t.id' => $id], true);
        $this->data['title'] = translate('online_exam');
        $this->data['sub_page'] = 'onlineexam/edit';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    protected function exam_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
        $this->validation->setRules(['section[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
        $this->validation->setRules(['subject[]' => ["label" => translate('subject'), "rules" => 'trim|required']]);
        $this->validation->setRules(['start_date' => ["label" => translate('start_date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['end_date' => ["label" => translate('end_date'), "rules" => 'trim|required']]);
        $this->validation->setRules(['start_time' => ["label" => translate('start_time'), "rules" => 'trim|required']]);
        $this->validation->setRules(['end_time' => ["label" => translate('end_time'), "rules" => 'trim|required']]);
        $this->validation->setRules(['duration' => ["label" => translate('duration'), "rules" => 'trim|required|callback_validate_duration']]);
        $this->validation->setRules(['participation_limit' => ["label" => translate('limits_of_participation'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['mark_type' => ["label" => translate('mark_type'), "rules" => 'trim|required']]);
        $this->validation->setRules(['passing_mark' => ["label" => translate('passing_mark'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['instruction' => ["label" => translate('instruction'), "rules" => 'trim|required']]);
        $this->validation->setRules(['question_type' => ["label" => translate('question_type'), "rules" => 'trim|required']]);
        $this->validation->setRules(['publish_result' => ["label" => translate('result_publish'), "rules" => 'trim|required']]);
        $this->validation->setRules(['exam_type' => ["label" => translate('exam_type'), "rules" => 'trim|required']]);
        $examType = $this->request->getPost('exam_type');
        if (!empty($examType) && $examType == 1) {
            $this->validation->setRules(['exam_fee' => ["label" => translate('exam_fee'), "rules" => 'trim|required|numeric']]);
        }
    }
    public function validate_duration($value)
    {
        if (!empty($value)) {
            if ($value != "0:00") {
                if (!preg_match('/^(?(?=\d{2})(?:2[0-3]|[01]\d)|\d):[0-5]\d$/', (string) $value)) {
                    $this->validation->setRule('validate_duration', 'The %s field must be H:mm');
                    return false;
                }
            } else {
                $this->validation->setRule('validate_duration', 'The %s field can not be 0:00.');
                return false;
            }
            return true;
        }
        return true;
    }
    /* online exam save in DB controller */
    public function exam_save()
    {
        if ($_POST !== []) {
            $this->exam_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $branchID = $this->applicationModel->get_branch_id();
                //online exam save in DB
                $this->onlineexamModel->saveExam($post, $branchID);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    /* online exam delete in DB controller */
    public function delete($id = '')
    {
        if (get_permission('online_exam', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('online_exam')->delete();
            $done = $db->affectedRows();
            if ($done == true) {
                $this->db->table('onlineexam_id', $id)->where();
                $this->db->table('questions_manage')->delete();
                $this->db->table('online_exam_id', $id)->where();
                $this->db->table('online_exam_submitted')->delete();
                $this->db->table('online_exam_id', $id)->where();
                $this->db->table('online_exam_attempts')->delete();
                $this->db->table('online_exam_id', $id)->where();
                $this->db->table('online_exam_answer')->delete();
                $this->db->table('exam_id', $id)->where();
                $this->db->table('online_exam_payment')->delete();
            }
        }
    }
    public function question_list($id = '')
    {
        if (!get_permission('online_exam', 'is_view')) {
            access_denied();
        }
        $exam = $this->onlineexamModel->getExamDetails($id, false);
        if (empty($exam)) {
            access_denied();
        }
        $this->data['exam'] = $exam;
        $this->data['title'] = translate('view') . " " . translate('question');
        $this->data['sub_page'] = 'onlineexam/question_list';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function remove_question($id = '')
    {
        if (get_permission('online_exam', 'is_edit')) {
            $builder->select('questions_manage.id');
            $this->db->from('questions_manage');
            $builder->join('online_exam', 'online_exam.id = questions_manage.onlineexam_id', 'inner');
            $this->db->table('questions_manage.id', $id)->where();
            $this->db->table('online_exam.session_id', get_session_id())->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('online_exam.branch_id', get_loggedin_branch_id())->where();
            }
            $row = $builder->get();
            if ($row->num_rows() > 0) {
                $this->db->table('id', $id)->where();
                $this->db->table('questions_manage')->delete();
            }
        }
    }
    /* Online exam question controller */
    public function question()
    {
        if (!get_permission('question_bank', 'is_view')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('question');
        $this->data['sub_page'] = 'onlineexam/question';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function getQuestionListDT()
    {
        if ($_POST !== []) {
            $postData = $this->request->getPost();
            echo $this->onlineexamModel->questionListDT($postData);
        }
    }
    public function question_add()
    {
        if (!get_permission('question_bank', 'is_add')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('question');
        $this->data['sub_page'] = 'onlineexam/question_add';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function question_edit($id = '')
    {
        if (!get_permission('question_bank', 'is_edit')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['questions'] = $this->appLib->getTable('questions', ['t.id' => $id], true);
        $this->data['title'] = translate('question_edit');
        $this->data['sub_page'] = 'onlineexam/question_edit';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function question_edit_save($id = '')
    {
        if (!get_permission('question_bank', 'is_edit')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $this->question_validation();
            if ($this->validation->run() == true) {
                $this->onlineexamModel->saveQuestions();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('onlineexam/question');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    protected function question_validation()
    {
        $questionType = $this->request->getPost('question_type');
        $this->validation->setRules(['question_level' => ["label" => translate('question_level'), "rules" => 'trim|required']]);
        $this->validation->setRules(['group_id' => ["label" => translate('question') . " " . translate('group'), "rules" => 'trim|required']]);
        $this->validation->setRules(['mark' => ["label" => translate('mark'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['question' => ["label" => translate('question'), "rules" => 'trim|required']]);
        if ($questionType == 1) {
            $this->validation->setRules(['option1' => ["label" => translate('option') . " " . 1, "rules" => 'trim|required']]);
            $this->validation->setRules(['option2' => ["label" => translate('option') . " " . 2, "rules" => 'trim|required']]);
            $this->validation->setRules(['answer' => ["label" => translate('answer'), "rules" => 'trim|required']]);
        }
        if ($questionType == 2) {
            $this->validation->setRules(['option1' => ["label" => translate('option') . " " . 1, "rules" => 'trim|required']]);
            $this->validation->setRules(['option2' => ["label" => translate('option') . " " . 2, "rules" => 'trim|required']]);
            $this->validation->setRules(['option3' => ["label" => translate('option') . " " . 3, "rules" => 'trim|required']]);
            $this->validation->setRules(['option4' => ["label" => translate('option') . " " . 4, "rules" => 'trim|required']]);
            $this->validation->setRules(['answer[]' => ["label" => translate('answer'), "rules" => 'trim|required']]);
        }
        if ($questionType == 3 || $questionType == 4) {
            $this->validation->setRules(['answer' => ["label" => translate('answer'), "rules" => 'trim|required']]);
        }
    }
    public function question_save()
    {
        if (!get_permission('question_bank', 'is_add')) {
            ajax_access_denied();
        }
        $this->question_validation();
        if ($this->validation->run() == true) {
            $this->onlineexamModel->saveQuestions();
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function getQuestion()
    {
        $id = $this->request->getPost('id');
        $this->data['questions'] = $this->onlineexamModel->get('questions', ['id' => $id], true);
        echo view('onlineexam/question_view', $this->data);
    }
    public function question_delete($id = '')
    {
        if (get_permission('question_bank', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('questions')->delete();
        }
    }
    public function manage_question($examid = '')
    {
        if (!get_permission('add_questions', 'is_add')) {
            access_denied();
        }
        $this->data['questionType'] = $this->request->getPost('question_type');
        $this->data['questionLevel'] = $this->request->getPost('question_level');
        $this->data['classID'] = $this->request->getPost('class_id');
        $this->data['sectionID'] = $this->request->getPost('section_id');
        $this->data['subjectID'] = $this->request->getPost('subject_id');
        $exam = $this->onlineexamModel->get('online_exam', ['id' => $examid], true);
        $this->data['exam'] = $exam;
        $this->data['title'] = translate('manage') . " " . translate('question');
        $this->data['sub_page'] = 'onlineexam/manage_question';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function getQuestionDT()
    {
        if ($_POST !== []) {
            $postData = $this->request->getPost();
            echo $this->onlineexamModel->questionList($postData);
        }
    }
    public function question_assign()
    {
        if (!get_permission('add_questions', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $inputQuestions = $this->request->getPost('question');
            $examID = $this->request->getPost('exam_id');
            $negMark = $db->table('online_exam')->get('online_exam')->row()->neg_mark;
            foreach ($inputQuestions as $key => $value) {
    $this->validation->setRules(["question[{$key
}][marks]" => ["label" => translate('marks'), "rules" => 'trim|required|numeric']]);
                if ($negMark == 1) {
                    $this->validation->setRules(["question[{$key}][negative_marks]" => ["label" => translate('negative_marks'), "rules" => 'trim|required|numeric']]);
                }
            }
            if ($this->validation->run() == true) {
                $questionsID = [];
                $cb_questionsID = [];
                $insertData = [];
                foreach ($inputQuestions as $value) {
    $questionsID[] = $value['id'];
                    if (isset($value['cb_id'])) {
                        $questionID = $value['cb_id'];
                        $cb_questionsID[] = $questionID;
                        $this->db->table(['question_id' => $questionID, 'onlineexam_id' => $examID])->where();
                        $query = $builder->get('questions_manage');
                        $result = $query->num_rows();
                        if ($result > 0) {
                            $updateData = ['marks' => $value['marks'], 'neg_marks' => empty($value['negative_marks']) ? 0 : $value['negative_marks']];
                            $this->db->table('id', $query->row()->id)->where();
                            $this->db->table('questions_manage', $updateData)->update();
} else {
                            $insertData[] = ['question_id' => $questionID, 'onlineexam_id' => $examID, 'marks' => $value['marks'], 'neg_marks' => empty($value['negative_marks']) ? 0 : $value['negative_marks']];
                        }
                    }
                }
                if ($insertData !== []) {
                    $this->db->insert_batch('questions_manage', $insertData);
                }
                $result = array_diff($questionsID, $cb_questionsID);
                if ($result !== []) {
                    $this->db->table('onlineexam_id', $examID)->where();
                    $this->db->where_in('question_id', $result);
                    $this->db->table('questions_manage')->delete();
                }
                $array = ['status' => 'success', 'message' => translate('information_has_been_saved_successfully')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // add new question group
    public function question_group()
    {
        if (!get_permission('question_group', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['group'])) {
            if (!get_permission('question_group', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['group_name' => ["label" => translate('group') . " " . translate('name'), "rules" => 'trim|required|callback_unique_group']]);
            if ($this->validation->run() !== false) {
                $arrayData = ['name' => $this->request->getPost('group_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('question_group', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('onlineexam/question_group'));
            }
        }
        $this->data['title'] = translate('question') . " " . translate('group');
        $this->data['sub_page'] = 'onlineexam/question_group';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    // update existing question group
    public function group_edit()
    {
        if (!get_permission('question_group', 'is_edit')) {
            ajax_access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['group_name' => ["label" => translate('group') . " " . translate('name'), "rules" => 'trim|required|callback_unique_group']]);
        if ($this->validation->run() !== false) {
            $category_id = $this->request->getPost('group_id');
            $arrayData = ['name' => $this->request->getPost('group_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $category_id)->where();
            $this->db->table('question_group', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // delete question group from database
    public function group_delete($id)
    {
        if (get_permission('question_group', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('question_group')->delete();
        }
    }
    // question group details send by ajax
    public function groupDetails()
    {
        if (get_permission('question_group', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $query = $builder->get('question_group');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    /* validate here, if the check unique group name */
    public function unique_group($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $group_id = $this->request->getPost('group_id');
        if (!empty($group_id)) {
            $this->db->where_not_in('id', $group_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('question_group')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_group", translate('already_taken'));
            return false;
        }
    }
    public function exam_status()
    {
        $id = $this->request->getPost('id');
        $status = $this->request->getPost('status');
        $arrayData['publish_status'] = $status == 'true' ? 1 : 0;
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('online_exam', $arrayData)->update();
        if ($status == 'true') {
            $onlineExam = $db->table('online_exam')->get('online_exam')->row();
            $percent = $onlineExam->mark_type == 1 ? "%" : "";
            $exam_fee = $onlineExam->exam_type == 1 ? $onlineExam->fee : "Free";
            $sectionArr = json_decode($onlineExam->section_id, true);
            //send online exam sms/email notification
            foreach ($sectionArr as $value) {
    $stuList = $this->applicationModel->getStudentListByClassSection($onlineExam->class_id, $value, $onlineExam->branch_id);
                foreach ($stuList as $row) {
                    $row['exam_title'] = $onlineExam->title;
                    $row['start_time'] = _d($onlineExam->exam_start) . " - " . date("h:i A", strtotime($onlineExam->exam_start));
                    $row['end_time'] = _d($onlineExam->exam_end) . " - " . date("h:i A", strtotime($onlineExam->exam_end));
                    $row['time_duration'] = $onlineExam->duration;
                    $row['attempt'] = $onlineExam->limits_participation;
                    $row['passing_mark'] = $onlineExam->passing_mark . $percent;
                    $row['exam_fee'] = $exam_fee;
                    /* $this->smsModel->sendOnlineExam($row);*/
                    $this->emailModel->onlineExamPublish($row);
}
            }
        }
        $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
        echo json_encode($return);
    }
    public function make_result_publish($id = '')
    {
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('online_exam', ['publish_result' => 1])->update();
    }
    // get subject list based on class
    public function getByClass()
    {
        $html = '';
        $classID = $this->request->getPost('classID');
        if (!empty($classID)) {
            $query = $this->onlineexamModel->getSubjectByClass($classID);
            if ($query->num_rows() > 0) {
                $subjects = $query->getResultArray();
                foreach ($subjects as $row) {
    $html .= '<option value="' . $row['subject_id'] . '">' . $row['subjectname'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select') . '</option>';
        }
        echo $html;
    }
    public function getExamByClass()
    {
        $html = '';
        $classID = $this->request->getPost('class_id');
        if (!empty($classID)) {
            $this->db->table('class_id', $classID)->where();
            $this->db->table('session_id', get_session_id())->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
                $this->db->table('created_by', get_loggedin_user_id())->where();
            }
            $this->db->table('publish_status', 1)->where();
            $this->db->table('publish_result', 1)->where();
            $query = $builder->get('online_exam');
            if ($query->num_rows() > 0) {
                $subjects = $query->getResult();
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($subjects as $row) {
    $html .= '<option value="' . $row->id . '">' . $row->title . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select') . '</option>';
        }
        echo $html;
    }
    public function result()
    {
        // check access permission
        if (!get_permission('exam_result', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $examID = $this->request->getPost('exam_id');
            $exam = $this->onlineexamModel->getExamDetails($examID);
            $this->data['exam'] = $exam;
            $position_order = 0;
            if ($exam->position_generated == 1) {
                $position_order = 1;
            }
            $this->data['result'] = $this->onlineexamModel->examReport($examID, $classID, $branchID, $position_order);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('online_exam') . " " . translate('result');
        $this->data['main_menu'] = 'onlineexam';
        $this->data['sub_page'] = 'onlineexam/result';
        echo view('layout/index', $this->data);
    }
    public function position_generate()
    {
        // check access permission
        if (!get_permission('position_generate', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $examID = $this->request->getPost('exam_id');
            $this->data['exam'] = $this->onlineexamModel->getExamDetails($examID);
            $this->data['result'] = $this->onlineexamModel->examReport($examID, $classID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('position') . " " . translate('generate');
        $this->data['main_menu'] = 'onlineexam';
        $this->data['sub_page'] = 'onlineexam/position_generate';
        echo view('layout/index', $this->data);
    }
    public function save_position()
    {
        if ($_POST !== []) {
            if (!get_permission('position_generate', 'is_add')) {
                ajax_access_denied();
            }
            $remark = $this->request->getPost('remark');
            foreach ($remark as $key => $value) {
    $this->validation->setRules(['remark[' . $key . '][position]' => ["label" => translate('position'), "rules" => 'trim|numeric|required']]);
}
            if ($this->validation->run() == true) {
                $examID = $this->request->getPost('exam_id');
                foreach ($remark as $value) {
    $array = [];
                    if (!empty($value['position'])) {
                        $array['position'] = $value['position'];
}
                    $array['remark'] = empty($value['remark']) ? NULL : $value['remark'];
                    if (!empty($value['student_id'])) {
                        $this->db->table('online_exam_id', $examID)->where();
                        $this->db->table('student_id', $value['student_id'])->where();
                        $this->db->table('online_exam_submitted', $array)->update();
                    }
                }
                $this->db->table('id', $examID)->where();
                $this->db->table('online_exam', ['position_generated' => 1])->update();
                $message = translate('information_has_been_saved_successfully');
                $array = ['status' => 'success', 'message' => $message];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function getStudent_result()
    {
        if (get_permission('exam_result', 'is_view') && $_POST) {
            $examID = $this->request->getPost('examID');
            $studentID = $this->request->getPost('studentID');
            $exam = $this->onlineexamModel->getExamDetails($examID);
            $data['exam'] = $exam;
            $data['studentID'] = $studentID;
            echo view('onlineexam/student_result', $data, true);
        }
    }
    /* sample csv downloader */
    public function csv_Sampledownloader()
    {
        helper('download');
        $data = file_get_contents('uploads/import_question_sample.csv');
        return $this->response->download("import_question_sample.csv", $data);
    }
    /* csv file to import question page */
    public function question_import()
    {
        // check access permission
        if (!get_permission('question_bank', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('question') . " " . translate('import');
        $this->data['branch_id'] = $branchID;
        $this->data['sub_page'] = 'onlineexam/question_import';
        $this->data['main_menu'] = 'onlineexam';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* csv file to import question stored in the database here */
    public function questionCsvImport()
    {
        if ($_POST !== []) {
            if (!get_permission('question_bank', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->applicationModel->get_branch_id();
            // form validation rules
            if (is_superadmin_loggedin() == true) {
                $this->validation->setRules(['branch_id' => ["label" => 'Branch', "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => 'Class', "rules" => 'trim|required']]);
            $this->validation->setRules(['section_id' => ["label" => 'Section', "rules" => 'trim|required']]);
            $this->validation->setRules(['subject_id' => ["label" => 'Subject', "rules" => 'trim|required']]);
            $this->validation->setRules(['userfile' => ["label" => 'CSV File', "rules" => 'callback_csvfileHandleUpload[userfile]']]);
            if (isset($_FILES["userfile"]) && empty($_FILES['userfile']['name'])) {
                $this->validation->setRules(['userfile' => ["label" => 'CSV File', "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $subjectID = $this->request->getPost('subject_id');
                $questionsExam = [];
                if (isset($_FILES["userfile"]) && !empty($_FILES['userfile']['name']) && $_FILES["userfile"]["size"] > 0) {
                    $fileName = $_FILES["userfile"]["tmp_name"];
                    $file = fopen($fileName, "r");
                    $num = true;
                    $count = 0;
                    while (($column = fgetcsv($file, 10000, ",")) !== false) {
                        if ($num) {
                            $num = false;
                            continue;
                        }
                        if (!empty($column['0']) && !empty($column['1']) && !empty($column['2']) && !empty($column['3']) && !empty($column['4'])) {
                            $count++;
                            $questionLevel = trim((string) $column['2']);
                            $answer = trim((string) $column['9']);
                            if ($questionLevel === 'easy') {
                                $questionLevel = 1;
                            }
                            if ($questionLevel == 'medium') {
                                $questionLevel = 2;
                            }
                            if ($questionLevel == 'hard') {
                                $questionLevel = 3;
                            }
                            $questionType = trim((string) $column['0']);
                            if ($questionType === 'single_choice') {
                                $questionType = 1;
                            }
                            if ($questionType == 'multi_choice') {
                                $questionType = 2;
                            }
                            if ($questionType == 'true_false') {
                                $questionType = 3;
                                $answer = strtolower($answer) == true ? 1 : 2;
                            }
                            if ($questionType == 'descriptive') {
                                $questionType = 4;
                            }
                            $answer = str_replace("option_", "", $answer);
                            $questionsExam[] = ['class_id' => $classID, 'section_id' => $sectionID, 'subject_id' => $subjectID, 'branch_id' => $branchID, 'type' => $questionType, 'level' => $questionLevel, 'group_id' => trim((string) $column['1']), 'question' => trim((string) $column['3']), 'mark' => trim((string) $column['4']), 'opt_1' => trim((string) $column['5']), 'opt_2' => trim((string) $column['6']), 'opt_3' => trim((string) $column['7']), 'opt_4' => trim((string) $column['8']), 'answer' => $answer];
                        }
                    }
                    if ($questionsExam !== []) {
                        $this->db->insert_batch('questions', $questionsExam);
                    }
                    if ($count == 0) {
                        $url = base_url('onlineexam/question_import');
                        set_alert('error', "No questions found.");
                    } else {
                        $url = base_url('onlineexam/question');
                        set_alert('success', $count . ' Questions added successfully');
                    }
                } else {
                    $url = base_url('onlineexam/question_import');
                    set_alert('error', 'Question import failed.');
                }
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function csvfileHandleUpload($str, $fields)
    {
        $allowedExts = array_map('trim', array_map('strtolower', explode(',', 'csv')));
        if (isset($_FILES["{$fields}"]) && !empty($_FILES["{$fields}"]['name'])) {
            $file_size = $_FILES["{$fields}"]["size"];
            $file_name = $_FILES["{$fields}"]["name"];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["{$fields}"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('fileHandleUpload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
            } else {
                $this->validation->setRule('fileHandleUpload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        }
        return null;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Parents.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Parents.php
 * @copyright : Reserved RamomCoder Team
 */
class Parents extends AdminController
 
{
    public $bulk;
    protected $db;


    public $load;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\ParentsModel
     */
    public $parents;
    public $validation;
    public $router;
    public $input;
    public $appLib;
    public $parentsModel;
    public $session;
    public function __construct()
    {


        parent::__construct();
        
        
        $this->bulk = service('bulk');$this->appLib = service('appLib'); 
$this->load->helpers('custom_fields');
        $this->email = new \App\Models\EmailModel();
        $this->parents = new \App\Models\ParentsModel();
    }
    public function index()
    {
        return redirect()->to(base_url('parents/view'));
    }
    /* parent form validation rules */
    protected function parent_validation()
    {
        $getBranch = $this->getBranchDetails();
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['relation' => ["label" => translate('relation'), "rules" => 'trim|required']]);
        $this->validation->setRules(['occupation' => ["label" => translate('occupation'), "rules" => 'trim|required']]);
        $this->validation->setRules(['income' => ["label" => translate('income'), "rules" => 'trim|numeric']]);
        $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required']]);
        $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|valid_email']]);
        $this->validation->setRules(['user_photo' => ["label" => translate('profile_picture'), "rules" => 'callback_photoHandleUpload[user_photo]']]);
        $this->validation->setRules(['facebook' => ["label" => 'Facebook', "rules" => 'valid_url']]);
        $this->validation->setRules(['twitter' => ["label" => 'Twitter', "rules" => 'valid_url']]);
        $this->validation->setRules(['linkedin' => ["label" => 'Linkedin', "rules" => 'valid_url']]);
        if ($getBranch['grd_generate'] == 0 || isset($_POST['parent_id'])) {
            $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
            if (!isset($_POST['parent_id'])) {
                $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
                $this->validation->setRules(['retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[password]']]);
            }
        }
        // custom fields validation rules
        $class_slug = $this->router->fetch_class();
        $customFields = getCustomFields($class_slug);
        foreach ($customFields as $fields_value) {
    if ($fields_value['required']) {
                $fieldsID = $fields_value['id'];
                $fieldLabel = $fields_value['field_label'];
                $this->validation->setRules(["custom_fields[parents][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
        }
    }
    /* parents list user interface  */
    public function view()
    {
        // check access permission
        if (!get_permission('parent', 'is_view')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('parents_list');
        $this->data['sub_page'] = 'parents/view';
        $this->data['main_menu'] = 'parents';
        echo view('layout/index', $this->data);
    }
    /* user all information are prepared and stored in the database here */
    public function add()
    {
        if (!get_permission('parent', 'is_add')) {
            access_denied();
        }
        $getBranch = $this->getBranchDetails();
        if ($this->request->getPost('submit') == 'save') {
            // check saas parents add limit
            if ($this->appLib->isExistingAddon('saas') && !checkSaasLimit('parent')) {
                set_alert('error', translate('update_your_package'));
                redirect(site_url('dashboard'));
            }
            $this->parent_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                //save all employee information in the database
                $parentID = $this->parentsModel->save($post, $getBranch);
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $parentID);
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('parents/add'));
            }
        }
        $this->data['getBranch'] = $getBranch;
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('add_parent');
        $this->data['sub_page'] = 'parents/add';
        $this->data['main_menu'] = 'parents';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* parents deactivate list user interface  */
    public function disable_authentication()
    {
        // check access permission
        if (!get_permission('parent_disable_authentication', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['auth'])) {
            if (!get_permission('parent_disable_authentication', 'is_add')) {
                access_denied();
            }
            $stafflist = $this->request->getPost('views_bulk_operations');
            if (isset($stafflist)) {
                foreach ($stafflist as $id) {
    $this->db->table(['role' => 6, 'user_id' => $id])->where();
                    $this->db->table('login_credential', ['active' => 1])->update();
}
                set_alert('success', translate('information_has_been_updated_successfully'));
            } else {
                set_alert('error', 'Please select at least one item');
            }
            return redirect()->to(base_url('parents/disable_authentication'));
        }
        $this->data['parentslist'] = $this->parentsModel->getParentList('', 0);
        $this->data['title'] = translate('deactivate_account');
        $this->data['sub_page'] = 'parents/disable_authentication';
        $this->data['main_menu'] = 'parents';
        echo view('layout/index', $this->data);
    }
    /* profile preview and information are controlled here */
    public function profile($id = '')
    {
        if (!get_permission('parent', 'is_edit')) {
            access_denied();
        }
        if (isset($_POST['update'])) {
            $this->parent_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                //save all employee information in the database
                $this->parentsModel->save($post);
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $id);
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                session()->set_flashdata('profile_tab', 1);
                return redirect()->to(base_url('parents/profile/' . $id));
            } else {
                session()->set_flashdata('profile_tab', 1);
            }
        }
        $this->data['student_id'] = $id;
        $this->data['parent'] = $this->parentsModel->getSingleParent($id);
        $this->data['title'] = translate('parents_profile');
        $this->data['main_menu'] = 'parents';
        $this->data['sub_page'] = 'parents/profile';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* parents delete  */
    public function delete($id = '')
    {
        // check access permission
        if (!get_permission('parent', 'is_delete')) {
            access_denied();
        }
        // delete from parent table
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('parent')->delete();
        if ($db->affectedRows() > 0) {
            $this->db->table(['user_id' => $id, 'role' => 6])->where();
            $this->db->table('login_credential')->delete();
        }
    }
    // unique valid username verification is done here
    public function unique_username($username)
    {
        if (empty($username)) {
            return true;
        }
        $parent_id = $this->request->getPost('parent_id');
        if (!empty($parent_id)) {
            $login_id = $this->appLib->get_credential_id($parent_id, 'parent');
            $this->db->where_not_in('id', $login_id);
        }
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_username", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    /* password change here */
    public function change_password()
    {
        if (!get_permission('parent', 'is_edit')) {
            ajax_access_denied();
        }
        if (!isset($_POST['authentication'])) {
            $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
        } else {
            $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim']]);
        }
        if ($this->validation->run() !== false) {
            $parentID = $this->request->getPost('parent_id');
            $password = $this->request->getPost('password');
            if (!isset($_POST['authentication'])) {
                $this->db->table('role', 6)->where();
                $this->db->table('user_id', $parentID)->where();
                $this->db->table('login_credential', ['password' => $this->appLib->pass_hashed($password)])->update();
            } else {
                $this->db->table('role', 6)->where();
                $this->db->table('user_id', $parentID)->where();
                $this->db->table('login_credential', ['active' => 0])->update();
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    /* to set the children id in the session after the parent login */
    public function select_child($id = '')
    {
        if (is_parent_loggedin()) {
            $builder->select('e.student_id,e.id');
            $this->db->from('enroll as e');
            $builder->join('student as s', 's.id = e.student_id', 'inner');
            $this->db->table('s.parent_id', get_loggedin_user_id())->where();
            $this->db->table('e.id', $id)->where();
            $this->db->table('e.session_id', get_session_id())->where();
            $r = $builder->get()->row();
            if (!empty($r)) {
                session()->set('myChildren_id', $r->student_id);
                session()->set('enrollID', $r->id);
            }
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            session()->set('last_page', current_url());
            redirect(base_url(), 'refresh');
        }
    }
    public function my_children($id = '')
    {
        if (is_parent_loggedin()) {
            session()->set('myChildren_id', '');
            return redirect()->to(base_url('dashboard'));
        } else {
            session()->set('last_page', current_url());
            redirect(base_url(), 'refresh');
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Payroll.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Payroll.php
 * @copyright : Reserved RamomCoder Team
 */
class Payroll extends AdminController
{
    /**
     * @var App\Models\PayrollModel
     */
    public $payroll;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    public $input;
    public $applicationModel;
    public $load;
    public $appLib;
    public $payrollModel;
    public $validation;
    public $db;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->payroll = new \App\Models\PayrollModel();
        $this->email = new \App\Models\EmailModel();
        if (!moduleIsEnabled('human_resource')) {
            access_denied();
        }
    }
    public function index()
    {
        if (!get_permission('salary_payment', 'is_view')) {
            access_denied();
        }
        if (isset($_POST['search'])) {
            $month_year = $this->request->getPost('month_year');
            $staff_role = $this->request->getPost('staff_role');
            $branch_id = $this->applicationModel->get_branch_id();
            $this->data['month'] = date("m", strtotime((string) $month_year));
            $this->data['year'] = date("Y", strtotime((string) $month_year));
            $this->data['stafflist'] = $this->payrollModel->getEmployeePaymentList($branch_id, $staff_role, $this->data['month'], $this->data['year']);
        }
        $this->data['sub_page'] = 'payroll/salary_payment';
        $this->data['main_menu'] = 'payroll';
        $this->data['title'] = translate('payroll');
        echo view('layout/index', $this->data);
    }
    // add staff salary payslip in database
    public function create($id = '', $month = '', $year = '')
    {
        if (!get_permission('salary_payment', 'is_add')) {
            access_denied();
        }
        // check student restrictions
        $this->appLib->check_branch_restrictions('staff', $id);
        // save all information related to salary
        if (isset($_POST['paid'])) {
            $post = $this->request->getPost();
            $response = $this->payrollModel->save_payslip($post);
            if ($response['status'] == 'success') {
                set_alert('success', translate('information_has_been_saved_successfully'));
                redirect($response['uri']);
            } else {
                set_alert('error', "This Month Salary Already Paid !");
                return redirect()->to(base_url('payroll'));
            }
        }
        $this->data['month'] = $month;
        $this->data['year'] = $year;
        $this->data['staff'] = $this->payrollModel->getEmployeePayment($id, $this->data['month'], $this->data['year']);
        $this->data['payvia_list'] = $this->appLib->getSelectList('payment_types');
        $this->data['sub_page'] = 'payroll/create';
        $this->data['main_menu'] = 'payroll';
        $this->data['title'] = translate('payroll');
        echo view('layout/index', $this->data);
    }
    // view staff salary payslip
    public function invoice($id = '', $hash = '')
    {
        if (!get_permission('salary_payment', 'is_view')) {
            access_denied();
        }
        check_hash_restrictions('payslip', $id, $hash);
        $this->data['salary'] = $this->payrollModel->getInvoice($id);
        $this->data['sub_page'] = 'payroll/invoice';
        $this->data['main_menu'] = 'payroll';
        $this->data['title'] = translate('payroll');
        echo view('layout/index', $this->data);
    }
    /* staff template form validation rules */
    protected function template_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['template_name' => ["label" => translate('salary_grade'), "rules" => 'required']]);
        $this->validation->setRules(['basic_salary' => ["label" => translate('basic_salary'), "rules" => 'required|numeric']]);
    }
    // add staff salary template
    public function salary_template()
    {
        if (!get_permission('salary_template', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('salary_template', 'is_add')) {
            // validate inputs
            $this->template_validation();
            if ($this->validation->run() == true) {
                $overtime_rate = empty($_POST['overtime_rate']) ? 0 : $_POST['overtime_rate'];
                // save salary template info
                $insertData = ['branch_id' => $this->applicationModel->get_branch_id(), 'name' => $this->request->getPost('template_name'), 'basic_salary' => $this->request->getPost('basic_salary'), 'overtime_salary' => $overtime_rate];
                $this->db->table('salary_template', $insertData)->insert();
                $template_id = $this->db->insert_id();
                // save all allowance info
                $allowances = $this->request->getPost('allowance');
                foreach ($allowances as $key => $value) {
    if ($value["name"] != "" && $value["amount"] != "") {
                        $insertAllowance = ['salary_template_id' => $template_id, 'name' => $value["name"], 'amount' => $value["amount"], 'type' => 1];
                        $this->db->table('salary_template_details', $insertAllowance)->insert();
}
                }
                // save all deduction info
                $deductions = $this->request->getPost('deduction');
                foreach ($deductions as $value) {
    if ($value["name"] != "" && $value["amount"] != "") {
                        $insertDeduction = ['salary_template_id' => $template_id, 'name' => $value["name"], 'amount' => $value["amount"], 'type' => 2];
                        $this->db->table('salary_template_details', $insertDeduction)->insert();
}
                }
                $url = base_url('payroll/salary_template');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
                set_alert('success', translate('information_has_been_saved_successfully'));
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['title'] = translate('payroll');
        $this->data['sub_page'] = 'payroll/salary_templete';
        $this->data['main_menu'] = 'payroll';
        echo view('layout/index', $this->data);
    }
    // salary template update by id
    public function salary_template_edit($id)
    {
        if (!get_permission('salary_template', 'is_edit')) {
            access_denied();
        }
        // Check branch restrictions
        $this->appLib->check_branch_restrictions('salary_template', $id);
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->template_validation();
            if ($this->validation->run() == true) {
                $template_id = $this->request->getPost('salary_template_id');
                $overtime_rate = empty($_POST['overtime_rate']) ? 0 : $_POST['overtime_rate'];
                // update salary template info
                $insertData = ['name' => $this->request->getPost('template_name'), 'basic_salary' => $this->request->getPost('basic_salary'), 'overtime_salary' => $overtime_rate, 'branch_id' => $branchID];
                $this->db->table('id', $template_id)->where();
                $this->db->table('salary_template', $insertData)->update();
                // update all allowance info
                $allowances = $this->request->getPost('allowance');
                foreach ($allowances as $key => $value) {
    if ($value["name"] != "" && $value["amount"] != "") {
                        $insertAllowance = ['salary_template_id' => $template_id, 'name' => $value["name"], 'amount' => $value["amount"], 'type' => 1];
                        if (isset($value["old_allowance_id"])) {
                            $this->db->table('id', $value["old_allowance_id"])->where();
                            $this->db->table('salary_template_details', $insertAllowance)->update();
} else {
                            $this->db->table('salary_template_details', $insertAllowance)->insert();
                        }
                    }
                }
                // update all deduction info
                $deductions = $this->request->getPost('deduction');
                foreach ($deductions as $value) {
    if ($value["name"] != "" && $value["amount"] != "") {
                        $insertDeduction = ['salary_template_id' => $template_id, 'name' => $value["name"], 'amount' => $value["amount"], 'type' => 2];
                        if (isset($value["old_deduction_id"])) {
                            $this->db->table('id', $value["old_deduction_id"])->where();
                            $this->db->table('salary_template_details', $insertDeduction)->update();
} else {
                            $this->db->table('salary_template_details', $insertDeduction)->insert();
                        }
                    }
                }
                $url = base_url('payroll/salary_template');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
                set_alert('success', translate('information_has_been_updated_successfully'));
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['template_id'] = $id;
        $this->data['allowances'] = $this->payrollModel->get('salary_template_details', ['type' => 1, 'salary_template_id' => $id]);
        $this->data['deductions'] = $this->payrollModel->get('salary_template_details', ['type' => 2, 'salary_template_id' => $id]);
        $this->data['template'] = $this->appLib->getTable('salary_template', ['t.id' => $id], true);
        $this->data['title'] = translate('payroll');
        $this->data['sub_page'] = 'payroll/salary_templete_edit';
        $this->data['main_menu'] = 'payroll';
        echo view('layout/index', $this->data);
    }
    // delete salary template from database
    public function salary_template_delete($id)
    {
        if (!get_permission('salary_template', 'is_delete')) {
            access_denied();
        }
        // Check student restrictions
        $this->appLib->check_branch_restrictions('salary_template', $id);
        $this->db->table('salary_template_id', $id)->where();
        $this->db->table('salary_template_details')->delete();
        $this->db->table('id', $id)->where();
        $this->db->table('salary_template')->delete();
    }
    // staff salary allocation
    public function salary_assign()
    {
        if (!get_permission('salary_assign', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $staff_role = $this->request->getPost('staff_role');
            $designation_id = $this->request->getPost('designation_id');
            $this->data['stafflist'] = $this->payrollModel->getEmployeeList($branchID, $staff_role, $designation_id);
        }
        if (isset($_POST['assign'])) {
            if (!get_permission('salary_assign', 'is_add')) {
                access_denied();
            }
            $stafflist = $this->request->getPost('stafflist');
            if (count($stafflist) > 0) {
                foreach ($stafflist as $value) {
    $template_id = $value['template_id'];
                    if (empty($template_id)) {
                        $template_id = 0;
}
                    $this->db->table('id', $value['id'])->where();
                    $this->db->table('staff', ['salary_template_id' => $template_id])->update();
                }
            }
            set_alert('success', translate('information_has_been_saved_successfully'));
            return redirect()->to(base_url('payroll/salary_assign'));
        }
        $this->data['title'] = translate('payroll');
        $this->data['designationlist'] = $this->appLib->getSelectByBranch('staff_designation', $branchID);
        $this->data['templatelist'] = $this->appLib->getSelectByBranch('salary_template', $branchID);
        $this->data['sub_page'] = 'payroll/salary_assign';
        $this->data['main_menu'] = 'payroll';
        echo view('layout/index', $this->data);
    }
    // employees salary statement list
    public function salary_statement()
    {
        if (!get_permission('salary_summary_report', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $staffID = '';
            if (!get_permission('salary_payment', 'is_add')) {
                $staffID = get_loggedin_user_id();
            }
            $this->data['month'] = date("m", strtotime((string) $this->request->getPost('month_year')));
            $this->data['year'] = date("Y", strtotime((string) $this->request->getPost('month_year')));
            $this->data['payslip'] = $this->payrollModel->get_summary($branchID, $this->data['month'], $this->data['year'], $staffID);
        }
        $this->data['title'] = translate('payroll');
        $this->data['sub_page'] = 'payroll/salary_statement';
        $this->data['main_menu'] = 'payroll_reports';
        echo view('layout/index', $this->data);
    }
    public function payslipPrint()
    {
        if (!get_permission('salary_summary_report', 'is_view')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $this->data['payslip_array'] = $this->request->getPost('payslip_id');
            echo view('payroll/payslipPrint', $this->data, true);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Profile.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmployeeModel;
use App\Models\StudentModel;
use App\Models\FeesModel;
use App\Models\ParentsModel;
use App\Models\EmailModel;
use App\Models\StudentFieldsModel;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Profile.php
 * @copyright : Reserved RamomCoder Team
 */
class Profile extends AdminController
 
{
    protected $db;


    /**
     * @var App\Models\EmployeeModel
     */
    public $employee;
    /**
     * @var App\Models\StudentModel
     */
    public $student;
    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    /**
     * @var App\Models\ParentsModel
     */
    public $parents;
    /**
     * @var App\Models\ProfileModel
     */
    public $profile;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\StudentFieldsModel
     */
    public $studentFields;
    public $validation;
    public $input;
    public $profileModel;
    public $student_fieldsModel;
    public $load;
    public $appLib;
    public $emailModel;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->employee = new \App\Models\EmployeeModel();
        $this->student = new \App\Models\StudentModel();
        $this->fees = new \App\Models\FeesModel();
        $this->parents = new \App\Models\ParentsModel();
        $this->profile = new \App\Models\ProfileModel();
        $this->email = new \App\Models\EmailModel();
        $this->studentFields = new \App\Models\StudentFieldsModel();
    }
    public function index()
    {
        $userID = get_loggedin_user_id();
        $loggedinRoleID = loggedin_role_id();
        $branchID = get_loggedin_branch_id();
        if ($loggedinRoleID == 6) {
            if ($_POST !== []) {
                $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
                $this->validation->setRules(['relation' => ["label" => translate('relation'), "rules" => 'trim|required']]);
                $this->validation->setRules(['occupation' => ["label" => translate('occupation'), "rules" => 'trim|required']]);
                $this->validation->setRules(['income' => ["label" => translate('income'), "rules" => 'trim|numeric']]);
                $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required']]);
                $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|valid_email']]);
                $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
                $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
                $this->validation->setRules(['facebook' => ["label" => 'Facebook', "rules" => 'valid_url']]);
                $this->validation->setRules(['twitter' => ["label" => 'Twitter', "rules" => 'valid_url']]);
                $this->validation->setRules(['linkedin' => ["label" => 'Linkedin', "rules" => 'valid_url']]);
                if ($this->validation->run() == true) {
                    $data = $this->request->getPost();
                    $this->profileModel->parentUpdate($data);
                    set_alert('success', translate('information_has_been_updated_successfully'));
                    return redirect()->to(base_url('profile'));
                }
            }
            $this->data['parent'] = $this->parentsModel->getSingleParent($userID);
            $this->data['sub_page'] = 'profile/parent';
        } elseif ($loggedinRoleID == 7) {
            if ($_POST !== []) {
                $this->validation->setRules(['student_id' => ["label" => translate('student'), "rules" => 'trim']]);
                // system fields validation rules
                $validArr = [];
                $validationArr = $this->student_fieldsModel->getStatusProfileArr($branchID);
                foreach ($validationArr as $value) {
    if ($value->status && $value->required) {
                        $validArr[$value->prefix] = 1;
}
                }
                $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
                if (isset($validArr['admission_date'])) {
                    $this->validation->setRules(['admission_date' => ["label" => translate('admission_date'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['student_photo']) && (isset($_FILES["user_photo"]) && empty($_FILES["user_photo"]['name']) && empty($_POST['old_user_photo']))) {
                    $this->validation->setRules(['user_photo' => ["label" => translate('profile_picture'), "rules" => 'required']]);
                }
                if (isset($validArr['first_name'])) {
                    $this->validation->setRules(['first_name' => ["label" => translate('first_name'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['last_name'])) {
                    $this->validation->setRules(['last_name' => ["label" => translate('last_name'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['gender'])) {
                    $this->validation->setRules(['gender' => ["label" => translate('gender'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['birthday'])) {
                    $this->validation->setRules(['birthday' => ["label" => translate('birthday'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['category'])) {
                    $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['religion'])) {
                    $this->validation->setRules(['religion' => ["label" => translate('religion'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['caste'])) {
                    $this->validation->setRules(['caste' => ["label" => translate('caste'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['blood_group'])) {
                    $this->validation->setRules(['blood_group' => ["label" => translate('blood_group'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['mother_tongue'])) {
                    $this->validation->setRules(['mother_tongue' => ["label" => translate('mother_tongue'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['present_address'])) {
                    $this->validation->setRules(['current_address' => ["label" => translate('present_address'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['permanent_address'])) {
                    $this->validation->setRules(['permanent_address' => ["label" => translate('permanent_address'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['city'])) {
                    $this->validation->setRules(['city' => ["label" => translate('city'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['state'])) {
                    $this->validation->setRules(['state' => ["label" => translate('state'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['student_email'])) {
                    $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
                }
                if (isset($validArr['student_mobile_no'])) {
                    $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
                }
                if (isset($validArr['previous_school_details'])) {
                    $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'trim|required']]);
                    $this->validation->setRules(['qualification' => ["label" => translate('qualification'), "rules" => 'trim|required']]);
                }
                if ($this->validation->run() == true) {
                    $data = $this->request->getPost();
                    $this->profileModel->studentUpdate($data);
                    set_alert('success', translate('information_has_been_updated_successfully'));
                    $array = ['status' => 'success'];
                } else {
                    $error = $this->validation->error_array();
                    $array = ['status' => 'fail', 'error' => $error];
                }
                echo json_encode($array);
                exit;
            }
            $this->data['student'] = $this->studentModel->getSingleStudent(session()->get('enrollID'), true);
            $this->data['sub_page'] = 'profile/student';
        } else {
            if ($_POST !== []) {
                $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
                $this->validation->setRules(['mobile_no' => ["label" => translate('mobile_no'), "rules" => 'trim|required']]);
                $this->validation->setRules(['present_address' => ["label" => translate('present_address'), "rules" => 'trim|required']]);
                if (is_admin_loggedin()) {
                    $this->validation->setRules(['designation_id' => ["label" => translate('designation'), "rules" => 'trim|required']]);
                    $this->validation->setRules(['department_id' => ["label" => translate('department'), "rules" => 'trim|required']]);
                    $this->validation->setRules(['joining_date' => ["label" => translate('joining_date'), "rules" => 'trim|required']]);
                    $this->validation->setRules(['qualification' => ["label" => translate('qualification'), "rules" => 'trim|required']]);
                }
                $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
                $this->validation->setRules(['facebook' => ["label" => 'Facebook', "rules" => 'trim|valid_url']]);
                $this->validation->setRules(['twitter' => ["label" => 'Twitter', "rules" => 'trim|valid_url']]);
                $this->validation->setRules(['linkedin' => ["label" => 'Linkedin', "rules" => 'trim|valid_url']]);
                $this->validation->setRules(['user_photo' => ["label" => 'profile_picture', "rules" => 'callback_photoHandleUpload[user_photo]']]);
                if ($this->validation->run() == true) {
                    $data = $this->request->getPost();
                    $this->profileModel->staffUpdate($data);
                    set_alert('success', translate('information_has_been_updated_successfully'));
                    return redirect()->to(base_url('profile'));
                }
            }
            $this->data['staff'] = $this->employeeModel->getSingleStaff($userID);
            $this->data['sub_page'] = 'profile/employee';
        }
        $this->data['title'] = translate('profile') . " " . translate('edit');
        $this->data['main_menu'] = 'profile';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    // unique valid username verification is done here
    public function unique_username($username)
    {
        if (empty($username)) {
            return true;
        }
        $this->db->where_not_in('id', get_loggedin_id());
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_username", translate('username_has_already_been_used'));
            return false;
        } else {
            return true;
        }
    }
    // when user change his password
    public function password()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['current_password' => ["label" => 'Current Password', "rules" => 'trim|required|min_length[4]|callback_check_validate_password']]);
            $this->validation->setRules(['new_password' => ["label" => 'New Password', "rules" => 'trim|required|min_length[4]']]);
            $this->validation->setRules(['confirm_password' => ["label" => 'Confirm Password', "rules" => 'trim|required|min_length[4]|matches[new_password]']]);
            if ($this->validation->run() == true) {
                $new_password = $this->request->getPost('new_password');
                $this->db->table('id', get_loggedin_id())->where();
                $this->db->table('login_credential', ['password' => $this->appLib->pass_hashed($new_password)])->update();
                // password change email alert
                $emailData = ['branch_id' => get_loggedin_branch_id(), 'password' => $new_password];
                $this->emailModel->changePassword($emailData);
                set_alert('success', translate('password_has_been_changed'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['sub_page'] = 'profile/password_change';
        $this->data['main_menu'] = 'profile';
        $this->data['title'] = translate('profile');
        echo view('layout/index', $this->data);
    }
    // when user change his username
    public function username_change()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
            if ($this->validation->run() == true) {
                $username = $this->request->getPost('username');
                // update login credential information in the database
                $this->db->table('user_id', get_loggedin_user_id())->where();
                $this->db->table('role', loggedin_role_id())->where();
                $this->db->table('login_credential', ['username' => $username])->update();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    // current password verification is done here
    public function check_validate_password($password)
    {
        if ($password) {
            $getPassword = $db->table('login_credential')->get('login_credential')->row()->password;
            $getVerify = $this->appLib->verify_password($password, $getPassword);
            if ($getVerify) {
                return true;
            } else {
                $this->validation->setRule("check_validate_password", translate('current_password_is_invalid'));
                return false;
            }
        }
        return null;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Role.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom Diagnostic Management System
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Role.php
 */
class Role extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\RoleModel
     */
    public $role;
    public $validation;
    public $input;
    public $roleModel;
    public $load;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->role = new \App\Models\RoleModel();
        if (!is_superadmin_loggedin()) {
            access_denied();
        }
    }
    // new role add
    public function index()
    {
        if (isset($_POST['save'])) {
            $rules = [['field' => 'role', 'label' => 'Role Name', 'rules' => 'required|callback_unique_name']];
            $this->validation->setRule($rules);
            if ($this->validation->run() == false) {
                $this->data['validation_error'] = true;
            } else {
                // update information in the database
                $data = $this->request->getPost();
                $this->roleModel->save_roles($data);
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('role'));
            }
        }
        $this->data['roles'] = $this->roleModel->getRoleList();
        $this->data['title'] = translate('roles');
        $this->data['sub_page'] = 'role/index';
        $this->data['main_menu'] = 'settings';
        echo view('layout/index', $this->data);
    }
    // role edit
    public function edit($id)
    {
        if (isset($_POST['save'])) {
            $rules = [['field' => 'role', 'label' => 'Role Name', 'rules' => 'required|callback_unique_name']];
            $this->validation->setRule($rules);
            if ($this->validation->run() == false) {
                $this->data['validation_error'] = true;
            } else {
                // SAVE ROLE INFORMATION IN THE DATABASE
                $data = $this->request->getPost();
                $this->roleModel->save_roles($data);
                set_alert('success', translate('information_has_been_updated_successfully'));
                return redirect()->to(base_url('role'));
            }
        }
        $this->data['roles'] = $this->roleModel->get('roles', ['id' => $id], true);
        $this->data['title'] = translate('roles');
        $this->data['sub_page'] = 'role/edit';
        $this->data['main_menu'] = 'test';
        echo view('layout/index', $this->data);
    }
    // check unique name
    public function unique_name($name)
    {
        $id = $this->request->getPost('id');
        $where = isset($id) ? ['name' => $name, 'id != ' => $id] : ['name' => $name];
        $q = $builder->getWhere('roles', $where);
        if ($q->num_rows() > 0) {
            $this->validation->setRule("unique_name", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    // role delete in DB // fahad update
    // public function delete($role_id)
    // {
    //     $systemRole = array(1, 2, 3, 4, 5, 6, 7);
    //     if (!in_array($role_id, $systemRole)) {
    //         $this->db->table('id', $role_id)->where();
    //         $this->db->table('roles')->delete();
    //     }
    // }
    // role delete in DB
    public function delete($role_id)
    {
        $systemRole = [1, 2, 3, 4, 5, 6, 7];
        if (!in_array($role_id, $systemRole)) {
            // Call the model function to delete the role
            if ($this->roleModel->delete_role($role_id)) {
                // If delete was successful, set a success message
                set_alert('success', 'Role deleted successfully');
            } else {
                // If the delete operation failed, set an error message
                set_alert('error', 'Failed to delete role');
            }
        } else {
            // Setting an error message if trying to delete a system role
            set_alert('error', 'Cannot delete system role');
        }
        // Redirect to the role listing page
        redirect('role');
    }
    public function permission($role_id)
    {
        $roleList = $this->roleModel->getRoleList();
        $allowRole = array_column($roleList, 'id');
        if (!in_array($role_id, $allowRole)) {
            access_denied();
        }
        if (isset($_POST['save'])) {
            $role_id = $this->request->getPost('role_id');
            $privileges = $this->request->getPost('privileges');
            foreach ($privileges as $key => $value) {
    $is_add = isset($value['add']) ? 1 : 0;
                $is_edit = isset($value['edit']) ? 1 : 0;
                $is_view = isset($value['view']) ? 1 : 0;
                $is_delete = isset($value['delete']) ? 1 : 0;
                $arrayData = ['role_id' => $role_id, 'permission_id' => $key, 'is_add' => $is_add, 'is_edit' => $is_edit, 'is_view' => $is_view, 'is_delete' => $is_delete];
                $exist_privileges = $db->table('staff_privileges')->get('staff_privileges')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('staff_privileges', $arrayData, ['role_id' => $role_id, 'permission_id' => $key])->update();
} else {
                    $this->db->table('staff_privileges', $arrayData)->insert();
                }
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            return redirect()->to(base_url('role/permission/' . $role_id));
        }
        $this->data['role_id'] = $role_id;
        $this->data['modules'] = $this->roleModel->getModulesList();
        $this->data['title'] = translate('roles');
        $this->data['sub_page'] = 'role/permission';
        $this->data['main_menu'] = 'settings';
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Saas.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SaasEmailModel;
/**
 * @package : Ramom school management system (Saas)
 * @version : 3.1
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Saas.php
 * @copyright : Reserved RamomCoder Team
 */
class Saas extends MyController
 
{
    protected $db;


    /**
     * @var App\Models\SaasModel
     */
    public $saas;
    /**
     * @var App\Models\SaasEmailModel
     */
    public $saasEmail;
    public $validation;
    public $input;
    public $load;
    public $saasModel;
    public $saas_emailModel;
    public $session;
    public $mailer;
    public function __construct()
    {


        $this->saas = new \App\Models\SaasModel();
        $this->saasEmail = new \App\Models\SaasEmailModel();
        if (!is_superadmin_loggedin()) {
            access_denied();
        }
    }
    public function index()
    {
        return redirect()->to(base_url('saas/package'));
    }
    /* package form validation rules */
    protected function package_validation()
    {
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        if ($this->request->getPost('free_trial') != 1) {
            $this->validation->setRules(['price' => ["label" => translate('price'), "rules" => 'trim|required|numeric']]);
            $this->validation->setRules(['discount' => ["label" => translate('discount'), "rules" => 'trim|numeric|less_than[' . $this->request->getPost('price') . ']']]);
        }
        $this->validation->setRules(['student_limit' => ["label" => translate('student') . " " . translate('limit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['parents_limit' => ["label" => translate('parents') . " " . translate('limit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['staff_limit' => ["label" => translate('staff') . " " . translate('limit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['teacher_limit' => ["label" => translate('teacher') . " " . translate('limit'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['period_type' => ["label" => "Subscription Period", "rules" => 'trim|required|numeric']]);
        $periodType = $this->request->getPost('period_type');
        if ($periodType != '' && $periodType != 1) {
            $this->validation->setRules(['period_value' => ["label" => translate('period'), "rules" => 'trim|required|numeric|greater_than[0]']]);
        }
    }
    public function package()
    {
        $this->data['arrayPeriod'] = $this->saasModel->getPeriodType();
        $this->data['packageList'] = $this->saasModel->getPackageList();
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/package';
        $this->data['main_menu'] = 'saas';
        echo view('layout/index', $this->data);
    }
    public function package_edit($id = '')
    {
        if ($_POST !== []) {
            $this->package_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->saasModel->packageSave($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success', 'url' => base_url('saas/package')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['row'] = $this->appLib->get_table('saas_package', $id, true);
        $this->data['arrayPeriod'] = $this->saasModel->getPeriodType();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/package_edit';
        $this->data['main_menu'] = 'saas';
        echo view('layout/index', $this->data);
    }
    public function package_delete($id)
    {
        $this->db->table('id', $id)->where();
        $this->db->table('saas_package')->delete();
    }
    public function package_save()
    {
        if ($_POST !== []) {
            $this->package_validation();
            if ($this->validation->run() !== false) {
                // SAVE INFORMATION IN THE DATABASE FILE
                $this->saasModel->packageSave($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    /* school form validation rules */
    protected function school_validation()
    {
        $this->validation->setRules(['branch_name' => ["label" => translate('branch_name'), "rules" => 'required|callback_unique_name']]);
        $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'required']]);
        $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'required|valid_email']]);
        $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'required']]);
        $this->validation->setRules(['currency' => ["label" => translate('currency'), "rules" => 'required']]);
        $this->validation->setRules(['currency_symbol' => ["label" => translate('currency_symbol'), "rules" => 'required']]);
        $this->validation->setRules(['country' => ["label" => translate('country'), "rules" => 'required']]);
        $this->validation->setRules(['saas_package_id' => ["label" => translate('package'), "rules" => 'required']]);
        $this->validation->setRules(['state_id' => ["label" => translate('state'), "rules" => 'required']]);
    }
    /* school all data are prepared and stored in the database here */
    public function school()
    {
        if ($this->request->getPost('submit') == 'save') {
            $this->school_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $schooolID = $this->saasModel->schoolSave($post);
                //Saas data are prepared and stored in the database
                $this->saasModel->saveSchoolSaasData($post['saas_package_id'], $schooolID);
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('saas/school'));
            } else {
                $this->data['validation_error'] = true;
            }
        }
        $type = $this->request->getGet('type');
        $type = empty($type) ? '' : urldecode((string) $type);
        $this->data['type'] = $type;
        $this->data['subscriptionList'] = $this->saasModel->getSubscriptionList($type);
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/school';
        $this->data['main_menu'] = 'saas';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function enabled_school($school_id = '')
    {
        $school = $this->saasModel->getSingle('branch', $school_id, true);
        $isEnabled = $this->saasModel->getSchool($school_id);
        if (!empty($isEnabled)) {
            set_alert('error', "This is not acceptable.");
            return redirect()->to(base_url('branch'));
        }
        if (empty($school)) {
            return redirect()->to(base_url('branch'));
        }
        if ($this->request->getPost('submit') == 'save') {
            $this->validation->setRules(['saas_package_id' => ["label" => translate('package'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $schooolID = $post['branch_id'];
                //Saas data are prepared and stored in the database
                $this->saasModel->saveSchoolSaasData($post['saas_package_id'], $schooolID);
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('saas/school'));
            } else {
                $this->data['validation_error'] = true;
            }
        }
        $this->data['school'] = $this->saasModel->getSingle('branch', $school_id, true);
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/enabled_subscription';
        $this->data['main_menu'] = 'branch';
        echo view('layout/index', $this->data);
    }
    public function pending_request()
    {
        if (isset($_POST['search'])) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['getPendingRequest'] = $this->saasModel->getPendingRequest($start, $end);
        } else {
            $this->data['getPendingRequest'] = $this->saasModel->getPendingRequest();
        }
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/pending_request';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        $this->data['main_menu'] = 'saas';
        echo view('layout/index', $this->data);
    }
    public function school_edit($id = '')
    {
        $getSchool = $this->saasModel->getSchool($id);
        if (empty($getSchool)) {
            return redirect()->to(base_url('dashboard'));
        }
        $current_PackageID = $getSchool->package_id;
        if ($this->request->getPost('submit') == 'save') {
            $this->school_validation();
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $schooolID = $this->saasModel->schoolSave($post);
                $dateAdd = $this->request->getPost('expire_date');
                $getSubscriptions = $db->table('saas_subscriptions')->get('saas_subscriptions')->row();
                //add subscriptions data stored in the database
                $arraySubscriptions = ['package_id' => $post['saas_package_id'], 'school_id' => $schooolID, 'expire_date' => $dateAdd];
                $this->db->table('id', $getSubscriptions->id)->where();
                $this->db->table('saas_subscriptions', $arraySubscriptions)->update();
                if ($current_PackageID != $post['saas_package_id']) {
                    $subscriptionsID = $getSubscriptions->id;
                    $saasPackage = $db->table('saas_package')->get('saas_package')->row();
                    //manage modules permission
                    $permission = json_decode($saasPackage->permission, true);
                    $modules_manage_insert = [];
                    $modules_manage_update = [];
                    $getPermissions = $db->table('permission_modules')->get('permission_modules')->getResult();
                    foreach ($getPermissions as $value) {
    $get_existPermissions = $db->table('modules_manage')->get('modules_manage');
                        if (in_array($value->id, $permission)) {
                            if ($get_existPermissions->num_rows() > 0) {
                                $modules_manage_update[] = ['id' => $get_existPermissions->row()->id, 'modules_id' => $value->id, 'isEnabled' => 1, 'branch_id' => $schooolID];
} else {
                                $modules_manage_insert[] = ['modules_id' => $value->id, 'isEnabled' => 1, 'branch_id' => $schooolID];
                            }
                        } elseif ($get_existPermissions->num_rows() > 0) {
                            $modules_manage_update[] = ['id' => $get_existPermissions->row()->id, 'modules_id' => $value->id, 'isEnabled' => 0, 'branch_id' => $schooolID];
                        } else {
                            $modules_manage_insert[] = ['modules_id' => $value->id, 'isEnabled' => 0, 'branch_id' => $schooolID];
                        }
                    }
                    if ($modules_manage_update !== []) {
                        $this->db->update_batch('modules_manage', $modules_manage_update, 'id');
                    }
                    if ($modules_manage_insert !== []) {
                        $this->db->insert_batch('modules_manage', $modules_manage_insert);
                    }
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                return redirect()->to(base_url('saas/school'));
            }
        }
        $this->data['data'] = $getSchool;
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/school_edit';
        $this->data['main_menu'] = 'saas';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* unique valid branch name verification is done here */
    public function unique_name($name)
    {
        $branch_id = $this->request->getPost('branch_id');
        if (!empty($branch_id)) {
            $this->db->where_not_in('id', $branch_id);
        }
        $this->db->table('name', $name)->where();
        $name = $builder->get('branch')->num_rows();
        if ($name == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_name", translate('already_taken'));
            return false;
        }
    }
    /* delete information */
    public function school_delete($id = '')
    {
        $this->db->table('id', $id)->delete('branch')->where();
        $this->db->table('branch_id', $id)->delete('modules_manage')->where();
        //delete branch all staff
        $result = $db->table('staff')->get('staff')->getResult();
        foreach ($result as $key => $value) {
    $this->db->table('user_id', $value->id)->where();
            $this->db->table('login_credential')->delete();
            $this->db->table('id', $value->id)->where();
            $this->db->table('staff')->delete();
}
        //delete branch all student
        $result = $db->table('enroll')->get('enroll')->getResult();
        foreach ($result as $value) {
    $this->db->table('id', $value->student_id)->where();
            $this->db->table('student')->delete();
            $this->db->table('id', $value->id)->where();
            $this->db->table('enroll')->delete();
}
        //delete branch all parent
        $this->db->table('branch_id', $id)->where();
        $this->db->table('parent')->delete();
        $getSubscriptions = $db->table('saas_subscriptions')->get('saas_subscriptions')->row();
        if (!empty($getSubscriptions)) {
            $this->db->table('school_id', $id)->where();
            $this->db->table('saas_subscriptions')->delete();
            $this->db->table('subscriptions_id', $getSubscriptions->id)->where();
            $this->db->table('saas_subscriptions_transactions')->delete();
        }
        $unlink_path = 'uploads/app_image/';
        if (file_exists($unlink_path . "logo-{$id}.png")) {
            @unlink($unlink_path . "logo-{$id}.png");
        }
        if (file_exists($unlink_path . "logo-small-{$id}.png")) {
            @unlink($unlink_path . "logo-small-{$id}.png");
        }
        if (file_exists($unlink_path . "printing-logo-{$id}.png")) {
            @unlink($unlink_path . "printing-logo-{$id}.png");
        }
        if (file_exists($unlink_path . "report-card-logo-{$id}.png")) {
            @unlink($unlink_path . "report-card-logo-{$id}.png");
        }
    }
    public function ajaxGetExpireDate()
    {
        if ($_POST !== []) {
            $packageID = $this->request->getPost('id');
            if (empty($packageID)) {
                echo "";
            } else {
                $saasPackage = $db->table('saas_package')->get('saas_package')->row();
                $periodValue = $saasPackage->period_value;
                $dateAdd = '';
                if ($saasPackage->period_type == 2) {
                    $dateAdd = "+{$periodValue} days";
                }
                if ($saasPackage->period_type == 3) {
                    $dateAdd = "+{$periodValue} month";
                }
                if ($saasPackage->period_type == 4) {
                    $dateAdd = "+{$periodValue} year";
                }
                if ($dateAdd !== '' && $dateAdd !== '0') {
                    $dateAdd = date('Y-m-d', strtotime($dateAdd));
                }
                echo $dateAdd;
            }
        }
    }
    public function school_details($id = '')
    {
        $school = $this->saasModel->getSchool($id);
        $this->data['school'] = $school;
        $this->data['schoolID'] = $id;
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/school_details';
        $this->data['main_menu'] = 'saas';
        echo view('layout/index', $this->data);
    }
    public function settings_general()
    {
        if ($_POST !== []) {
            $expired_alert = $this->request->getPost('expired_alert');
            $captcha_status = $this->request->getPost('captcha_status');
            if ($expired_alert == 1) {
                $this->validation->setRules(['expired_alert_days' => ["label" => translate('expired_alert_days'), "rules" => 'trim|required|numeric']]);
                $this->validation->setRules(['expired_reminder_message' => ["label" => translate('expired_reminder_message'), "rules" => 'trim|required']]);
                $this->validation->setRules(['expired_message' => ["label" => translate('expired_message'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['expired_alert' => ["label" => translate('expired_alert'), "rules" => 'trim']]);
            $this->validation->setRules(['seo_title' => ["label" => translate('site') . " " . translate('title'), "rules" => 'trim|required']]);
            if ($captcha_status == 1) {
                $this->validation->setRules(['recaptcha_site_key' => ["label" => translate('recaptcha_site_key'), "rules" => 'trim|required']]);
                $this->validation->setRules(['recaptcha_secret_key' => ["label" => translate('recaptcha_secret_key'), "rules" => 'trim|required']]);
            }
            if ($this->validation->run() == true) {
                if ($expired_alert == 1) {
                    $arraySetting = ['expired_alert' => 1, 'expired_alert_days' => $this->request->getPost('expired_alert_days'), 'expired_alert_message' => $this->request->getPost('expired_reminder_message'), 'expired_message' => $this->request->getPost('expired_message')];
                } else {
                    $arraySetting = ['expired_alert' => 0];
                }
                $arraySetting['seo_title'] = $this->request->getPost('seo_title');
                $arraySetting['seo_keyword'] = $this->request->getPost('seo_keyword');
                $arraySetting['seo_description'] = $this->request->getPost('seo_description');
                $arraySetting['google_analytics'] = $this->request->getPost('google_analytics', false);
                $arraySetting['automatic_approval'] = $this->request->getPost('automatic_approval');
                $arraySetting['offline_payments'] = $this->request->getPost('offline_payments');
                $arraySetting['captcha_status'] = $captcha_status;
                $arraySetting['recaptcha_site_key'] = $this->request->getPost('recaptcha_site_key');
                $arraySetting['recaptcha_secret_key'] = $this->request->getPost('recaptcha_secret_key');
                $this->db->table('id', 1)->where();
                $this->db->table('saas_settings', $arraySetting)->update();
                $message = translate('the_configuration_has_been_updated');
                set_alert('success', $message);
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['config'] = $this->db->table('saas_settings')->where('id', 1)->get()->getRowArray();
        $this->data['title'] = translate('school_settings');
        $this->data['sub_page'] = 'saas/general_settings';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function settings_payment()
    {
        $this->data['config'] = $this->saasModel->get('payment_config', ['branch_id' => 9999], true);
        $this->data['sub_page'] = 'saas/payment_gateway';
        $this->data['main_menu'] = 'saas_setting';
        $this->data['title'] = translate('payment_control');
        echo view('layout/index', $this->data);
    }
    public function savePaymentConfig()
    {
        if ($_POST !== []) {
            $post = $this->request->getPost();
            $postData = [];
            foreach ($post as $key => $value) {
    $name = ucwords(str_replace('_', ' ', $key));
                $this->validation->setRules([$key => ["label" => $name, "rules" => 'trim|required']]);
                if ($key == 'stripe_publishiable_key') {
                    $key = 'stripe_publishiable';
}
                // Handle checkbox for sandbox
                if ($key == 'paypal_sandbox' || $key == 'stripe_demo' || $key == 'payumoney_demo') {
                    $postData[$key] = $this->request->getPost($key) ? 1 : 0;
                    // Ensuring the sandbox value is set correctly
                } else {
                    $postData[$key] = $value;
                }
            }
            if ($this->validation->run() !== false) {
                $builder->select("id");
                $this->db->table('branch_id', 9999)->where();
                $q = $builder->get('payment_config');
                if ($q->num_rows() == 0) {
                    $postData['branch_id'] = 9999;
                    $this->db->table('payment_config', $postData)->insert();
                } else {
                    $this->db->table('id', $q->row()->id)->where();
                    $this->db->table('payment_config', $postData)->update();
                }
                $message = translate('the_configuration_has_been_updated');
                $array = ['status' => 'success', 'message' => $message];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function payment_active()
    {
        $paypal_status = isset($_POST['paypal_status']) ? 1 : 0;
        $stripe_status = isset($_POST['stripe_status']) ? 1 : 0;
        $payumoney_status = isset($_POST['payumoney_status']) ? 1 : 0;
        $paystack_status = isset($_POST['paystack_status']) ? 1 : 0;
        $razorpay_status = isset($_POST['razorpay_status']) ? 1 : 0;
        $midtrans_status = isset($_POST['midtrans_status']) ? 1 : 0;
        $sslcommerz_status = isset($_POST['sslcommerz_status']) ? 1 : 0;
        $jazzcash_status = isset($_POST['jazzcash_status']) ? 1 : 0;
        $flutterwave_status = isset($_POST['flutterwave']) ? 1 : 0;
        $paytm_status = isset($_POST['paytm_status']) ? 1 : 0;
        $toyyibpay_status = isset($_POST['toyyibpay_status']) ? 1 : 0;
        $payhere_status = isset($_POST['payhere_status']) ? 1 : 0;
        $tap_status = isset($_POST['tap_status']) ? 1 : 0;
        $arrayData = ['paypal_status' => $paypal_status, 'stripe_status' => $stripe_status, 'payumoney_status' => $payumoney_status, 'paystack_status' => $paystack_status, 'razorpay_status' => $razorpay_status, 'midtrans_status' => $midtrans_status, 'sslcommerz_status' => $sslcommerz_status, 'jazzcash_status' => $jazzcash_status, 'flutterwave_status' => $flutterwave_status, 'paytm_status' => $paytm_status, 'toyyibpay_status' => $toyyibpay_status, 'payhere_status' => $payhere_status, 'tap_status' => $tap_status];
        $builder->select('id');
        $this->db->table('branch_id', 9999)->where();
        $q = $builder->get('payment_config');
        if ($q->num_rows() == 0) {
            $arrayData['branch_id'] = 9999;
            $this->db->table('payment_config', $arrayData)->insert();
        } else {
            $this->db->table('id', $q->row()->id)->where();
            $this->db->table('payment_config', $arrayData)->update();
        }
        $message = translate('the_configuration_has_been_updated');
        $array = ['status' => 'success', 'message' => $message];
        echo json_encode($array);
    }
    public function website_settings()
    {
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/jquery-asColorPicker-master/css/asColorPicker.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/jquery-asColorPicker-master/libs/jquery-asColor.js', 'vendor/jquery-asColorPicker-master/libs/jquery-asGradient.js', 'vendor/jquery-asColorPicker-master/dist/jquery-asColorPicker.min.js']];
        $this->data['config'] = $this->saasModel->get('saas_settings', ['id' => 1], true);
        $this->data['sub_page'] = 'saas/website_settings';
        $this->data['main_menu'] = 'saas_setting';
        $this->data['title'] = translate('website_settings');
        echo view('layout/index', $this->data);
    }
    /* saas website settings stored in the database here */
    public function websiteSettingsSave()
    {
        if ($_POST !== []) {
            $ignoreArray = ['facebook_url', 'twitter_url', 'linkedin_url', 'instagram_url', 'youtube_url', 'google_plus', 'old_payment_logo', 'old_slider_image', 'old_overly_image', 'terms_and_conditions', 'agree_checkbox_text', 'overly_image_status', 'old_slider_bg_image', 'button_text_1', 'button_url_1', 'button_text_2', 'button_url_2'];
            foreach ($this->request->getPost()->getResultArray() as $input => $value) {
    if (in_array($input, $ignoreArray)) {
                    continue;
}
                $this->validation->setRule($input, ucwords(str_replace('_', ' ', $input)), 'trim|required');
            }
            $this->validation->setRules(['payment_logo' => ["label" => "Payment Logo", "rules" => 'callback_photoHandleUpload[payment_logo]']]);
            $this->validation->setRules(['slider_image' => ["label" => "Photo", "rules" => 'callback_photoHandleUpload[slider_image]']]);
            $this->validation->setRules(['slider_bg_image' => ["label" => "Slider Background Image", "rules" => 'callback_photoHandleUpload[slider_bg_image]']]);
            $this->validation->setRules(['overly_image' => ["label" => "Overly Image", "rules" => 'callback_photoHandleUpload[overly_image]']]);
            if ($this->request->getPost('terms_status') == 1) {
                $this->validation->setRules(['agree_checkbox_text' => ["label" => "Agree Checkbox Text", "rules" => 'trim|required']]);
                $this->validation->setRules(['terms_and_conditions' => ["label" => "Terms And Conditions Text", "rules" => 'trim|required']]);
            }
            if ($this->validation->run() == true) {
                $inputData = [];
                $ignoreArray[] = 'footer_text';
                foreach ($this->request->getPost()->getResultArray() as $input => $value) {
    if (in_array($input, $ignoreArray)) {
                        continue;
}
                    $inputData[$input] = $value;
                }
                //upload slider background images
                $slider_bg_image = $this->request->getPost('old_slider_bg_image');
                if (isset($_FILES["slider_bg_image"]) && $_FILES['slider_bg_image']['name'] != '' && !empty($_FILES['slider_bg_image']['name'])) {
                    $slider_bg_image = $this->saasModel->fileupload("slider_bg_image", "./assets/frontend/images/saas/", $slider_bg_image);
                }
                $inputData['slider_bg_image'] = $slider_bg_image;
                //upload slider images
                $slider_imag_file = $this->request->getPost('old_slider_image');
                if (isset($_FILES["slider_image"]) && $_FILES['slider_image']['name'] != '' && !empty($_FILES['slider_image']['name'])) {
                    $slider_imag_file = $this->saasModel->fileupload("slider_image", "./assets/frontend/images/saas/", $slider_imag_file);
                }
                $inputData['slider_image'] = $slider_imag_file;
                //upload footer payment logo images
                $payment_logo_file = $this->request->getPost('old_payment_logo');
                if (isset($_FILES["payment_logo"]) && $_FILES['payment_logo']['name'] != '' && !empty($_FILES['payment_logo']['name'])) {
                    $payment_logo_file = $this->saasModel->fileupload("payment_logo", "./assets/frontend/images/saas/", $payment_logo_file);
                }
                $inputData['payment_logo'] = $payment_logo_file;
                //upload overly images
                $overly_image_file = $this->request->getPost('old_overly_image');
                if (isset($_FILES["overly_image"]) && $_FILES['overly_image']['name'] != '' && !empty($_FILES['overly_image']['name'])) {
                    $overly_image_file = $this->saasModel->fileupload("overly_image", "./assets/frontend/images/saas/", $overly_image_file);
                }
                $inputData['overly_image'] = $overly_image_file;
                $inputData['overly_image_status'] = isset($_POST['overly_image_status']) ? 1 : 0;
                $inputData['agree_checkbox_text'] = $this->request->getPost('agree_checkbox_text', false);
                $inputData['terms_and_conditions'] = $this->request->getPost('terms_and_conditions', false);
                //slider button data
                $inputData['button_text_1'] = $this->request->getPost('button_text_1');
                $inputData['button_url_1'] = $this->request->getPost('button_url_1');
                $inputData['button_text_2'] = $this->request->getPost('button_text_2');
                $inputData['button_url_2'] = $this->request->getPost('button_url_2');
                $this->db->table('id', 1)->where();
                $this->db->table('saas_settings', $inputData)->update();
                $updateGlobalConfig = [];
                $updateGlobalConfig['facebook_url'] = $this->request->getPost('facebook_url');
                $updateGlobalConfig['twitter_url'] = $this->request->getPost('twitter_url');
                $updateGlobalConfig['linkedin_url'] = $this->request->getPost('linkedin_url');
                $updateGlobalConfig['instagram_url'] = $this->request->getPost('instagram_url');
                $updateGlobalConfig['youtube_url'] = $this->request->getPost('youtube_url');
                $updateGlobalConfig['google_plus_url'] = $this->request->getPost('google_plus');
                $updateGlobalConfig['footer_text'] = $this->request->getPost('footer_text');
                $this->db->table('id', 1)->where();
                $this->db->table('global_settings', $updateGlobalConfig)->update();
                set_alert('success', translate('the_configuration_has_been_updated'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function emailconfig()
    {
        if ($this->request->getPost('submit') == 'update') {
            $data = [];
            foreach ($this->request->getPost()->getResultArray() as $key => $value) {
    if ($key == 'submit') {
                    continue;
}
                $data[$key] = $value;
            }
            $this->db->table('id', 1)->where();
            $this->db->table('email_config', $data)->update();
            set_alert('success', translate('the_configuration_has_been_updated'));
            return redirect()->to(base_url('mailconfig/email'));
        }
        $this->data['config'] = $this->saasModel->get('email_config', ['branch_id' => 9999], true);
        $this->data['title'] = translate('email_settings');
        $this->data['sub_page'] = 'saas/emailconfig';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function emailtemplate()
    {
        $this->data['branch_id'] = 9999;
        $this->data['templatelist'] = $this->appLib->get_table('saas_email_templates');
        $this->data['title'] = translate('email_settings');
        $this->data['sub_page'] = 'saas/emailtemplate';
        $this->data['main_menu'] = 'saas_setting';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        echo view('layout/index', $this->data);
    }
    public function saveEmailConfig()
    {
        $branchID = 9999;
        $protocol = $this->request->getPost('protocol');
        $this->validation->setRules(['email' => ["label" => 'System Email', "rules" => 'trim|required']]);
        $this->validation->setRules(['protocol' => ["label" => 'Email Protocol', "rules" => 'trim|required']]);
        if ($protocol == 'smtp') {
            $this->validation->setRules(['smtp_host' => ["label" => 'SMTP Host', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_user' => ["label" => 'SMTP Username', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_pass' => ["label" => 'SMTP Password', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_port' => ["label" => 'SMTP Port', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_encryption' => ["label" => 'Email Encryption', "rules" => 'trim|required']]);
        }
        if ($this->validation->run() !== false) {
            $arrayConfig = ['email' => $this->request->getPost('email'), 'protocol' => $protocol, 'branch_id' => $branchID];
            if ($protocol == 'smtp') {
                $arrayConfig['smtp_host'] = $this->request->getPost("smtp_host");
                $arrayConfig['smtp_user'] = $this->request->getPost("smtp_user");
                $arrayConfig['smtp_pass'] = $this->request->getPost("smtp_pass");
                $arrayConfig['smtp_port'] = $this->request->getPost("smtp_port");
                $arrayConfig['smtp_auth'] = $this->request->getPost("smtp_auth");
                $arrayConfig['smtp_encryption'] = $this->request->getPost("smtp_encryption");
            }
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('email_config');
            if ($q->num_rows() == 0) {
                $this->db->table('email_config', $arrayConfig)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('email_config', $arrayConfig)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function emailTemplateSave()
    {
        $this->validation->setRules(['subject' => ["label" => translate('subject'), "rules" => 'required']]);
        $this->validation->setRules(['template_body' => ["label" => translate('body'), "rules" => 'required']]);
        if ($this->validation->run() !== false) {
            $notified = isset($_POST['notify_enable']) ? 1 : 0;
            $templateID = $this->request->getPost('template_id');
            $arrayTemplate = ['subject' => $this->request->getPost('subject'), 'template_body' => $this->request->getPost('template_body'), 'notified' => $notified];
            $this->db->table('id', $templateID)->where();
            $q = $builder->get('saas_email_templates');
            if ($q->num_rows() == 0) {
                $this->db->table('saas_email_templates', $arrayTemplate)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('saas_email_templates', $arrayTemplate)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function school_approved($id = '')
    {
        $getSchool = $this->saasModel->getPendingSchool($id);
        if (empty($getSchool)) {
            return redirect()->to(base_url('dashboard'));
        }
        $this->data['data'] = $getSchool;
        $this->data['title'] = translate('school') . " " . translate('subscription');
        $this->data['sub_page'] = 'saas/school_approved';
        $this->data['main_menu'] = 'saas';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function schoolApprovedSave()
    {
        if ($_POST !== []) {
            $saas_register_id = $this->request->getPost('saas_register_id');
            $getSchool = $this->saasModel->getPendingSchool($saas_register_id);
            if (empty($getSchool)) {
                ajax_access_denied();
            }
            $current_PackageID = $getSchool->package_id;
            $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'required']]);
            $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'required|valid_email']]);
            $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'required']]);
            $this->validation->setRules(['currency' => ["label" => translate('currency'), "rules" => 'required']]);
            $this->validation->setRules(['currency_symbol' => ["label" => translate('currency_symbol'), "rules" => 'required']]);
            $this->validation->setRules(['country' => ["label" => translate('country'), "rules" => 'required']]);
            $this->validation->setRules(['city' => ["label" => translate('city'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                //update status
                $this->db->table('id', $saas_register_id)->update('saas_school_register', ['status' => 1, 'date_of_approval' => date('Y-m-d H:i:s')])->where();
                //stored in branch table
                $arrayBranch = ['name' => $this->request->getPost('school_name'), 'school_name' => $this->request->getPost('school_name'), 'email' => $this->request->getPost('email'), 'mobileno' => $this->request->getPost('mobileno'), 'currency' => $this->request->getPost('currency'), 'symbol' => $this->request->getPost('currency_symbol'), 'country' => $this->request->getPost('country'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'address' => $this->request->getPost('address'), 'status' => 1];
                $this->db->table('branch', $arrayBranch)->insert();
                $schooolID = $this->db->insert_id();
                $inser_data1 = ['branch_id' => $schooolID, 'name' => $getSchool->admin_name, 'sex' => $getSchool->gender = 1 !== 0 ? 'male' : 'female', 'mobileno' => $getSchool->contact_number, 'joining_date' => date("Y-m-d"), 'email' => $getSchool->email];
                $inser_data2 = ['username' => $getSchool->username, 'role' => 2];
                //random staff id generate
                $inser_data1['staff_id'] = substr((string) app_generate_hash(), 3, 7);
                //save employee information in the database
                $this->db->table('staff', $inser_data1)->insert();
                $staffID = $this->db->insert_id();
                //save employee login credential information in the database
                $inser_data2['active'] = 1;
                $inser_data2['user_id'] = $staffID;
                $inser_data2['password'] = $this->appLib->pass_hashed($getSchool->password);
                $this->db->table('login_credential', $inser_data2)->insert();
                //school logo uploaded
                if (isset($_FILES["text_logo"]) && !empty($_FILES['text_logo']['name'])) {
                    $fileInfo = pathinfo((string) $_FILES["text_logo"]["name"]);
                    $img_name = $schooolID . '.' . $fileInfo['extension'];
                    move_uploaded_file($_FILES["text_logo"]["tmp_name"], "uploads/app_image/logo-small-" . $img_name);
                    $file_upload = true;
                } elseif (!empty($getSchool->logo)) {
                    copy('./uploads/saas_school_logo/' . $getSchool->logo, "./uploads/app_image/logo-small-{$schooolID}.png");
                }
                $paymentData = [];
                if ($getSchool->payment_status == 1 && !empty($getSchool->payment_data)) {
                    $paymentData = json_decode($getSchool->payment_data, TRUE);
                }
                //saas data are prepared and stored in the database
                $this->saasModel->saveSchoolSaasData($current_PackageID, $schooolID, $paymentData);
                // send email subscription approval confirmation
                $arrayData['email'] = $getSchool->email;
                $arrayData['package_id'] = $getSchool->package_id;
                $arrayData['admin_name'] = $getSchool->admin_name;
                $arrayData['reference_no'] = $getSchool->reference_no;
                $arrayData['school_name'] = $getSchool->school_name;
                $arrayData['login_username'] = $getSchool->username;
                $arrayData['password'] = $getSchool->password;
                $arrayData['subscription_start_date'] = _d(date("Y-m-d"));
                $arrayData['invoice_url'] = base_url('subscription_review/' . $arrayData['reference_no']);
                $this->saas_emailModel->sentSubscriptionApprovalConfirmation($arrayData);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success', 'url' => base_url('saas/pending_request')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function getRejectsDetails()
    {
        if ($_POST !== []) {
            $this->data['school_id'] = $this->request->getPost('id');
            echo view('saas/getRejectsDetails_modal', $this->data);
        }
    }
    public function reject()
    {
        if ($_POST !== []) {
            $schoolID = $this->request->getPost('school_id');
            $comments = $this->request->getPost('comments');
            //update status
            $this->db->table('id', $schoolID)->update('saas_school_register', ['status' => 2, 'comments' => $comments, 'date_of_approval' => date('Y-m-d H:i:s')])->where();
            // send email subscription reject
            $getSchool = $this->saasModel->getPendingSchool($schoolID);
            $arrayData['email'] = $getSchool->email;
            $arrayData['admin_name'] = $getSchool->admin_name;
            $arrayData['reference_no'] = $getSchool->reference_no;
            $arrayData['school_name'] = $getSchool->school_name;
            $arrayData['reject_reason'] = $comments;
            $this->saas_emailModel->sentSchoolSubscriptionReject($arrayData);
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
            echo json_encode($array);
        }
    }
    public function delete($id)
    {
        if (!empty($id)) {
            $logo = $db->table('saas_school_register')->get('saas_school_register')->row()->logo;
            $this->db->table('id', $id)->where();
            $this->db->table('saas_school_register')->delete();
            if ($db->affectedRows() > 0 && !empty($logo)) {
                $exist_file_path = FCPATH . 'uploads/saas_school_logo/' . $logo;
                if (file_exists($exist_file_path)) {
                    unlink($exist_file_path);
                }
            }
        }
    }
    /* website FAQ manage script start */
    private function faq_validation()
    {
        $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['description' => ["label" => translate('description'), "rules" => 'trim|required']]);
    }
    public function faqs()
    {
        if ($_POST !== []) {
            $this->faq_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->saasModel->save_faq($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        $this->data['faqlist'] = $builder->get('saas_cms_faq_list')->result_array();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/faq';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function faq_edit($id = '')
    {
        if ($_POST !== []) {
            $this->faq_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->saasModel->save_faq($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('saas/faqs');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        $this->data['faq'] = $this->db->table('saas_cms_faq_list')->where('id', $id)->get()->getRowArray();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/faq_edit';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function faq_delete($id = '')
    {
        $this->db->table(['id' => $id])->delete("saas_cms_faq_list")->where();
    }
    /* website features manage script start */
    private function features_validation()
    {
        $this->validation->setRules(['title' => ["label" => translate('title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['description' => ["label" => translate('description'), "rules" => 'trim|required']]);
        $this->validation->setRules(['icon' => ["label" => translate('icon'), "rules" => 'trim|required']]);
    }
    public function features()
    {
        if ($_POST !== []) {
            $this->features_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->saasModel->save_features($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['faqlist'] = $builder->get('saas_cms_features')->result_array();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/features';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function features_edit($id = '')
    {
        if ($_POST !== []) {
            $this->features_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->saasModel->save_features($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('saas/features');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['faq'] = $this->db->table('saas_cms_features')->where('id', $id)->get()->getRowArray();
        $this->data['title'] = translate('subscription');
        $this->data['sub_page'] = 'saas/features_edit';
        $this->data['main_menu'] = 'saas_setting';
        echo view('layout/index', $this->data);
    }
    public function features_delete($id = '')
    {
        $this->db->table(['id' => $id])->delete("saas_cms_features")->where();
    }
    public function transactions()
    {
        if (isset($_POST['search'])) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['getTransactions'] = $this->saasModel->getTransactions($start, $end);
        }
        $this->data['title'] = translate('subscription') . " " . translate('transactions');
        $this->data['sub_page'] = 'saas/transactions';
        $this->data['main_menu'] = 'saas';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function send_test_email()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['test_email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
            if ($this->validation->run() == true) {
                $branchID = 9999;
                $getConfig = $builder->select('id')->get_where('email_config', ['branch_id' => $branchID])->row();
                if (empty($getConfig)) {
                    session()->set_flashdata('test-email-error', 'Email Configuration not found.');
                    $array = ['status' => 'success'];
                    echo json_encode($array);
                    exit;
                }
                $recipient = $this->request->getPost('test_email');
                $this->Mailer = service('mailer');
                $data = [];
                $data['branch_id'] = $branchID;
                $data['recipient'] = $recipient;
                $data['subject'] = 'Cleve School SMTP Config Testing';
                $data['message'] = 'This is test SMTP config email. <br />If you received this message that means that your SMTP settings is set correctly.';
                $r = $this->mailer->send($data, true);
                if ($r == "true") {
                    session()->set_flashdata('test-email-success', 1);
                } else {
                    session()->set_flashdata('test-email-error', 'Mailer Error: ' . $r);
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    //fahad test - Registeration forms
    public function registration_forms()
    {
        if ($this->request->getPost('search')) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start_date = date("Y-m-d", strtotime($daterange[0]));
            $end_date = date("Y-m-d", strtotime($daterange[1]));
            $status = $this->request->getPost('status_filter');
            $this->data['requests'] = $this->saasModel->getFilteredRegistrationRequests($start_date, $end_date, $status);
        } else {
            $this->data['requests'] = $this->saasModel->getRegistrationRequests();
        }
        $this->data['saas_packages'] = $this->saasModel->getSaasPackage();
        $this->data['title'] = translate('Registration Forms');
        $this->data['sub_page'] = 'saas/registration_forms';
        $this->data['main_menu'] = 'saas';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    // Function to update the registration status
    public function updateRequestStatus()
    {
        $this->validation = service('validation');
        $this->saas = new \App\Models\SaasModel();
        // Load saas_model
        $this->validation->setRules(['request_id' => ["label" => 'Request ID', "rules" => 'required']]);
        $this->validation->setRules(['name' => ["label" => 'Name', "rules" => 'required']]);
        $this->validation->setRules(['organization_type' => ["label" => 'Organization Type', "rules" => 'required']]);
        $this->validation->setRules(['school_name' => ["label" => 'School Name', "rules" => 'required']]);
        $this->validation->setRules(['number_of_branches' => ["label" => 'Number of Branches', "rules" => 'numeric']]);
        $this->validation->setRules(['number_of_students' => ["label" => 'Number of Students', "rules" => 'required|numeric']]);
        $this->validation->setRules(['email' => ["label" => 'Email', "rules" => 'required|valid_email']]);
        $this->validation->setRules(['phone_number' => ["label" => 'Phone Number', "rules" => 'required']]);
        $this->validation->setRules(['status' => ["label" => 'Status', "rules" => 'required']]);
        $this->validation->setRules(['comments' => ["label" => 'Comments', "rules" => 'max_length[255]']]);
        $this->validation->setRules(['package_id' => ["label" => 'Package ID', "rules" => 'numeric']]);
        if ($this->validation->run() == FALSE) {
            // Handle validation errors
            $errors = validation_errors();
            session()->set_flashdata('alert-message-error', $errors);
        } else {
            // Fetch Saas packages
            $saas_packages = $this->saasModel->getSaasPackage();
            $data = ['name' => $this->request->getPost('name'), 'organization_type' => $this->request->getPost('organization_type'), 'school_name' => $this->request->getPost('school_name'), 'number_of_branches' => $this->request->getPost('number_of_branches') ?: null, 'number_of_students' => $this->request->getPost('number_of_students'), 'email' => $this->request->getPost('email'), 'phone_number' => $this->request->getPost('phone_number'), 'status' => $this->request->getPost('status'), 'comments' => $this->request->getPost('comments'), 'package_id' => $this->request->getPost('package_id') ?: null, 'updated_at' => date('Y-m-d H:i:s')];
            $this->db->table('id', $this->request->getPost('request_id'))->where();
            $this->db->table('saas_registration_form', $data)->update();
            session()->set_flashdata('alert-message-success', 'Request updated successfully.');
        }
        return redirect()->to(base_url('saas/registration_forms'));
    }
    // Function to delete a registration
    public function deleteRegistration()
    {
        $id = $this->request->getPost('id');
        if ($this->saasModel->deleteRegistration($id)) {
            echo json_encode(['status' => 'success', 'message' => translate('delete_successful')]);
        } else {
            echo json_encode(['status' => 'error', 'message' => translate('delete_failed')]);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/School_settings.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\SchoolModel;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : School_settings.php
 * @copyright : Reserved RamomCoder Team
 */
class School_settings extends AdminController
 
{
    public $twilio;
    public $textlocal;
    public $msg91;
    public $customSms;
    public $clickatell;
    public $bulksmsbd;
    public $bulk;
    protected $db;


    /**
     * @var App\Models\SchoolModel
     */
    public $school;
    public $schoolModel;
    public $appLib;
    public $validation;
    public $input;
    public $load;
    public $applicationModel;
    public $session;
    public $mailer;
    public function __construct()
    {


        parent::__construct();
        
        
        
        
        
        
        
        
        
        $this->twilio = service('twilio');$this->textlocal = service('textlocal');$this->msg91 = service('msg91');$this->mailer = service('mailer');$this->customSms = service('customSms');$this->clickatell = service('clickatell');$this->bulksmsbd = service('bulksmsbd');$this->bulk = service('bulk');$this->appLib = service('appLib'); 
$this->school = new \App\Models\SchoolModel();
    }
    public function index()
    {
        if (!get_permission('school_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('school_settings', 'is_edit')) {
                ajax_access_denied();
            }
            if ($this->appLib->licenceVerify() == false) {
                set_alert('error', translate('invalid_license'));
                $array = ['status' => 'access_denied'];
                echo json_encode($array);
                exit;
            }
            $this->validation->setRules(['branch_name' => ["label" => translate('branch_name'), "rules" => 'trim|required|callback_unique_branchname']]);
            $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
            $this->validation->setRules(['currency' => ["label" => translate('currency'), "rules" => 'trim|required']]);
            $this->validation->setRules(['currency_symbol' => ["label" => translate('currency_symbol'), "rules" => 'trim|required']]);
            $this->validation->setRules(['due_days' => ["label" => translate('due_days'), "rules" => 'trim|required|numeric']]);
            if (isset($_POST['generate_student'])) {
                $this->validation->setRules(['stu_username_prefix' => ["label" => translate('username_prefix'), "rules" => 'trim|required']]);
                $this->validation->setRules(['stu_default_password' => ["label" => translate('default_password'), "rules" => 'trim|required']]);
            }
            if (isset($_POST['generate_guardian'])) {
                $this->validation->setRules(['grd_username_prefix' => ["label" => translate('username_prefix'), "rules" => 'trim|required']]);
                $this->validation->setRules(['grd_default_password' => ["label" => translate('default_password'), "rules" => 'trim|required']]);
            }
            if (isset($_POST['reg_prefix_enable'])) {
                $this->validation->setRules(['reg_start_from' => ["label" => translate('register_no') . " " . translate('start_from'), "rules" => 'trim|required|numeric']]);
                $this->validation->setRules(['institution_code' => ["label" => translate('institution_code'), "rules" => 'trim|required']]);
                $this->validation->setRules(['reg_prefix_digit' => ["label" => translate('register_no') . " " . translate('digit'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['weekends[]' => ["label" => translate('weekends'), "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $post['brance_id'] = $branchID;
                $this->schoolModel->branchUpdate($post);
                $id = $branchID;
                if (isset($_FILES["logo_file"]) && !empty($_FILES['logo_file']['name'])) {
                    $fileInfo = pathinfo((string) $_FILES["logo_file"]["name"]);
                    $img_name = $id . '.' . $fileInfo['extension'];
                    move_uploaded_file($_FILES["logo_file"]["tmp_name"], "uploads/app_image/logo-" . $img_name);
                }
                if (isset($_FILES["text_logo"]) && !empty($_FILES['text_logo']['name'])) {
                    $fileInfo = pathinfo((string) $_FILES["text_logo"]["name"]);
                    $img_name = $id . '.' . $fileInfo['extension'];
                    move_uploaded_file($_FILES["text_logo"]["tmp_name"], "uploads/app_image/logo-small-" . $img_name);
                }
                if (isset($_FILES["print_file"]) && !empty($_FILES['print_file']['name'])) {
                    $fileInfo = pathinfo((string) $_FILES["print_file"]["name"]);
                    $img_name = $id . '.' . $fileInfo['extension'];
                    move_uploaded_file($_FILES["print_file"]["tmp_name"], "uploads/app_image/printing-logo-" . $img_name);
                }
                if (isset($_FILES["report_card"]) && !empty($_FILES['report_card']['name'])) {
                    $fileInfo = pathinfo((string) $_FILES["report_card"]["name"]);
                    $img_name = $id . '.' . $fileInfo['extension'];
                    move_uploaded_file($_FILES["report_card"]["tmp_name"], "uploads/app_image/report-card-logo-" . $img_name);
                }
                $message = translate('the_configuration_has_been_updated');
                set_alert('success', $message);
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branchID'] = $branchID;
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $this->data['school'] = $this->schoolModel->get('branch', ['id' => $branchID], true);
        $this->data['title'] = translate('school_settings');
        $this->data['sub_page'] = 'school_settings/school';
        $this->data['main_menu'] = 'school_m';
        echo view('layout/index', $this->data);
    }
    public function unique_branchname($name)
    {
        $branchID = $this->schoolModel->getBranchID();
        $this->db->where_not_in('id', $branchID);
        $this->db->table('name', $name)->where();
        $name = $builder->get('branch')->num_rows();
        if ($name == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_branchname", translate('already_taken'));
            return false;
        }
    }
    public function payment()
    {
        if (!get_permission('payment_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['config'] = $this->schoolModel->get('payment_config', ['branch_id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/payment_gateway';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('payment_control');
        echo view('layout/index', $this->data);
    }
    public function smsconfig()
    {
        if (!get_permission('sms_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['api'] = $this->schoolModel->getSmsConfig($branchID);
        $this->data['title'] = translate('sms_settings');
        $this->data['sub_page'] = 'school_settings/smsconfig';
        $this->data['main_menu'] = 'school_m';
        echo view('layout/index', $this->data);
    }
    public function sms_active()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $providerID = $this->request->getPost('sms_service_provider');
        $this->db->table('branch_id', $branchID)->update('sms_credential', ['is_active' => 0])->where();
        $this->db->table(['sms_api_id' => $providerID, 'branch_id' => $branchID])->update('sms_credential', ['is_active' => 1])->where();
        if ($db->affectedRows() > 0) {
            $message = translate('information_has_been_saved_successfully');
        } else {
            $message = translate("SMS configuration not found");
        }
        $array = ['status' => 'success', 'message' => $message];
        echo json_encode($array);
    }
    public function twilio()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['twilio_sid' => ["label" => translate('account_sid'), "rules" => 'trim|required']]);
        $this->validation->setRules(['twilio_auth_token' => ["label" => translate('authentication_token'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sender_number' => ["label" => translate('sender_number'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayTwilio = ['field_one' => $this->request->getPost('twilio_sid'), 'field_two' => $this->request->getPost('twilio_auth_token'), 'field_three' => $this->request->getPost('sender_number')];
            $this->db->table('sms_api_id', 1)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arrayTwilio['sms_api_id'] = 1;
                $arrayTwilio['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arrayTwilio)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arrayTwilio)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function clickatell()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['clickatell_user' => ["label" => translate('username'), "rules" => 'trim|required']]);
        $this->validation->setRules(['clickatell_password' => ["label" => translate('password'), "rules" => 'trim|required']]);
        $this->validation->setRules(['clickatell_api' => ["label" => translate('api_key'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sender_number' => ["label" => translate('sender_number'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayTwilio = ['field_one' => $this->request->getPost('clickatell_user'), 'field_two' => $this->request->getPost('clickatell_password'), 'field_three' => $this->request->getPost('clickatell_api'), 'field_four' => $this->request->getPost('sender_number')];
            $this->db->table('sms_api_id', 2)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arrayTwilio['sms_api_id'] = 2;
                $arrayTwilio['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arrayTwilio)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arrayTwilio)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function msg91()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['msg91_auth_key' => ["label" => translate('authkey'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sender_id' => ["label" => translate('sender_id'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayTwilio = ['field_one' => $this->request->getPost('msg91_auth_key'), 'field_two' => $this->request->getPost('sender_id')];
            $this->db->table('sms_api_id', 3)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arrayTwilio['sms_api_id'] = 3;
                $arrayTwilio['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arrayTwilio)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arrayTwilio)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function bulksms()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['bulk_sms_username' => ["label" => translate('username'), "rules" => 'trim|required']]);
        $this->validation->setRules(['bulk_sms_password' => ["label" => translate('password'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayTwilio = ['field_one' => $this->request->getPost('bulk_sms_username'), 'field_two' => $this->request->getPost('bulk_sms_password')];
            $this->db->table('sms_api_id', 4)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arrayTwilio['sms_api_id'] = 4;
                $arrayTwilio['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arrayTwilio)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arrayTwilio)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function textlocal()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['textlocal_sender_id' => ["label" => translate('sender_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['api_key' => ["label" => translate('api_key'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayTwilio = ['field_one' => $this->request->getPost('textlocal_sender_id'), 'field_two' => $this->request->getPost('api_key')];
            $this->db->table('sms_api_id', 5)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arrayTwilio['sms_api_id'] = 5;
                $arrayTwilio['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arrayTwilio)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arrayTwilio)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function sms_country()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required']]);
        $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required']]);
        $this->validation->setRules(['sender_id' => ["label" => translate('sender_id'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arraySMScountry = ['field_one' => $this->request->getPost('username'), 'field_two' => $this->request->getPost('password'), 'field_three' => $this->request->getPost('sender_id')];
            $this->db->table('sms_api_id', 6)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arraySMScountry['sms_api_id'] = 6;
                $arraySMScountry['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arraySMScountry)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arraySMScountry)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function bulksmsbd()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['sender_id' => ["label" => translate('sender_id'), "rules" => 'trim|required']]);
        $this->validation->setRules(['api_key' => ["label" => translate('api_key'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arraySMScountry = ['field_one' => $this->request->getPost('sender_id'), 'field_two' => $this->request->getPost('api_key')];
            $this->db->table('sms_api_id', 7)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arraySMScountry['sms_api_id'] = 7;
                $arraySMScountry['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arraySMScountry)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arraySMScountry)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function customSms()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['api_url' => ["label" => translate('api_url'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arraycustomSms = ['field_one' => $this->request->getPost('api_url')];
            $this->db->table('sms_api_id', 8)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_credential');
            if ($q->num_rows() == 0) {
                $arraycustomSms['sms_api_id'] = 8;
                $arraycustomSms['branch_id'] = $branchID;
                $this->db->table('sms_credential', $arraycustomSms)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_credential', $arraycustomSms)->update();
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function smstemplate()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['templatelist'] = $this->appLib->get_table('sms_template');
        $this->data['title'] = translate('sms_settings');
        $this->data['sub_page'] = 'school_settings/smstemplate';
        $this->data['main_menu'] = 'school_m';
        echo view('layout/index', $this->data);
    }
    public function smsTemplateeSave()
    {
        if (!get_permission('sms_settings', 'is_add')) {
            access_denied();
        }
        $this->validation->setRules(['template_body' => ["label" => translate('body'), "rules" => 'required']]);
        if ($this->validation->run() !== false) {
            $branchID = $this->schoolModel->getBranchID();
            $templateID = $this->request->getPost('template_id');
            $dlt_templateID = $this->request->getPost('dlt_template_id');
            $notify_student = isset($_POST['notify_student']) ? 1 : 0;
            $notify_parent = isset($_POST['notify_parent']) ? 1 : 0;
            $arrayTemplate = ['notify_student' => $notify_student, 'notify_parent' => $notify_parent, 'dlt_template_id' => $dlt_templateID, 'template_body' => $this->request->getPost('template_body'), 'template_id' => $templateID, 'branch_id' => $branchID];
            $this->db->table('template_id', $templateID)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('sms_template_details');
            if ($q->num_rows() == 0) {
                $this->db->table('sms_template_details', $arrayTemplate)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('sms_template_details', $arrayTemplate)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function emailconfig()
    {
        if (!get_permission('email_settings', 'is_view')) {
            access_denied();
        }
        if ($this->request->getPost('submit') == 'update') {
            $data = [];
            foreach ($this->request->getPost()->getResultArray() as $key => $value) {
    if ($key == 'submit') {
                    continue;
}
                $data[$key] = $value;
            }
            $this->db->table('id', 1)->where();
            $this->db->table('email_config', $data)->update();
            set_alert('success', translate('the_configuration_has_been_updated'));
            return redirect()->to(base_url('mailconfig/email'));
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['config'] = $this->schoolModel->get('email_config', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('email_settings');
        $this->data['sub_page'] = 'school_settings/emailconfig';
        $this->data['main_menu'] = 'school_m';
        echo view('layout/index', $this->data);
    }
    public function saveEmailConfig()
    {
        if (!get_permission('email_settings', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $protocol = $this->request->getPost('protocol');
        $this->validation->setRules(['email' => ["label" => 'System Email', "rules" => 'trim|required']]);
        $this->validation->setRules(['protocol' => ["label" => 'Email Protocol', "rules" => 'trim|required']]);
        if ($protocol == 'smtp') {
            $this->validation->setRules(['smtp_host' => ["label" => 'SMTP Host', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_user' => ["label" => 'SMTP Username', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_pass' => ["label" => 'SMTP Password', "rules" => 'trim|required']]);
            $this->validation->setRules(['smtp_port' => ["label" => 'SMTP Port', "rules" => 'trim|required']]);
        }
        if ($this->validation->run() !== false) {
            $arrayConfig = ['email' => $this->request->getPost('email'), 'protocol' => $protocol, 'branch_id' => $branchID];
            if ($protocol == 'smtp') {
                $arrayConfig['smtp_host'] = $this->request->getPost("smtp_host");
                $arrayConfig['smtp_user'] = $this->request->getPost("smtp_user");
                $arrayConfig['smtp_pass'] = $this->request->getPost("smtp_pass");
                $arrayConfig['smtp_port'] = $this->request->getPost("smtp_port");
                $arrayConfig['smtp_encryption'] = $this->request->getPost("smtp_encryption");
                $arrayConfig['smtp_auth'] = $this->request->getPost("smtp_auth");
            }
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('email_config');
            if ($q->num_rows() == 0) {
                $this->db->table('email_config', $arrayConfig)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('email_config', $arrayConfig)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function emailtemplate()
    {
        if (!get_permission('email_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['templatelist'] = $this->appLib->get_table('email_templates');
        $this->data['title'] = translate('email_settings');
        $this->data['sub_page'] = 'school_settings/emailtemplate';
        $this->data['main_menu'] = 'school_m';
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        echo view('layout/index', $this->data);
    }
    public function emailTemplateSave()
    {
        if (!get_permission('email_settings', 'is_add')) {
            access_denied();
        }
        $this->validation->setRules(['subject' => ["label" => translate('subject'), "rules" => 'required']]);
        $this->validation->setRules(['template_body' => ["label" => translate('body'), "rules" => 'required']]);
        if ($this->validation->run() !== false) {
            $branchID = $this->applicationModel->get_branch_id();
            $notified = isset($_POST['notify_enable']) ? 1 : 0;
            $templateID = $this->request->getPost('template_id');
            $arrayTemplate = ['template_id' => $templateID, 'subject' => $this->request->getPost('subject'), 'template_body' => $this->request->getPost('template_body'), 'notified' => $notified, 'branch_id' => $branchID];
            $this->db->table('template_id', $templateID)->where();
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('email_templates_details');
            if ($q->num_rows() == 0) {
                $this->db->table('email_templates_details', $arrayTemplate)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('email_templates_details', $arrayTemplate)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // transactions links enable / disabled
    public function accounting_links()
    {
        // check access permission
        if (!get_permission('accounting_links', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['transactions'] = $this->schoolModel->get('transactions_links', ['branch_id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/accounting_links';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('accounting_links');
        echo view('layout/index', $this->data);
    }
    public function accountingLinksSave()
    {
        // check access permission
        if (!get_permission('accounting_links', 'is_edit')) {
            ajax_access_denied();
        }
        if (isset($_POST['status'])) {
            $this->validation->setRules(['deposit' => ["label" => translate('deposit'), "rules" => 'trim|required']]);
            $this->validation->setRules(['expense' => ["label" => translate('expense'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['status' => ["label" => translate('status'), "rules" => 'trim']]);
        if ($this->validation->run() !== false) {
            $branchID = $this->schoolModel->getBranchID();
            $array = [];
            if (isset($_POST['status'])) {
                $array['status'] = 1;
                $array['deposit'] = $this->request->getPost('deposit');
                $array['expense'] = $this->request->getPost('expense');
            } else {
                $array['status'] = 0;
            }
            $array['branch_id'] = $branchID;
            $this->db->table('branch_id', $branchID)->where();
            $query = $builder->get('transactions_links');
            if ($query->num_rows() > 0) {
                $this->db->table('id', $query->row()->id)->where();
                $this->db->table('transactions_links', $array)->update();
            } else {
                $this->db->table('transactions_links', $array)->insert();
            }
            $array = ['status' => 'success', 'message' => translate('information_has_been_saved_successfully')];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function live_class_config()
    {
        // check access permission
        if (!get_permission('live_class_config', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['config'] = $this->schoolModel->get('live_class_config', ['branch_id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/live_class_config';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('live_class') . " " . translate('settings');
        echo view('layout/index', $this->data);
    }
    public function liveClassSave()
    {
        // check access permission
        if (!get_permission('live_class_config', 'is_edit')) {
            ajax_access_denied();
        }
        $method = $this->request->getPost('method');
        if ($method == 'zoom') {
            $this->validation->setRules(['zoom_api_key' => ["label" => "Zoom API Key", "rules" => 'trim|required']]);
            $this->validation->setRules(['zoom_api_secret' => ["label" => "Zoom API Secret", "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $branchID = $this->schoolModel->getBranchID();
                $array = ['zoom_api_key' => $this->request->getPost('zoom_api_key'), 'zoom_api_secret' => $this->request->getPost('zoom_api_secret'), 'staff_api_credential' => empty($this->request->getPost('staff_api_credential')) ? 0 : 1, 'student_api_credential' => empty($this->request->getPost('student_api_credential')) ? 0 : 1, 'branch_id' => $branchID];
                $this->db->table('branch_id', $branchID)->where();
                $query = $builder->get('live_class_config');
                if ($query->num_rows() > 0) {
                    $this->db->table('id', $query->row()->id)->where();
                    $this->db->table('live_class_config', $array)->update();
                } else {
                    $this->db->table('live_class_config', $array)->insert();
                }
                $array = ['status' => 'success', 'message' => translate('information_has_been_saved_successfully')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
        } elseif ($method == 'bbb') {
            $this->validation->setRules(['bbb_salt_key' => ["label" => "Salt Key", "rules" => 'trim|required']]);
            $this->validation->setRules(['bbb_server_base_url' => ["label" => "Server Base URL", "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $branchID = $this->schoolModel->getBranchID();
                $server_base_url = $this->request->getPost('bbb_server_base_url');
                if (substr((string) $server_base_url, strlen((string) $server_base_url) - 1, 1) !== '/') {
                    $server_base_url .= '/';
                }
                $array = ['bbb_salt_key' => $this->request->getPost('bbb_salt_key'), 'bbb_server_base_url' => $server_base_url, 'branch_id' => $branchID];
                $this->db->table('branch_id', $branchID)->where();
                $query = $builder->get('live_class_config');
                if ($query->num_rows() > 0) {
                    $this->db->table('id', $query->row()->id)->where();
                    $this->db->table('live_class_config', $array)->update();
                } else {
                    $this->db->table('live_class_config', $array)->insert();
                }
                $array = ['status' => 'success', 'message' => translate('information_has_been_saved_successfully')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
        }
        echo json_encode($array);
    }
    public function whatsapp_setting()
    {
        // check access permission
        if (!get_permission('whatsapp_config', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css', 'vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js', 'vendor/dropify/js/dropify.min.js']];
        $this->data['whatsapp'] = $this->schoolModel->get('whatsapp_chat', ['branch_id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/whatsapp_settings';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('whatsapp_settings');
        echo view('layout/index', $this->data);
    }
    public function saveWhatsappConfig()
    {
        if (!get_permission('whatsapp_config', 'is_add')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['header_title' => ["label" => translate('header_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['subtitle' => ["label" => translate('subtitle'), "rules" => 'trim|required']]);
        $this->validation->setRules(['footer_text' => ["label" => translate('footer_text'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayConfig = ['header_title' => $this->request->getPost('header_title'), 'subtitle' => $this->request->getPost('subtitle'), 'footer_text' => $this->request->getPost('footer_text'), 'frontend_enable_chat' => isset($_POST['frontend_enable_chat']) ? 1 : 0, 'backend_enable_chat' => isset($_POST['backend_enable_chat']) ? 1 : 0, 'branch_id' => $branchID];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('whatsapp_chat');
            if ($q->num_rows() == 0) {
                $this->db->table('whatsapp_chat', $arrayConfig)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('whatsapp_chat', $arrayConfig)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function saveWhatsappAgent()
    {
        if (!get_permission('whatsapp_config', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        $this->validation->setRules(['name' => ["label" => translate('name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['designation' => ["label" => translate('designation'), "rules" => 'trim|required']]);
        $this->validation->setRules(['whataspp_number' => ["label" => translate('whataspp_number'), "rules" => 'trim|required|numeric']]);
        $this->validation->setRules(['start_time' => ["label" => translate('start_time'), "rules" => 'trim|required']]);
        $this->validation->setRules(['end_time' => ["label" => translate('end_time'), "rules" => 'trim|required']]);
        $this->validation->setRules(['user_photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[user_photo]']]);
        if ($this->validation->run() !== false) {
            $arrayConfig = ['agent_name' => $this->request->getPost('name'), 'agent_designation' => $this->request->getPost('designation'), 'whataspp_number' => $this->request->getPost('whataspp_number'), 'start_time' => date("H:i", strtotime((string) $this->request->getPost('start_time'))), 'end_time' => date("H:i", strtotime((string) $this->request->getPost('end_time'))), 'weekend' => $this->request->getPost('weekend'), 'agent_image' => $this->schoolModel->uploadImage('whatsapp_agent'), 'enable' => isset($_POST['agent_active']) ? 1 : 0, 'branch_id' => $branchID];
            $agentID = $this->request->getPost('agent_id');
            if (empty($agentID)) {
                $this->db->table('whatsapp_agent', $arrayConfig)->insert();
            } else {
                unset($arrayConfig['branch_id']);
                $this->db->table('id', $agentID)->where();
                $this->db->table('whatsapp_agent', $arrayConfig)->update();
            }
            set_alert('success', translate('the_configuration_has_been_updated'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function whatsappAgent_delete($id)
    {
        if (get_permission('whatsapp_config', 'is_delete')) {
            $agent_image = $db->table('whatsapp_agent')->get('whatsapp_agent')->row()->agent_image;
            $file_name = FCPATH . 'uploads/images/whatsapp_agent/' . $agent_image;
            if (file_exists($file_name)) {
                unlink($file_name);
            }
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('whatsapp_agent')->delete();
        }
    }
    public function getWhatsappDetails($id)
    {
        if (get_permission('whatsapp_config', 'is_edit') && !empty($id)) {
            $this->data['whatsapp'] = $this->appLib->getTable('whatsapp_agent', ['t.id' => $id], true);
            echo view('school_settings/whatsapp_editModal', $this->data);
        }
    }
    public function send_test_email()
    {
        if ($_POST !== []) {
            if (!get_permission('email_settings', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['test_email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
            if ($this->validation->run() == true) {
                $branchID = $this->schoolModel->getBranchID();
                $getConfig = $builder->select('id')->get_where('email_config', ['branch_id' => $branchID])->row();
                if (empty($getConfig)) {
                    session()->set_flashdata('test-email-error', 'Email Configuration not found.');
                    $array = ['status' => 'success'];
                    echo json_encode($array);
                    exit;
                }
                $recipient = $this->request->getPost('test_email');
                $this->Mailer = service('mailer');
                $data = [];
                $data['branch_id'] = $branchID;
                $data['recipient'] = $recipient;
                $data['subject'] = 'Cleve School SMTP Config Testing';
                $data['message'] = 'This is test SMTP config email. <br />If you received this message that means that your SMTP settings is set correctly.';
                $r = $this->mailer->send($data, true);
                if ($r == "true") {
                    session()->set_flashdata('test-email-success', 1);
                } else {
                    session()->set_flashdata('test-email-error', 'Mailer Error: ' . $r);
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function attendance_type()
    {
        // check access permission
        if (!moduleIsEnabled('attendance')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        if ($_POST !== []) {
            $arrayBranch = ['attendance_type' => $this->request->getPost('attendance_type')];
            $this->db->table('id', $branchID)->where();
            $this->db->table('branch', $arrayBranch)->update();
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['school'] = $this->schoolModel->get('branch', ['id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/attendance_type';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('attendance_type');
        echo view('layout/index', $this->data);
    }
    public function student_parent_panel()
    {
        // check access permission
        if (!get_permission('school_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->schoolModel->getBranchID();
        if ($_POST !== []) {
            $mobile_visible = isset($_POST['teacher_mobile_visible']) ? 1 : 0;
            $email_visible = isset($_POST['teacher_email_visible']) ? 1 : 0;
            $arrayBranch = ['teacher_mobile_visible' => $mobile_visible, 'teacher_email_visible' => $email_visible, 'student_login' => $this->request->getPost('student_login'), 'parent_login' => $this->request->getPost('parent_login')];
            $this->db->table('id', $branchID)->where();
            $this->db->table('branch', $arrayBranch)->update();
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['school'] = $this->schoolModel->get('branch', ['id' => $branchID], true);
        $this->data['sub_page'] = 'school_settings/student_parent_panel';
        $this->data['main_menu'] = 'school_m';
        $this->data['title'] = translate('student_parent_panel');
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Sendsmsmail.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Sendsmsmail.php
 * @copyright : Reserved RamomCoder Team
 */
class Sendsmsmail extends AdminController
 
{
    public $mailer;
    public $bulk;
    public $appLib;
    protected $db;

    public $load;
    /**
     * @var App\Models\SendsmsmailModel
     */
    public $sendsmsmail;
    public $applicationModel;
    public $input;
    public $validation;
    public $sendsmsmailModel;
    public $uri;
    public function __construct()
    {

        parent::__construct();
        
        
        
        $this->mailer = service('mailer');$this->bulk = service('bulk');$this->appLib = service('appLib'); 
$this->Mailer = service('mailer');
        $this->sendsmsmail = new \App\Models\SendsmsmailModel();
        if (!moduleIsEnabled('bulk_sms_and_email')) {
            access_denied();
        }
    }
    public function sms()
    {
        if (!get_permission('sendsmsmail', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('bulk_sms_and_email');
        $this->data['sub_page'] = 'sendsmsmail/sms';
        $this->data['main_menu'] = 'sendsmsmail';
        echo view('layout/index', $this->data);
    }
    public function email()
    {
        if (!get_permission('sendsmsmail', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js', 'vendor/summernote/summernote.js']];
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('bulk_sms_and_email');
        $this->data['sub_page'] = 'sendsmsmail/email';
        $this->data['main_menu'] = 'sendsmsmail';
        echo view('layout/index', $this->data);
    }
    public function delete($id)
    {
        if (get_permission('sendsmsmail', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('bulk_sms_email')->delete();
        }
    }
    public function campaign_reports()
    {
        if (!get_permission('sendsmsmail_reports', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $sendType = $this->request->getPost('send_type');
            $campaignType = $this->request->getPost('campaign_type');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->db->table('DATE(created_at) >=', $start)->where();
            $this->db->table('DATE(created_at) <=', $end)->where();
            $this->db->table('message_type', $campaignType)->where();
            $this->db->table('branch_id', $branchID)->where();
            if ($sendType != 'both') {
                $this->db->table('posting_status', $sendType)->where();
            }
            $this->data['campaignlist'] = $builder->get('bulk_sms_email')->result_array();
            $this->data['startdate'] = $start;
            $this->data['enddate'] = $end;
        }
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        $this->data['title'] = translate('bulk_sms_and_email');
        $this->data['sub_page'] = 'sendsmsmail/campaign_reports';
        $this->data['main_menu'] = 'sendsmsmail';
        echo view('layout/index', $this->data);
    }
    function save()
    {
        if (!get_permission('sendsmsmail', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $messageType = $this->request->getPost('message_type') == 'sms' ? 1 : 2;
            $branchID = $this->applicationModel->get_branch_id();
            $recipientType = $this->request->getPost('recipient_type');
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['campaign_name' => ["label" => translate('campaign_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['message' => ["label" => translate('message'), "rules" => 'trim|required']]);
            if ($messageType == 1) {
                $this->validation->setRules(['sms_gateway' => ["label" => translate('sms_gateway'), "rules" => 'trim|required']]);
            } else {
                $this->validation->setRules(['email_subject' => ["label" => translate('email_subject'), "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['recipient_type' => ["label" => translate('type'), "rules" => 'trim|required']]);
            if ($recipientType == 1) {
                $this->validation->setRules(['role_group[]' => ["label" => translate('role'), "rules" => 'trim|required']]);
            }
            if ($recipientType == 2) {
                $this->validation->setRules(['role_id' => ["label" => translate('role'), "rules" => 'trim|required']]);
                $this->validation->setRules(['recipients[]' => ["label" => translate('name'), "rules" => 'trim|required']]);
            }
            if ($recipientType == 3) {
                $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
                $this->validation->setRules(['section[]' => ["label" => translate('section'), "rules" => 'trim|required']]);
            }
            if (isset($_POST['send_later'])) {
                $this->validation->setRules(['schedule_date' => ["label" => translate('schedule_date'), "rules" => 'trim|required']]);
                $this->validation->setRules(['schedule_time' => ["label" => translate('schedule_time'), "rules" => 'trim|required']]);
            }
            if ($this->validation->run() !== false) {
                $user_array = [];
                $receivedDetails = [];
                $campaignName = $this->request->getPost('campaign_name');
                $message = $this->request->getPost('message', false);
                $scheduleDate = $this->request->getPost('schedule_date');
                $scheduleTime = $this->request->getPost('schedule_time');
                $sendLater = isset($_POST['send_later']) ? 1 : 2;
                $emailSubject = $this->request->getPost('email_subject');
                $smsGateway = $this->request->getPost('sms_gateway');
                $dlt_templateID = $this->request->getPost('dlt_template_id');
                if ($recipientType == 1) {
                    $roleGroup = $this->request->getPost('role_group[]');
                    $receivedDetails['role'] = $roleGroup;
                    foreach ($roleGroup as $users_value) {
    if ($users_value != 6 && $users_value != 7) {
                            $staff = $this->sendsmsmailModel->getStaff($branchID, $users_value);
                            if (count($staff) > 0) {
                                foreach ($staff as $value) {
                                    $user_array[] = ['name' => $value['name'], 'email' => $value['email'], 'mobileno' => $value['mobileno']];
}
                            }
                        }
                        if ($users_value == 6) {
                            $parents = $this->sendsmsmailModel->getParent($branchID);
                            if (count($parents) > 0) {
                                foreach ($parents as $value) {
    $user_array[] = ['name' => $value['name'], 'email' => $value['email'], 'mobileno' => $value['mobileno']];
}
                            }
                        }
                        if ($users_value == 7) {
                            $students = $this->sendsmsmailModel->getStudent($branchID);
                            if (count($students) > 0) {
                                foreach ($students as $value) {
    $user_array[] = ['name' => $value['name'], 'email' => $value['email'], 'mobileno' => $value['mobileno']];
}
                            }
                        }
                    }
                }
                if ($recipientType == 2) {
                    $roleID = $this->request->getPost('role_id');
                    $recipients = $this->request->getPost('recipients[]');
                    foreach ($recipients as $value) {
    if ($roleID != 6 && $roleID != 7) {
                            $staff = $this->sendsmsmailModel->getStaff($branchID, '', $value);
                            if (!empty($staff)) {
                                $user_array[] = ['name' => $staff['name'], 'email' => $staff['email'], 'mobileno' => $staff['mobileno']];
}
                        }
                        if ($roleID == 6) {
                            $parent = $this->sendsmsmailModel->getParent($branchID, $value);
                            if (!empty($parent)) {
                                $user_array[] = ['name' => $parent['name'], 'email' => $parent['email'], 'mobileno' => $parent['mobileno']];
                            }
                        }
                        if ($roleID == 7) {
                            $student = $this->sendsmsmailModel->getStudent($branchID, $value);
                            if (!empty($student)) {
                                $user_array[] = ['name' => $student['name'], 'email' => $student['email'], 'mobileno' => $student['mobileno']];
                            }
                        }
                    }
                }
                if ($recipientType == 3) {
                    $classID = $this->request->getPost('class_id');
                    $sections = $this->request->getPost('section[]');
                    $receivedDetails['class'] = $classID;
                    $receivedDetails['sections'] = $sections;
                    foreach ($sections as $value) {
    $students = $this->sendsmsmailModel->getStudentBySection($classID, $value, $branchID);
                        if (count($students) > 0) {
                            foreach ($students as $value) {
                                $user_array[] = ['name' => $value['name'], 'email' => $value['email'], 'mobileno' => $value['mobileno']];
}
                        }
                    }
                }
                $sCount = 0;
                if ($sendLater == 1) {
                    $additional = json_encode($user_array);
                } else {
                    foreach ($user_array as $value) {
    if ($messageType == 1) {
                            $response = $this->sendsmsmailModel->sendSMS($value['mobileno'], $message, $value['name'], $value['email'], $smsGateway, $dlt_templateID);
} else {
                            $response = $this->sendsmsmailModel->sendEmail($value['email'], $message, $value['name'], $value['mobileno'], $emailSubject);
                        }
                        if ($response == true) {
                            $sCount++;
                        }
                    }
                    $additional = '';
                }
                $receivedDetails = $receivedDetails === [] ? '' : json_encode($receivedDetails);
                $arrayData = ['campaign_name' => $campaignName, 'message' => $message, 'message_type' => $messageType, 'recipient_type' => $recipientType, 'recipients_details' => $receivedDetails, 'additional' => $additional, 'schedule_time' => date('Y-m-d H:i:s', strtotime($scheduleDate . ' ' . $scheduleTime)), 'posting_status' => $sendLater, 'total_thread' => count($user_array), 'successfully_sent' => $sCount, 'branch_id' => $branchID];
                if ($messageType == 1) {
                    $arrayData['sms_gateway'] = $smsGateway;
                } else {
                    $arrayData['email_subject'] = $emailSubject;
                }
                $this->db->table('bulk_sms_email', $arrayData)->insert();
                set_alert('success', translate('message_sent_successfully'));
                $url = $messageType == 1 ? base_url('sendsmsmail/sms') : base_url('sendsmsmail/email');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // add send sms mail template
    public function template()
    {
        $type = html_escape($this->uri->segment(3));
        $typeA = ['email', 'sms'];
        $result = in_array($type, $typeA);
        $type_n = $type == 'sms' ? 1 : 2;
        if (!get_permission('sendsmsmail_template', 'is_view') || !$result) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('sendsmsmail_template', 'is_add')) {
            // validate inputs
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['template_name' => ["label" => translate('name'), "rules" => 'required']]);
            $this->validation->setRules(['message' => ["label" => translate('message'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $post['type'] = $type_n;
                $this->sendsmsmailModel->saveTemplate($post);
                $url = current_url();
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
                set_alert('success', translate('information_has_been_saved_successfully'));
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        $this->data['type'] = $type;
        $this->data['templetelist'] = $this->appLib->getTable('bulk_msg_category', ['type' => $type_n]);
        $this->data['title'] = translate('bulk_sms_and_email');
        $this->data['sub_page'] = 'sendsmsmail/template_' . $type;
        $this->data['main_menu'] = 'sendsmsmail';
        echo view('layout/index', $this->data);
    }
    // edit send sms mail template
    public function template_edit($id, $type = '')
    {
        $typeA = ['email', 'sms'];
        $result = in_array($type, $typeA);
        $type_n = $type == 'sms' ? 1 : 2;
        if (!get_permission('sendsmsmail_template', 'is_edit') || !$result) {
            access_denied();
        }
        if ($_POST !== []) {
            // validate inputs
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['template_name' => ["label" => translate('name'), "rules" => 'required']]);
            $this->validation->setRules(['message' => ["label" => translate('message'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                $post['type'] = $type_n;
                $this->sendsmsmailModel->saveTemplate($post);
                $url = base_url('sendsmsmail/template/' . $type);
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
                set_alert('success', translate('information_has_been_updated_successfully'));
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css'], 'js' => ['vendor/summernote/summernote.js']];
        $this->data['type'] = $type;
        $this->data['templete'] = $this->appLib->getTable('bulk_msg_category', ['t.id' => $id, 't.type' => $type_n], true);
        $this->data['title'] = translate('bulk_sms_and_email');
        $this->data['sub_page'] = 'sendsmsmail/template_edit_' . $type;
        $this->data['main_menu'] = 'sendsmsmail';
        echo view('layout/index', $this->data);
    }
    public function template_delete($id)
    {
        if (!get_permission('sendsmsmail_template', 'is_delete')) {
            access_denied();
        }
        $this->db->table('id', $id)->where();
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('bulk_msg_category')->delete();
    }
    public function getRecipientsByRole()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        $roleID = $this->request->getPost('role_id');
        if (!empty($branchID)) {
            if ($roleID != 6 && $roleID != 7) {
                $builder->select('staff.id,staff.name,staff.staff_id,lc.role');
                $this->db->from('staff');
                $builder->join('login_credential as lc', 'lc.user_id = staff.id AND lc.role != 6 AND lc.role != 7', 'inner');
                $this->db->table('lc.role', $roleID)->where();
                $this->db->table('staff.branch_id', $branchID)->where();
                $this->db->order_by('staff.id', 'asc');
                $result = $builder->get()->result_array();
                foreach ($result as $staff) {
    $html .= "<option value='" . $staff['id'] . "'>" . $staff['name'] . " (" . $staff['staff_id'] . ")</option>";
}
            }
            if ($roleID == 6) {
                $this->db->table('branch_id', $branchID)->where();
                $result = $builder->get('parent')->result_array();
                foreach ($result as $row) {
    $html .= "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
}
            }
            if ($roleID == 7) {
                $builder->select('e.student_id,e.roll,CONCAT(s.first_name, " ", s.last_name) as name');
                $this->db->from('enroll as e');
                $builder->join('student as s', 's.id = e.student_id', 'inner');
                $this->db->table('e.branch_id', $branchID)->where();
                $this->db->table('e.session_id', get_session_id())->where();
                $students = $builder->get()->result_array();
                foreach ($students as $row) {
    $html .= "<option value='" . $row['student_id'] . "'>" . $row['name'] . " (Roll" . $row['roll'] . ")</option>";
}
            }
        }
        echo $html;
    }
    public function getSectionByClass()
    {
        $html = "";
        $classID = $this->request->getPost("class_id");
        if (!empty($classID)) {
            $result = $builder->select('sections_allocation.section_id,section.name')->from('sections_allocation')->join('section', 'section.id = sections_allocation.section_id', 'left')->where('sections_allocation.class_id', $classID)->get()->result_array();
            if (count($result) > 0) {
                foreach ($result as $row) {
    $html .= '<option value="' . $row['section_id'] . '">' . $row['name'] . '</option>';
}
            }
        }
        echo $html;
    }
    public function getSmsGateway()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $builder->select('sms_api.name');
            $this->db->from('sms_api');
            $builder->join('sms_credential', 'sms_credential.sms_api_id = sms_api.id', 'inner');
            $this->db->table('sms_credential.branch_id', $branchID)->where();
            $this->db->table('sms_credential.is_active', 1)->where();
            $this->db->order_by('sms_api.id', 'asc');
            $result = $builder->get()->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['name'] . '">' . ucfirst((string) $row['name']) . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_sms_gateway_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getTemplateByBranch()
    {
        $html = "";
        $type = $this->request->getPost('type');
        $type = $type == 'sms' ? 1 : 2;
        $branch_id = $this->applicationModel->get_branch_id();
        if (!empty($branch_id)) {
            $result = $db->table('bulk_msg_category')->get('bulk_msg_category')->result_array();
            if (count($result) > 0) {
                $html .= "<option value=''>" . translate('select') . "</option>";
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
    public function getSmsTemplateText()
    {
        $id = $this->request->getPost('id');
        $row = $this->db->table('bulk_msg_category')->where(['id' => $id])->get()->getRowArray();
        echo $row['body'];
    }
    public function getDetails()
    {
        if (get_permission('sendsmsmail', 'is_view')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->data['bulkdata'] = $builder->get('bulk_sms_email')->row_array();
            echo view('sendsmsmail/messageModal', $this->data);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Settings.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Settings.php
 * @copyright : Reserved RamomCoder Team
 */
class Settings extends AdminController
{
    public $sslcommerz;
    public $appLib;
    public $input;
    public $db;
    public $session;
    public $load;
    public $validation;
    public $applicationModel;
    public function __construct()
    {
        parent::__construct();
    
        
        $this->sslcommerz = service('sslcommerz');$this->appLib = service('appLib');}
    public function index()
    {
        redirect(base_url(), 'refresh');
    }
    /* global settings controller */
    public function universal()
    {
        if (!get_permission('global_settings', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('global_settings', 'is_edit')) {
            }
            if ($this->appLib->licenceVerify() == false) {
                set_alert('error', translate('invalid_license'));
                redirect(site_url('dashboard'));
            }
        }
        $config = [];
        if ($this->request->getPost('submit') == 'setting') {
            foreach ($this->request->getPost()->getResultArray() as $input => $value) {
    if ($input == 'submit') {
                    continue;
}
                $config[$input] = $value;
            }
            if (empty($config['reg_prefix'])) {
                $config['reg_prefix'] = false;
            }
            $this->db->table('id', 1)->where();
            $this->db->table('global_settings', $config)->update();
            $isRTL = $this->appLib->getRTLStatus($config['translation']);
            session()->set(['set_lang' => $config['translation'], 'is_rtl' => $isRTL]);
            set_alert('success', translate('the_configuration_has_been_updated'));
            redirect(current_url());
        }
        if ($this->request->getPost('submit') == 'theme') {
            foreach ($this->request->getPost()->getResultArray() as $input => $value) {
    if ($input == 'submit') {
                    continue;
}
                $config[$input] = $value;
            }
            $this->db->table('id', 1)->where();
            $this->db->table('theme_settings', $config)->update();
            set_alert('success', translate('the_configuration_has_been_updated'));
            session()->set_flashdata('active', 2);
            redirect(current_url());
        }
        if ($this->request->getPost('submit') == 'logo') {
            move_uploaded_file($_FILES['logo_file']['tmp_name'], 'uploads/app_image/logo.png');
            move_uploaded_file($_FILES['text_logo']['tmp_name'], 'uploads/app_image/logo-small.png');
            move_uploaded_file($_FILES['print_file']['tmp_name'], 'uploads/app_image/printing-logo.png');
            move_uploaded_file($_FILES['report_card']['tmp_name'], 'uploads/app_image/report-card-logo.png');
            move_uploaded_file($_FILES['slider_1']['tmp_name'], 'uploads/login_image/slider_1.jpg');
            move_uploaded_file($_FILES['slider_2']['tmp_name'], 'uploads/login_image/slider_2.jpg');
            move_uploaded_file($_FILES['slider_3']['tmp_name'], 'uploads/login_image/slider_3.jpg');
            move_uploaded_file($_FILES['sidebox_1']['tmp_name'], 'assets/login_page/image/sidebox.jpg');
            move_uploaded_file($_FILES['profile_bg']['tmp_name'], 'assets/images/profile_bg.jpg');
            set_alert('success', translate('the_configuration_has_been_updated'));
            session()->set_flashdata('active', 3);
            redirect(current_url());
        }
        $this->data['title'] = translate('global_settings');
        $this->data['sub_page'] = 'settings/universal';
        $this->data['main_menu'] = 'settings';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function file_types_save()
    {
        if ($_POST !== []) {
            if (!get_permission('global_settings', 'is_view')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['image_extension' => ["label" => translate('image_extension'), "rules" => 'trim|required']]);
            $this->validation->setRules(['image_size' => ["label" => translate('image_size'), "rules" => 'trim|required|numeric']]);
            $this->validation->setRules(['file_extension' => ["label" => translate('file_extension'), "rules" => 'trim|required']]);
            $this->validation->setRules(['file_size' => ["label" => translate('file_size'), "rules" => 'trim|required|numeric']]);
            if ($this->validation->run() == true) {
                $arrayType = ['image_extension' => $this->request->getPost('image_extension'), 'image_size' => $this->request->getPost('image_size'), 'file_extension' => $this->request->getPost('file_extension'), 'file_size' => $this->request->getPost('file_size')];
                $this->db->table('id', 1)->where();
                $this->db->table('global_settings', $arrayType)->update();
                $array = ['status' => 'success', 'message' => translate('the_configuration_has_been_updated')];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function unique_branchname($name)
    {
        $this->db->where_not_in('id', get_loggedin_branch_id());
        $this->db->table('name', $name)->where();
        $name = $builder->get('branch')->num_rows();
        if ($name == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_branchname", translate('already_taken'));
            return false;
        }
    }
    public function payment()
    {
        if (!get_permission('payment_settings', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['config'] = $this->get_payment_config();
        $this->data['sub_page'] = 'settings/payment_gateway';
        $this->data['main_menu'] = 'settings';
        $this->data['title'] = translate('payment_control');
        echo view('layout/index', $this->data);
    }
    public function paypal_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['paypal_client_id' => ["label" => 'Client ID', "rules" => 'trim|required']]);
        $this->validation->setRules(['paypal_client_secret' => ["label" => 'Client Secret', "rules" => 'trim|required']]);
        $this->validation->setRules(['paypal_email' => ["label" => 'Paypal Email', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            // Correct handling of the checkbox when unchecked
            $paypal_sandbox = $this->request->getPost('paypal_sandbox') ? 1 : 0;
            // If checked, 1, otherwise, 0
            $arrayPaypal = ['paypal_client_id' => $this->request->getPost('paypal_client_id'), 'paypal_client_secret' => $this->request->getPost('paypal_client_secret'), 'paypal_email' => $this->request->getPost('paypal_email'), 'paypal_sandbox' => $paypal_sandbox];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaypal['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaypal)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaypal)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function stripe_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['stripe_publishiable_key' => ["label" => 'Stripe Publishiable Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['stripe_secret' => ["label" => 'Stripe Secret Key', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $stripe_demo = isset($_POST['stripe_demo']) ? 1 : 2;
            $arrayPaypal = ['stripe_publishiable' => $this->request->getPost('stripe_publishiable_key'), 'stripe_secret' => $this->request->getPost('stripe_secret'), 'stripe_demo' => $stripe_demo];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaypal['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaypal)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaypal)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function payumoney_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['payumoney_key' => ["label" => 'Payumoney Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['payumoney_salt' => ["label" => 'Payumoney Salt', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $payumoney_demo = isset($_POST['payumoney_demo']) ? 1 : 2;
            $arrayPayumoney = ['payumoney_key' => $this->request->getPost('payumoney_key'), 'payumoney_salt' => $this->request->getPost('payumoney_salt'), 'payumoney_demo' => $payumoney_demo];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPayumoney['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPayumoney)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPayumoney)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function paystack_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['paystack_secret_key' => ["label" => 'Paystack API Key', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayPaystack = ['paystack_secret_key' => $this->request->getPost('paystack_secret_key')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayMollie['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaystack)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaystack)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function razorpay_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['razorpay_key_id' => ["label" => 'Key Id', "rules" => 'trim|required']]);
        $this->validation->setRules(['razorpay_key_secret' => ["label" => 'Key Secret', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $razorpay_demo = isset($_POST['razorpay_demo']) ? 1 : 2;
            $arrayRazorpay = ['razorpay_key_id' => $this->request->getPost('razorpay_key_id'), 'razorpay_key_secret' => $this->request->getPost('razorpay_key_secret')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayRazorpay['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayRazorpay)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayRazorpay)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function payment_active()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $paypal_status = isset($_POST['paypal_status']) ? 1 : 0;
        $stripe_status = isset($_POST['stripe_status']) ? 1 : 0;
        $payumoney_status = isset($_POST['payumoney_status']) ? 1 : 0;
        $paystack_status = isset($_POST['paystack_status']) ? 1 : 0;
        $razorpay_status = isset($_POST['razorpay_status']) ? 1 : 0;
        $midtrans_status = isset($_POST['midtrans_status']) ? 1 : 0;
        $sslcommerz_status = isset($_POST['sslcommerz_status']) ? 1 : 0;
        $jazzcash_status = isset($_POST['jazzcash_status']) ? 1 : 0;
        $flutterwave_status = isset($_POST['flutterwave']) ? 1 : 0;
        $paytm_status = isset($_POST['paytm_status']) ? 1 : 0;
        $toyyibpay_status = isset($_POST['toyyibpay_status']) ? 1 : 0;
        $payhere_status = isset($_POST['payhere_status']) ? 1 : 0;
        $nepalste_status = isset($_POST['nepalste_status']) ? 1 : 0;
        $tap_status = isset($_POST['tap_status']) ? 1 : 0;
        $arrayData = ['paypal_status' => $paypal_status, 'stripe_status' => $stripe_status, 'payumoney_status' => $payumoney_status, 'paystack_status' => $paystack_status, 'razorpay_status' => $razorpay_status, 'midtrans_status' => $midtrans_status, 'sslcommerz_status' => $sslcommerz_status, 'jazzcash_status' => $jazzcash_status, 'flutterwave_status' => $flutterwave_status, 'paytm_status' => $paytm_status, 'toyyibpay_status' => $toyyibpay_status, 'payhere_status' => $payhere_status, 'nepalste_status' => $nepalste_status, 'tap_status' => $tap_status];
        $this->db->table('branch_id', $branchID)->where();
        $q = $builder->get('payment_config');
        if ($q->num_rows() == 0) {
            $arrayData['branch_id'] = $branchID;
            $this->db->table('payment_config', $arrayData)->insert();
        } else {
            $this->db->table('id', $q->row()->id)->where();
            $this->db->table('payment_config', $arrayData)->update();
        }
        $message = translate('the_configuration_has_been_updated');
        $array = ['status' => 'success', 'message' => $message];
        echo json_encode($array);
    }
    public function midtrans_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['midtrans_client_key' => ["label" => 'Client Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['midtrans_server_key' => ["label" => 'Server Key', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $sandbox = isset($_POST['midtrans_sandbox']) ? 1 : 2;
            $arrayMidtrans = ['midtrans_client_key' => $this->request->getPost('midtrans_client_key'), 'midtrans_server_key' => $this->request->getPost('midtrans_server_key'), 'midtrans_sandbox' => $sandbox];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayMidtrans['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayMidtrans)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayMidtrans)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function sslcommerz_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['sslcz_store_id' => ["label" => 'Store ID', "rules" => 'trim|required']]);
        $this->validation->setRules(['sslcz_store_passwd' => ["label" => 'Store Password', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $sandbox = isset($_POST['sslcommerz_sandbox']) ? 1 : 2;
            $arraySSLcommerz = ['sslcz_store_id' => $this->request->getPost('sslcz_store_id'), 'sslcz_store_passwd' => $this->request->getPost('sslcz_store_passwd'), 'sslcommerz_sandbox' => $sandbox];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arraySSLcommerz['branch_id'] = $branchID;
                $this->db->table('payment_config', $arraySSLcommerz)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arraySSLcommerz)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function jazzcash_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['jazzcash_merchant_id' => ["label" => 'Jazzcash Merchant ID', "rules" => 'trim|required']]);
        $this->validation->setRules(['jazzcash_passwd' => ["label" => 'Jazzcash Password', "rules" => 'trim|required']]);
        $this->validation->setRules(['jazzcash_integerity_salt' => ["label" => 'Jazzcash Integerity Salt', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $sandbox = isset($_POST['jazzcash_sandbox']) ? 1 : 2;
            $arraySSLcommerz = ['jazzcash_merchant_id' => $this->request->getPost('jazzcash_merchant_id'), 'jazzcash_passwd' => $this->request->getPost('jazzcash_passwd'), 'jazzcash_integerity_salt' => $this->request->getPost('jazzcash_integerity_salt'), 'jazzcash_sandbox' => $sandbox];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arraySSLcommerz['branch_id'] = $branchID;
                $this->db->table('payment_config', $arraySSLcommerz)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arraySSLcommerz)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function flutterwave_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['flutterwave_public_key' => ["label" => 'Public Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['flutterwave_secret_key' => ["label" => 'Secret Key', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $sandbox = isset($_POST['flutterwave_sandbox']) ? 1 : 2;
            $arrayFlutterwave = ['flutterwave_public_key' => $this->request->getPost('flutterwave_public_key'), 'flutterwave_secret_key' => $this->request->getPost('flutterwave_secret_key'), 'flutterwave_sandbox' => $sandbox];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayFlutterwave['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayFlutterwave)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayFlutterwave)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function paytm_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['paytm_merchantmid' => ["label" => 'Merchant MID', "rules" => 'trim|required']]);
        $this->validation->setRules(['paytm_merchantkey' => ["label" => 'Merchant Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['paytm_merchant_website' => ["label" => 'Website', "rules" => 'trim|required']]);
        $this->validation->setRules(['paytm_industry_type' => ["label" => 'Industry Type', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayPaytm = ['paytm_merchantmid' => $this->request->getPost('paytm_merchantmid'), 'paytm_merchantkey' => $this->request->getPost('paytm_merchantkey'), 'paytm_merchant_website' => $this->request->getPost('paytm_merchant_website'), 'paytm_industry_type' => $this->request->getPost('paytm_industry_type')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaytm['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaytm)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaytm)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function toyyibPay_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['toyyibpay_secretkey' => ["label" => 'Secret key', "rules" => 'trim|required']]);
        $this->validation->setRules(['toyyibpay_categorycode' => ["label" => 'Category Code', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayPaytm = ['toyyibpay_secretkey' => $this->request->getPost('toyyibpay_secretkey'), 'toyyibpay_categorycode' => $this->request->getPost('toyyibpay_categorycode')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaytm['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaytm)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaytm)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function payhere_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['payhere_merchant_id' => ["label" => 'Merchant ID', "rules" => 'trim|required']]);
        $this->validation->setRules(['payhere_merchant_secret' => ["label" => 'Merchant Secret', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayPaytm = ['payhere_merchant_id' => $this->request->getPost('payhere_merchant_id'), 'payhere_merchant_secret' => $this->request->getPost('payhere_merchant_secret')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaytm['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaytm)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaytm)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function nepalste_save()
    {
        if (!get_permission('payment_settings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['nepalste_public_key' => ["label" => 'Public Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['nepalste_secret_key' => ["label" => 'Secret Key', "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $arrayPaytm = ['nepalste_public_key' => $this->request->getPost('nepalste_public_key'), 'nepalste_secret_key' => $this->request->getPost('nepalste_secret_key')];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayPaytm['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayPaytm)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayPaytm)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    //fahad - tap payment
    public function tap_save()
    {
        if (!get_permission('payment_graphsettings', 'is_add')) {
            ajax_access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->validation->setRules(['tap_secret_key' => ["label" => 'Tap Secret Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['tap_public_key' => ["label" => 'Tap Public Key', "rules" => 'trim|required']]);
        $this->validation->setRules(['tap_merchant_id' => ["label" => 'Tap Merchant ID', "rules" => 'trim|required']]);
        // Add validation rule for merchant ID
        if ($this->validation->run() !== false) {
            $tapDemo = $this->request->getPost('tap_demo') == 1 ? 1 : 0;
            $arrayTap = [
                'tap_secret_key' => $this->request->getPost('tap_secret_key'),
                'tap_public_key' => $this->request->getPost('tap_public_key'),
                'tap_merchant_id' => $this->request->getPost('tap_merchant_id'),
                // Add merchant ID to the data array
                'tap_demo' => $tapDemo,
            ];
            $this->db->table('branch_id', $branchID)->where();
            $q = $builder->get('payment_config');
            if ($q->num_rows() == 0) {
                $arrayTap['branch_id'] = $branchID;
                $this->db->table('payment_config', $arrayTap)->insert();
            } else {
                $this->db->table('id', $q->row()->id)->where();
                $this->db->table('payment_config', $arrayTap)->update();
            }
            $message = translate('the_configuration_has_been_updated');
            $array = ['status' => 'success', 'message' => $message];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function branchUpdate($data)
    {
        $arrayBranch = ['name' => $data['branch_name'], 'school_name' => $data['school_name'], 'email' => $data['email'], 'mobileno' => $data['mobileno'], 'currency' => $data['currency'], 'symbol' => $data['currency_symbol'], 'city' => $data['city'], 'state' => $data['state'], 'address' => $data['address']];
        $this->db->table('id', get_loggedin_branch_id())->where();
        $this->db->table('branch', $arrayBranch)->update();
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Student.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\EmailModel;
use App\Models\SmsModel;
use App\Models\StudentFieldsModel;
use App\Models\FeesModel;
use App\Models\ExamModel;
/**
 * @package : Ramom school management system
 * @version : 6.8
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Student.php
 * @copyright : Reserved RamomCoder Team
 */
class Student extends AdminController
 
{
    public $bulk;
    protected $db;


    public $load;
    /**
     * @var App\Models\StudentModel
     */
    public $student;
    /**
     * @var App\Models\EmailModel
     */
    public $email;
    /**
     * @var App\Models\SmsModel
     */
    public $sms;
    /**
     * @var App\Models\StudentFieldsModel
     */
    public $studentFields;
    public $applicationModel;
    public $validation;
    public $student_fieldsModel;
    public $router;
    public $appLib;
    public $input;
    public $studentModel;
    public $emailModel;
    public $smsModel;
    public $csvimport;
    public $session;
    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    /**
     * @var App\Models\ExamModel
     */
    public $exam;
    public $upload;
    public $uri;
    public function __construct()
    {


        parent::__construct();
        
        
        
        $this->csvimport = service('csvimport');$this->bulk = service('bulk');$this->appLib = service('appLib'); 
$this->load->helpers('download');
        $this->load->helpers('custom_fields');
        $this->student = new \App\Models\StudentModel();
        $this->email = new \App\Models\EmailModel();
        $this->sms = new \App\Models\SmsModel();
        $this->studentFields = new \App\Models\StudentFieldsModel();
    }
    public function index()
    {
        return redirect()->to(base_url('student/view'));
    }
    /* student form validation rules */
    protected function student_validation()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $getBranch = $this->getBranchDetails();
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['year_id' => ["label" => translate('academic_year'), "rules" => 'trim|required']]);
        $this->validation->setRules(['first_name' => ["label" => translate('first_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
        $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
        $this->validation->setRules(['register_no' => ["label" => translate('register_no'), "rules" => 'trim|required|callback_unique_registerid']]);
        // checking profile photo format
        $this->validation->setRules(['user_photo' => ["label" => translate('profile_picture'), "rules" => 'callback_photoHandleUpload[user_photo]']]);
        // system fields validation rules
        $validArr = [];
        $validationArr = $this->student_fieldsModel->getStatusArr($branchID);
        foreach ($validationArr as $value) {
    if ($value->status && $value->required) {
                $validArr[$value->prefix] = 1;
}
        }
        if (isset($validArr['admission_date'])) {
            $this->validation->setRules(['admission_date' => ["label" => translate('admission_date'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['student_photo']) && (isset($_FILES["user_photo"]) && empty($_FILES["user_photo"]['name']) && empty($_POST['old_user_photo']))) {
            $this->validation->setRules(['user_photo' => ["label" => translate('profile_picture'), "rules" => 'required']]);
        }
        if (isset($validArr['roll'])) {
            $this->validation->setRules(['roll' => ["label" => translate('roll'), "rules" => 'trim|numeric|required|callback_unique_roll']]);
        } else {
            $this->validation->setRules(['roll' => ["label" => translate('roll'), "rules" => 'trim|numeric|callback_unique_roll']]);
        }
        if (isset($validArr['last_name'])) {
            $this->validation->setRules(['last_name' => ["label" => translate('last_name'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['gender'])) {
            $this->validation->setRules(['gender' => ["label" => translate('gender'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['birthday'])) {
            $this->validation->setRules(['birthday' => ["label" => translate('birthday'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['category'])) {
            $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['religion'])) {
            $this->validation->setRules(['religion' => ["label" => translate('religion'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['caste'])) {
            $this->validation->setRules(['caste' => ["label" => translate('caste'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['blood_group'])) {
            $this->validation->setRules(['blood_group' => ["label" => translate('blood_group'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['mother_tongue'])) {
            $this->validation->setRules(['mother_tongue' => ["label" => translate('mother_tongue'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['present_address'])) {
            $this->validation->setRules(['current_address' => ["label" => translate('present_address'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['permanent_address'])) {
            $this->validation->setRules(['permanent_address' => ["label" => translate('permanent_address'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['city'])) {
            $this->validation->setRules(['city' => ["label" => translate('city'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['state'])) {
            $this->validation->setRules(['state' => ["label" => translate('state'), "rules" => 'trim|required']]);
        }
        if (isset($validArr['student_email'])) {
            $this->validation->setRules(['email' => ["label" => translate('email'), "rules" => 'trim|required|valid_email']]);
        }
        if (isset($validArr['student_mobile_no'])) {
            $this->validation->setRules(['mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
        }
        if (isset($validArr['previous_school_details'])) {
            $this->validation->setRules(['school_name' => ["label" => translate('school_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['qualification' => ["label" => translate('qualification'), "rules" => 'trim|required']]);
        }
        if ($getBranch['stu_generate'] == 0 || isset($_POST['student_id'])) {
            $this->validation->setRules(['username' => ["label" => translate('username'), "rules" => 'trim|required|callback_unique_username']]);
            if (!isset($_POST['student_id'])) {
                $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
                $this->validation->setRules(['retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[password]']]);
            }
        }
        // custom fields validation rules
        $class_slug = $this->router->fetch_class();
        $customFields = getCustomFields($class_slug);
        foreach ($customFields as $fields_value) {
    if ($fields_value['required']) {
                $fieldsID = $fields_value['id'];
                $fieldLabel = $fields_value['field_label'];
                $this->validation->setRules(["custom_fields[student][" . $fieldsID . "]" => ["label" => $fieldLabel, "rules" => 'trim|required']]);
}
        }
    }
    /* student admission information are prepared and stored in the database here */
    public function add()
    {
        // check access permission
        if (!get_permission('student', 'is_add')) {
            access_denied();
        }
        // check saas student add limit
        if ($this->appLib->isExistingAddon('saas') && !checkSaasLimit('student')) {
            set_alert('error', translate('update_your_package'));
            redirect(site_url('dashboard'));
        }
        $getBranch = $this->getBranchDetails();
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['getBranch'] = $getBranch;
        $this->data['branch_id'] = $branchID;
        $this->data['sub_page'] = 'student/add';
        $this->data['main_menu'] = 'admission';
        $this->data['register_id'] = $this->studentModel->regSerNumber($branchID);
        $this->data['title'] = translate('create_admission');
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['js/student.js', 'vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    public function save()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('student', 'is_add')) {
                ajax_access_denied();
            }
            // check saas student add limit
            if ($this->appLib->isExistingAddon('saas') && !checkSaasLimit('student')) {
                ajax_access_denied();
            }
            $getBranch = $this->getBranchDetails();
            $branchID = $this->applicationModel->get_branch_id();
            $this->student_validation();
            if (!isset($_POST['guardian_chk'])) {
                // system fields validation rules
                $validArr = [];
                $validationArr = $this->student_fieldsModel->getStatusArr($branchID);
                foreach ($validationArr as $value) {
    if ($value->status && $value->required) {
                        $validArr[$value->prefix] = 1;
}
                }
                if (isset($validArr['guardian_name'])) {
                    $this->validation->setRules(['grd_name' => ["label" => translate('name'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_relation'])) {
                    $this->validation->setRules(['grd_relation' => ["label" => translate('relation'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['father_name'])) {
                    $this->validation->setRules(['father_name' => ["label" => translate('father_name'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['mother_name'])) {
                    $this->validation->setRules(['mother_name' => ["label" => translate('mother_name'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_occupation'])) {
                    $this->validation->setRules(['grd_occupation' => ["label" => translate('occupation'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_income'])) {
                    $this->validation->setRules(['grd_income' => ["label" => translate('occupation'), "rules" => 'trim|required|numeric']]);
                }
                if (isset($validArr['guardian_education'])) {
                    $this->validation->setRules(['grd_education' => ["label" => translate('education'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_email'])) {
                    $this->validation->setRules(['grd_email' => ["label" => translate('email'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_mobile_no'])) {
                    $this->validation->setRules(['grd_mobileno' => ["label" => translate('mobile_no'), "rules" => 'trim|required|numeric']]);
                }
                if (isset($validArr['guardian_address'])) {
                    $this->validation->setRules(['grd_address' => ["label" => translate('address'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_photo']) && (isset($_FILES["guardian_photo"]) && empty($_FILES["guardian_photo"]['name']))) {
                    $this->validation->setRules(['guardian_photo' => ["label" => translate('guardian_picture'), "rules" => 'required']]);
                }
                if (isset($validArr['guardian_city'])) {
                    $this->validation->setRules(['grd_city' => ["label" => translate('city'), "rules" => 'trim|required']]);
                }
                if (isset($validArr['guardian_state'])) {
                    $this->validation->setRules(['grd_state' => ["label" => translate('state'), "rules" => 'trim|required']]);
                }
                if ($getBranch['grd_generate'] == 0) {
                    if (isset($validArr['grd_username'])) {
                        $this->validation->setRules(['grd_username' => ["label" => translate('username'), "rules" => 'trim|required|callback_get_valid_guardian_username']]);
                    }
                    if (isset($validArr['grd_password'])) {
                        $this->validation->setRules(['grd_password' => ["label" => translate('password'), "rules" => 'trim|required']]);
                        $this->validation->setRules(['grd_retype_password' => ["label" => translate('retype_password'), "rules" => 'trim|required|matches[grd_password]']]);
                    }
                }
            } else {
                $this->validation->setRules(['parent_id' => ["label" => translate('guardian'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                //save all student information in the database file
                $studentData = $this->studentModel->save($post, $getBranch);
                $studentID = $studentData['student_id'];
                //save student enroll information in the database file
                $arrayEnroll = ['student_id' => $studentID, 'class_id' => $post['class_id'], 'section_id' => $post['section_id'], 'roll' => $post['roll'] ?? 0, 'session_id' => $post['year_id'], 'branch_id' => $branchID];
                $this->db->table('enroll', $arrayEnroll)->insert();
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $studentID);
                }
                // send student admission email
                $this->emailModel->studentAdmission($studentData);
                // send account activate sms
                $this->smsModel->send_sms($arrayEnroll, 1);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('student/add');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    /* csv file to import student information and stored in the database here */
    public function csv_import()
    {
        // check access permission
        if (!get_permission('multiple_import', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['save'])) {
            $err_msg = "";
            $i = 0;
            $this->Csvimport = service('csvimport');
            // form validation rules
            if (is_superadmin_loggedin() == true) {
                $this->validation->setRules(['branch_id' => ["label" => 'Branch', "rules" => 'trim|required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => 'Class', "rules" => 'trim|required']]);
            $this->validation->setRules(['section_id' => ["label" => 'Section', "rules" => 'trim|required']]);
            if (isset($_FILES["userfile"]) && empty($_FILES['userfile']['name'])) {
                $this->validation->setRules(['userfile' => ["label" => 'CSV File', "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $csv_array = $this->csvimport->get_array($_FILES["userfile"]["tmp_name"]);
                if ($csv_array) {
                    $columnHeaders = ['FirstName', 'LastName', 'BloodGroup', 'Gender', 'Birthday', 'MotherTongue', 'Religion', 'Caste', 'Phone', 'City', 'State', 'PresentAddress', 'PermanentAddress', 'CategoryID', 'Roll', 'RegisterNo', 'AdmissionDate', 'StudentEmail', 'StudentUsername', 'StudentPassword', 'GuardianName', 'GuardianRelation', 'FatherName', 'MotherName', 'GuardianOccupation', 'GuardianMobileNo', 'GuardianAddress', 'GuardianEmail', 'GuardianUsername', 'GuardianPassword'];
                    $csvData = [];
                    foreach ($csv_array as $row) {
    if ($i == 0) {
                            $csvData = array_keys($row);
}
                        $csv_chk = array_diff($columnHeaders, $csvData);
                        if (count($csv_chk) <= 0) {
                            $schoolSettings = $this->studentModel->get('branch', ['id' => $branchID], true, false, 'unique_roll');
                            $unique_roll = $schoolSettings['unique_roll'];
                            $r = $this->csvCheckExistsData($unique_roll, $row['StudentUsername'], $row['Roll'], $row['RegisterNo'], $classID, $sectionID, $branchID);
                            if ($r['status'] == false) {
                                $err_msg .= $row['FirstName'] . ' ' . $row['LastName'] . " - Imported Failed : " . $r['message'] . "<br>";
                            } else {
                                $this->studentModel->csvImport($row, $classID, $sectionID, $branchID);
                                $i++;
                            }
                        } else {
                            set_alert('error', translate('invalid_csv_file'));
                            return redirect()->to(base_url("student/csv_import"));
                        }
                    }
                    if ($err_msg != null) {
                        session()->set_flashdata('csvimport', $err_msg);
                    }
                    if ($i > 0) {
                        set_alert('success', $i . ' Students Have Been Successfully Added');
                    }
                    return redirect()->to(base_url("student/csv_import"));
                } else {
                    set_alert('error', translate('invalid_csv_file'));
                    return redirect()->to(base_url("student/csv_import"));
                }
            }
        }
        $this->data['title'] = translate('multiple_import');
        $this->data['branch_id'] = $branchID;
        $this->data['sub_page'] = 'student/multi_add';
        $this->data['main_menu'] = 'admission';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* showing disable authentication student list */
    public function disable_authentication()
    {
        // check access permission
        if (!get_permission('student_disable_authentication', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['students'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID, true);
        }
        if (isset($_POST['auth'])) {
            if (!get_permission('student_disable_authentication', 'is_add')) {
                access_denied();
            }
            $stafflist = $this->request->getPost('views_bulk_operations');
            if (isset($stafflist)) {
                foreach ($stafflist as $id) {
    $this->db->table(['role' => 7, 'user_id' => $id])->where();
                    $this->db->table('login_credential', ['active' => 1])->update();
}
                set_alert('success', translate('information_has_been_updated_successfully'));
            } else {
                set_alert('error', 'Please select at least one item');
            }
            return redirect()->to(base_url('student/disable_authentication'));
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('deactivate_account');
        $this->data['sub_page'] = 'student/disable_authentication';
        $this->data['main_menu'] = 'student';
        echo view('layout/index', $this->data);
    }
    // add new student category
    public function category()
    {
        if (isset($_POST['category'])) {
            if (!get_permission('student_category', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['category_name' => ["label" => translate('category_name'), "rules" => 'trim|required|callback_unique_category']]);
            if ($this->validation->run() !== false) {
                $arrayData = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('student_category', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('student/category'));
            }
        }
        $this->data['title'] = translate('student') . " " . translate('details');
        $this->data['sub_page'] = 'student/category';
        $this->data['main_menu'] = 'admission';
        echo view('layout/index', $this->data);
    }
    // update existing student category
    public function category_edit()
    {
        if (!get_permission('student_category', 'is_edit')) {
            ajax_access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['category_name' => ["label" => translate('category_name'), "rules" => 'trim|required|callback_unique_category']]);
        if ($this->validation->run() !== false) {
            $category_id = $this->request->getPost('category_id');
            $arrayData = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $category_id)->where();
            $this->db->table('student_category', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // delete student category from database
    public function category_delete($id)
    {
        if (get_permission('student_category', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('student_category')->delete();
        }
    }
    // student category details send by ajax
    public function categoryDetails()
    {
        if (get_permission('student_category', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $query = $builder->get('student_category');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    /* validate here, if the check student category name */
    public function unique_category($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $category_id = $this->request->getPost('category_id');
        if (!empty($category_id)) {
            $this->db->where_not_in('id', $category_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('student_category')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_category", translate('already_taken'));
            return false;
        }
    }
    /* showing student list by class and section */
    public function view()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['students'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID, false, true);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_list');
        $this->data['main_menu'] = 'student';
        $this->data['sub_page'] = 'student/view';
        $this->data['headerelements'] = ['js' => ['js/student.js']];
        echo view('layout/index', $this->data);
    }
    /* profile preview and information are updating here */
    public function profile($id = '')
    {
        // check access permission
        if (!get_permission('student', 'is_edit')) {
            access_denied();
        }
        $this->fees = new \App\Models\FeesModel();
        $this->exam = new \App\Models\ExamModel();
        $getStudent = $this->studentModel->getSingleStudent($id, true);
        if (isset($_POST['update'])) {
            session()->set_flashdata('profile_tab', 1);
            $this->data['branch_id'] = $this->applicationModel->get_branch_id();
            $this->student_validation();
            $this->validation->setRules(['parent_id' => ["label" => translate('guardian'), "rules" => 'required']]);
            if ($this->validation->run() == true) {
                $post = $this->request->getPost();
                //save all student information in the database file
                $studentID = $this->studentModel->save($post);
                //save student enroll information in the database file
                $arrayEnroll = ['class_id' => $this->request->getPost('class_id'), 'section_id' => $this->request->getPost('section_id'), 'roll' => $this->request->getPost('roll'), 'session_id' => $this->request->getPost('year_id'), 'branch_id' => $this->data['branch_id']];
                $this->db->table('id', $getStudent['enrollid'])->where();
                $this->db->table('enroll', $arrayEnroll)->update();
                // handle custom fields data
                $class_slug = $this->router->fetch_class();
                $customField = $this->request->getPost("custom_fields[{$class_slug}]");
                if (!empty($customField)) {
                    saveCustomFields($customField, $id);
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                return redirect()->to(base_url('student/profile/' . $id));
            }
        }
        $this->data['student'] = $getStudent;
        $this->data['title'] = translate('student_profile');
        $this->data['sub_page'] = 'student/profile';
        $this->data['main_menu'] = 'student';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['js/student.js', 'vendor/dropify/js/dropify.min.js']];
        echo view('layout/index', $this->data);
    }
    /* student information delete here */
    public function delete_data($eid = '', $sid = '')
    {
        if (get_permission('student', 'is_delete')) {
            $branchID = get_type_name_by_id('enroll', $eid, 'branch_id');
            // Check student restrictions
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('student_id', $sid)->delete('enroll')->where();
            if ($db->affectedRows() > 0) {
                $this->db->table('id', $sid)->delete('student')->where();
                $this->db->table(['user_id' => $sid, 'role' => 7])->delete('login_credential')->where();
                $r = $db->table('fee_allocation')->get('fee_allocation')->result_array();
                $this->db->where_in('student_id', $sid)->delete('fee_allocation');
                $r = array_column($r, 'id');
                if ($r !== []) {
                    $this->db->where_in('allocation_id', $r)->delete('fee_payment_history');
                }
                $get_field = $db->table('custom_field')->get('custom_field')->result_array();
                $field_id = array_column($get_field, 'id');
                $this->db->table('relid', $sid)->where();
                $this->db->where_in('field_id', $field_id);
                $this->db->table('custom_fields_values')->delete();
            }
        }
    }
    // student document details are create here / ajax
    public function document_create()
    {
        if (!get_permission('student', 'is_edit')) {
            ajax_access_denied();
        }
        $this->validation->setRules(['document_title' => ["label" => translate('document_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['document_category' => ["label" => translate('document_category'), "rules" => 'trim|required']]);
        if (isset($_FILES['document_file']['name']) && empty($_FILES['document_file']['name'])) {
            $this->validation->setRules(['document_file' => ["label" => translate('document_file'), "rules" => 'required']]);
        }
        if ($this->validation->run() !== false) {
            $insert_doc = [
                'student_id' => $this->request->getPost('patient_id'), 
                'title' => $this->request->getPost('document_title'), 
                'type' => $this->request->getPost('document_category'), 
                'remarks' => $this->request->getPost('remarks')
            ];
            // uploading file using codeigniter upload library
            $config['upload_path'] = './uploads/attachments/documents/';
            $config['allowed_types'] = 'gif|jpg|png|pdf|docx|csv|txt';
            $config['max_size'] = '2048';
            $config['encrypt_name'] = true;
            $file = $this->request->getFile('attachment_file');
            $file->initialize($config);
    
            if ($file->isValid() && !$file->hasMoved()) {
                $file->move($config['upload_path']);
                $insert_doc['file_name'] = $file->getClientName();
                $insert_doc['enc_name'] = $file->getName();
                $this->db->table('student_documents')->insert($insert_doc);
                set_alert('success', translate('information_has_been_saved_successfully'));
            } else {
                set_alert('error', strip_tags((string) $file->getErrorString()));
            }
    
            session()->setFlashdata('documents_details', 1);
            echo json_encode(['status' => 'success']);
        } else {
            $error = $this->validation->getErrors();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    
    // student document details are update here / ajax
    public function document_update()
    {
        if (!get_permission('student', 'is_edit')) {
            ajax_access_denied();
        }
        // validate inputs
        $this->validation->setRules(['document_title' => ["label" => translate('document_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['document_category' => ["label" => translate('document_category'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $document_id = $this->request->getPost('document_id');
            $insert_doc = [
                'title' => $this->request->getPost('document_title'),
                'type' => $this->request->getPost('document_category'),
                'remarks' => $this->request->getPost('remarks')
            ];
            if (isset($_FILES["document_file"]) && !empty($_FILES['document_file']['name'])) {
                $config['upload_path'] = './uploads/attachments/documents/';
                $config['allowed_types'] = 'gif|jpg|png|pdf|docx|csv|txt';
                $config['max_size'] = '2048';
                $config['encrypt_name'] = true;
                $file = $this->request->getFile('document_file');
                $file->move($config['upload_path'], $file->getRandomName());
                if ($file->isValid() && !$file->hasMoved()) {
                    $exist_file_name = $this->request->getPost('exist_file_name');
                    $exist_file_path = FCPATH . 'uploads/attachments/documents/' . $exist_file_name;
                    if (file_exists($exist_file_path)) {
                        unlink($exist_file_path);
                    }
                    $insert_doc['file_name'] = $file->getClientName();
                    $insert_doc['enc_name'] = $file->getName();
                    set_alert('success', translate('information_has_been_updated_successfully'));
                } else {
                    set_alert('error', strip_tags($file->getErrorString()));
                }
            }
            $this->db->table('student_documents')->where('id', $document_id)->update($insert_doc);
            echo json_encode(['status' => 'success']);
            session()->setFlashdata('documents_details', 1);
        } else {
            $error = $this->validation->getErrors();
            echo json_encode(['status' => 'fail', 'error' => $error]);
        }
    }
    
    // student document details are delete here
    public function document_delete($id)
    {
        if (get_permission('student', 'is_edit')) {
            $enc_name = $db->table('student_documents')->get('student_documents')->row()->enc_name;
            $file_name = FCPATH . 'uploads/attachments/documents/' . $enc_name;
            if (file_exists($file_name)) {
                unlink($file_name);
            }
            $this->db->table('id', $id)->where();
            $this->db->table('student_documents')->delete();
            session()->set_flashdata('documents_details', 1);
        }
    }
    public function document_details()
    {
        $id = $this->request->getPost('id');
        $this->db->table('id', $id)->where();
        $query = $builder->get('student_documents');
        $result = $query->row_array();
        echo json_encode($result);
    }
    // file downloader
    public function documents_download()
    {
        $encrypt_name = urldecode((string) $this->request->getGet('file'));
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $encrypt_name)) {
            $file_name = $db->table('student_documents')->get('student_documents')->row()->file_name;
            if (!empty($file_name)) {
                helper('download');
                return $this->response->download($file_name, file_get_contents('./uploads/attachments/documents/' . $encrypt_name));
            }
        }
    }
    /* sample csv downloader */
    public function csv_Sampledownloader()
    {
        helper('download');
        $data = file_get_contents('uploads/multi_student_sample.csv');
        return $this->response->download("multi_student_sample.csv", $data);
    }
    /* validate here, if the check multi admission  email and roll */
    public function csvCheckExistsData($unique_roll, $student_username = '', $roll = '', $registerno = '', $class_id = '', $section_id = '', $branchID = '')
    {
        $array = [];
        if (!empty($roll) && $unique_roll != 0) {
            if ($unique_roll == 2) {
                $this->db->table('section_id', $section_id)->where();
            }
            $this->db->table(['roll' => $roll, 'class_id' => $class_id, 'branch_id' => $branchID])->where();
            $rollQuery = $builder->get('enroll');
            if ($rollQuery->num_rows() > 0) {
                $array['status'] = false;
                $array['message'] = "Roll Already Exists.";
                return $array;
            }
        }
        if ($student_username !== '') {
            $this->db->table('username', $student_username)->where();
            $query = $builder->getWhere('login_credential');
            if ($query->num_rows() > 0) {
                $array['status'] = false;
                $array['message'] = "Student Username Already Exists.";
                return $array;
            }
        }
        if ($registerno !== '') {
            $this->db->table('register_no', $registerno)->where();
            $query = $builder->getWhere('student');
            if ($query->num_rows() > 0) {
                $array['status'] = false;
                $array['message'] = "Student Register No Already Exists.";
                return $array;
            }
        } else {
            $array['status'] = false;
            $array['message'] = "Register No Is Required.";
            return $array;
        }
        $array['status'] = true;
        return $array;
    }
    // unique valid username verification is done here
    public function unique_username($username)
    {
        if ($this->request->getPost('student_id')) {
            $student_id = $this->request->getPost('student_id');
            $login_id = $this->appLib->get_credential_id($student_id, 'student');
            $this->db->where_not_in('id', $login_id);
        }
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_username", translate('already_taken'));
            return false;
        } else {
            return true;
        }
    }
    /* unique valid guardian email address verification is done here */
    public function get_valid_guardian_username($username)
    {
        $this->db->table('username', $username)->where();
        $query = $builder->get('login_credential');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("get_valid_guardian_username", translate('username_has_already_been_used'));
            return false;
        } else {
            return true;
        }
    }
    /* unique valid student roll verification is done here */
    public function unique_roll($roll)
    {
        if (empty($roll)) {
            return true;
        }
        $branchID = $this->applicationModel->get_branch_id();
        $schoolSettings = $this->studentModel->get('branch', ['id' => $branchID], true, false, 'unique_roll');
        $unique_roll = $schoolSettings['unique_roll'];
        if (empty($unique_roll) && $unique_roll == 0) {
            return true;
        }
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        if ($this->uri->segment(3)) {
            $studentID = $db->table('enroll')->get('enroll')->row()->student_id;
            $this->db->where_not_in('student_id', $studentID);
        }
        if ($unique_roll == 2) {
            $this->db->table('section_id', $sectionID)->where();
        }
        $this->db->table(['roll' => $roll, 'class_id' => $classID, 'branch_id' => $branchID, 'session_id' => get_session_id()])->where();
        $q = $builder->get('enroll')->num_rows();
        if ($q == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_roll", translate('already_taken'));
            return false;
        }
    }
    /* unique valid register ID verification is done here */
    public function unique_registerid($register)
    {
        $this->applicationModel->get_branch_id();
        if ($this->uri->segment(3)) {
            $studentID = $db->table('enroll')->get('enroll')->row()->student_id;
            $this->db->where_not_in('id', $studentID);
        }
        $this->db->table('register_no', $register)->where();
        $query = $builder->get('student')->num_rows();
        if ($query == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_registerid", translate('already_taken'));
            return false;
        }
    }
    public function search()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $search_text = $this->request->getPost('search_text');
        $this->data['query'] = $this->studentModel->getSearchStudentList(trim((string) $search_text));
        $this->data['title'] = translate('searching_results');
        $this->data['sub_page'] = 'student/search';
        $this->data['main_menu'] = '';
        echo view('layout/index', $this->data);
    }
    /* student password change here */
    public function change_password()
    {
        if (get_permission('student', 'is_edit')) {
            if (!isset($_POST['authentication'])) {
                $this->validation->setRules(['password' => ["label" => translate('password'), "rules" => 'trim|required|min_length[4]']]);
            } else {
                $this->validation->setRules(['date' => ["label" => translate('date'), "rules" => 'trim|required']]);
                $this->validation->setRules(['reason_id' => ["label" => translate('disable_reason'), "rules" => 'trim|required']]);
            }
            if ($this->validation->run() !== false) {
                $studentID = $this->request->getPost('student_id');
                $password = $this->request->getPost('password');
                if (!isset($_POST['authentication'])) {
                    $this->db->table('role', 7)->where();
                    $this->db->table('user_id', $studentID)->where();
                    $this->db->table('login_credential', ['password' => $this->appLib->pass_hashed($password)])->update();
                } else {
                    $this->db->table('role', 7)->where();
                    $this->db->table('user_id', $studentID)->where();
                    $this->db->table('login_credential', ['active' => 0])->update();
                    // insert disable reason history in DB
                    $insertData = ['student_id' => $studentID, 'reason_id' => $this->request->getPost('reason_id'), 'note' => $this->request->getPost('note'), 'date' => date("Y-m-d", strtotime((string) $this->request->getPost('date')))];
                    $this->db->table('disable_reason_details', $insertData)->insert();
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // student quick details
    public function quickDetails()
    {
        $id = $this->request->getPost('student_id');
        $builder->select('student.*,enroll.student_id,enroll.roll,student_category.name as cname');
        $this->db->from('enroll');
        $builder->join('student', 'student.id = enroll.student_id', 'inner');
        $builder->join('student_category', 'student_category.id = student.category_id', 'left');
        $this->db->table('enroll.id', $id)->where();
        $row = $builder->get()->row();
        $data['photo'] = get_image_url('student', $row->photo);
        $data['full_name'] = $row->first_name . " " . $row->last_name;
        $data['student_category'] = $row->cname;
        $data['register_no'] = $row->register_no;
        $data['roll'] = $row->roll;
        $data['admission_date'] = empty($row->admission_date) ? "N/A" : _d($row->admission_date);
        $data['birthday'] = empty($row->birthday) ? "N/A" : _d($row->birthday);
        $data['blood_group'] = empty($row->blood_group) ? "N/A" : $row->blood_group;
        $data['religion'] = empty($row->religion) ? "N/A" : $row->religion;
        $data['email'] = $row->email;
        $data['mobileno'] = empty($row->mobileno) ? "N/A" : $row->mobileno;
        $data['state'] = empty($row->state) ? "N/A" : $row->state;
        $data['address'] = empty($row->current_address) ? "N/A" : $row->current_address;
        echo json_encode($data);
    }
    public function bulk_delete()
    {
        $status = 'success';
        $message = translate('information_deleted');
        if (get_permission('student', 'is_delete')) {
            $arrayID = $this->request->getPost('array_id');
            foreach ($arrayID as $row) {
    $branchID = get_type_name_by_id('enroll', $row, 'branch_id');
                $get_field = $db->table('custom_field')->get('custom_field')->result_array();
                $field_id = array_column($get_field, 'id');
                $this->db->table('relid', $row)->where();
                $this->db->where_in('field_id', $field_id);
                $this->db->table('custom_fields_values')->delete();
}
            $this->db->where_in('student_id', $arrayID)->delete('enroll');
            $this->db->where_in('id', $arrayID)->delete('student');
            $this->db->where_in('user_id', $arrayID)->where('role', 7)->delete('login_credential');
            $r = $builder->select('id')->where_in('student_id', $arrayID)->get('fee_allocation')->result_array();
            $this->db->where_in('student_id', $arrayID)->delete('fee_allocation');
            $r = array_column($r, 'id');
            if ($r !== []) {
                $this->db->where_in('allocation_id', $r)->delete('fee_payment_history');
            }
        } else {
            $message = translate('access_denied');
            $status = 'error';
        }
        echo json_encode(['status' => $status, 'message' => $message]);
    }
    /* student login credential list by class and section */
    public function login_credential_reports()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['students'] = $this->applicationModel->getStudentListByClassSection($classID, $sectionID, $branchID, false, true);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('login_credential');
        $this->data['main_menu'] = 'student_repots';
        $this->data['sub_page'] = 'student/login_credential_reports';
        echo view('layout/index', $this->data);
    }
    public function password_reset($type)
    {
        if ($_POST !== []) {
            $this->validation->setRules(['new_password' => ["label" => 'New Password', "rules" => 'trim|required|min_length[4]']]);
            $this->validation->setRules(['confirm_password' => ["label" => 'Confirm Password', "rules" => 'trim|required|min_length[4]|matches[new_password]']]);
            if ($this->validation->run() == true) {
                $new_password = $this->request->getPost('new_password');
                if (!empty($type)) {
                    if ($type == 'student') {
                        $student_id = $this->request->getPost('student_id');
                        if (!is_superadmin_loggedin()) {
                            $chkID = $db->table('enroll')->get('enroll')->row();
                            if (empty($chkID)) {
                                exit;
                            }
                        }
                        $this->db->table('user_id', $student_id)->where();
                        $this->db->table('role', 7)->where();
                    }
                    if ($type == 'parent') {
                        $parent_id = $this->request->getPost('parent_id');
                        if (!is_superadmin_loggedin()) {
                            $chkID = $db->table('parent')->get('parent')->row();
                            if (empty($chkID)) {
                                exit;
                            }
                        }
                        $this->db->table('user_id', $parent_id)->where();
                        $this->db->table('role', 6)->where();
                    }
                    $this->db->table('login_credential', ['password' => $this->appLib->pass_hashed($new_password)])->update();
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    /* student admission list by date */
    public function admission_reports()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start = date("Y-m-d", strtotime($daterange[0]));
            $end = date("Y-m-d", strtotime($daterange[1]));
            $this->data['start'] = $start;
            $this->data['end'] = $end;
            $this->data['students'] = $this->studentModel->getStudentList($classID, $sectionID, $branchID, false, $start, $end)->result_array();
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('admission_reports');
        $this->data['main_menu'] = 'student_repots';
        $this->data['sub_page'] = 'student/admission_reports';
        $this->data['headerelements'] = ['css' => ['vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function classsection_reports()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('class_&_section');
        $this->data['main_menu'] = 'student_repots';
        $this->data['sub_page'] = 'student/classsection_reports';
        echo view('layout/index', $this->data);
    }
    // add new student deactivate reason
    public function disable_reason()
    {
        if (isset($_POST['disable_reason'])) {
            if (!get_permission('disable_reason', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['name' => ["label" => translate('reason'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $arrayData = ['name' => $this->request->getPost('name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('disable_reason', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('student/disable_reason'));
            }
        }
        $this->data['title'] = translate('deactivate_reason');
        $this->data['categorylist'] = $this->appLib->getTable('disable_reason');
        $this->data['sub_page'] = 'student/disable_reason';
        $this->data['main_menu'] = 'student';
        echo view('layout/index', $this->data);
    }
    // update existing student deactivate reason
    public function disable_reason_edit()
    {
        if (!get_permission('disable_reason', 'is_edit')) {
            ajax_access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['name' => ["label" => translate('reason'), "rules" => 'trim|required']]);
        if ($this->validation->run() !== false) {
            $category_id = $this->request->getPost('reason_id');
            $arrayData = ['name' => $this->request->getPost('name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $category_id)->where();
            $this->db->table('disable_reason', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // delete student deactivate reason from database
    public function disable_reason_delete($id)
    {
        if (get_permission('disable_reason', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('disable_reason')->delete();
        }
    }
    // student disable reason details send by ajax
    public function disableReasonDetails()
    {
        if (get_permission('disable_reason', 'is_edit')) {
            $id = $this->request->getPost('id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $query = $builder->get('disable_reason');
            $result = $query->row_array();
            echo json_encode($result);
        }
    }
    public function sibling_report()
    {
        // check access permission
        if (!get_permission('student', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if (isset($_POST['search'])) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $getParentsList = $this->studentModel->getParentList($classID, $sectionID, $branchID);
            $list = [];
            foreach ($getParentsList as $key => $parent) {
    if (intval($parent['child']) > 1) {
                    $getParentsList[$key]['student'] = $this->studentModel->getSiblingListByClass($parent['parent_id'], $classID, $sectionID);
                    $list[] = $getParentsList[$key];
}
            }
            $this->data['students'] = $list;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('sibling_report');
        $this->data['main_menu'] = 'student_repots';
        $this->data['sub_page'] = 'student/sibling_report';
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Student_promotion.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\FeesModel;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Student_promotion.php
 * @copyright : Reserved RamomCoder Team
 */
class Student_promotion extends AdminController
 
{
    public $appLib;
    protected $db;


    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    public $applicationModel;
    public $input;
    public $load;
    public $validation;
    public $feesModel;
    public function __construct()
    {


        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->fees = new \App\Models\FeesModel();
    }
    public function index()
    {
        // check access permission
        if (!get_permission('student_promotion', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($this->request->getPost()) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['students'] = $this->applicationModel->getStudentListByClassSection($this->data['class_id'], $this->data['section_id'], $branchID, false, true, false);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('student_promotion');
        $this->data['sub_page'] = 'student_promotion/index';
        $this->data['main_menu'] = 'transfer';
        echo view('layout/index', $this->data);
    }
    public function transfersave()
    {
        // check access permission
        if (!get_permission('student_promotion', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            $dueForward = isset($_POST['due_forward']) ? 1 : 0;
            $this->validation->setRules(['promote_session_id' => ["label" => translate('promote_to_session'), "rules" => 'required']]);
            $this->validation->setRules(['promote_class_id' => ["label" => translate('promote_to_class'), "rules" => 'required|callback_validClass']]);
            $this->validation->setRules(['promote_section_id' => ["label" => translate('promote_section_id'), "rules" => 'required|callback_validSection']]);
            $items = $this->request->getPost('promote');
            foreach ($items as $key => $value) {
    if (isset($value['enroll_id'])) {
                    $this->validation->setRules(['promote[' . $key . '][roll]' => ["label" => translate('roll'), "rules" => 'callback_unique_prom_roll']]);
}
            }
            if ($this->validation->run() !== false) {
                $promotion_historys = [];
                $pre_class_id = $this->request->getPost('class_id');
                $pre_section_id = $this->request->getPost('section_id');
                $pre_session_id = get_session_id();
                $promote_session_id = $this->request->getPost('promote_session_id');
                $promote_classID = $this->request->getPost('promote_class_id');
                $promote_sectionID = $this->request->getPost('promote_section_id');
                $branchID = $this->applicationModel->get_branch_id();
                $promote = $this->request->getPost('promote');
                $school = $this->feesModel->get('branch', ['id' => $branchID], true);
                $due_days = empty($school['due_days']) ? 1 : $school['due_days'];
                foreach ($promote as $value) {
    if (isset($value['enroll_id'])) {
                        $leaveStatus = isset($value['leave']) ? 1 : 0;
                        if ($leaveStatus == 1) {
                            $promote_class_id = $pre_class_id;
                            $promote_section_id = $pre_section_id;
} elseif ($value['class_status'] == 'running') {
                            $promote_class_id = $pre_class_id;
                            $promote_section_id = $pre_section_id;
                        } else {
                            $promote_class_id = $promote_classID;
                            $promote_section_id = $promote_sectionID;
                        }
                        $promotion_history = [];
                        $promotion_history['student_id'] = $value['student_id'];
                        $promotion_history['pre_class'] = $pre_class_id;
                        $promotion_history['pre_section'] = $pre_section_id;
                        $promotion_history['pre_session'] = $pre_session_id;
                        $promotion_history['pro_class'] = $promote_class_id;
                        $promotion_history['pro_section'] = $promote_section_id;
                        $promotion_history['pro_session'] = $leaveStatus == 1 ? $pre_session_id : $promote_session_id;
                        $promotion_history['date'] = date('Y-m-d H:i:s');
                        $promotion_history['prev_due'] = 0;
                        $promotion_history['is_leave'] = 0;
                        $enroll_id = $value['enroll_id'];
                        $student_id = $value['student_id'];
                        if ($leaveStatus == 1) {
                            $this->db->table('id', $enroll_id)->where();
                            $this->db->table('enroll', ['is_alumni' => 1])->update();
                            $promotion_history['is_leave'] = 1;
                        } else {
                            $roll = empty($value['roll']) ? 0 : $value['roll'];
                            // check existing data
                            $this->db->table('student_id', $student_id)->where();
                            $this->db->table('session_id', $promote_session_id)->where();
                            $query = $builder->get('enroll');
                            // insert promotion data
                            $arrayData = ['student_id' => $student_id, 'class_id' => $promote_class_id, 'roll' => $roll, 'section_id' => $promote_section_id, 'session_id' => $promote_session_id, 'branch_id' => $branchID];
                            if ($query->num_rows() > 0) {
                                $this->db->table('id', $query->row()->id)->where();
                                $this->db->table('enroll', $arrayData)->update();
                                $enroll_id = $query->row()->id;
                            } else {
                                $this->db->table('enroll', $arrayData)->insert();
                                $enroll_id = $this->db->insert_id();
                            }
                            // insert carry forward due data
                            if ($dueForward == 1 && (!empty($value['due_amount']) && $value['due_amount'] != 0)) {
                                $promotion_history['prev_due'] = $value['due_amount'];
                                $arrayForwardDue = ['branch_id' => $branchID, 'session_id' => $promote_session_id, 'student_id' => $enroll_id, 'prev_due' => $value['due_amount'], 'due_date' => date('Y-m-d', strtotime("+{$due_days} Days"))];
                                $this->feesModel->carryForwardDue($arrayForwardDue);
                            }
                        }
                        $promotion_historys[] = $promotion_history;
                    }
                }
                $this->db->insert_batch('promotion_history', $promotion_historys);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('student_promotion');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function getPromotionStatus()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('student_promotion', 'is_add')) {
                ajax_access_denied();
            }
            $class_id = $this->request->getPost('class_id');
            $section_id = $this->request->getPost('section_id');
            $session_id = $this->request->getPost('session_id');
            if (empty($class_id) || empty($section_id) || empty($session_id)) {
                $array = ['status' => 2];
                echo json_encode($array);
                exit;
            }
            $r = $db->table('enroll')->get('enroll')->result_array();
            if (empty($r)) {
                $array = ['status' => 0];
            } else {
                $r = array_column($r, 'student_id');
                $array = ['status' => 1, 'msg' => '<i class="far fa-check-circle"></i> Mark students have already been promoted, you can only update now.', 'stu_arr' => $r];
            }
            echo json_encode($array);
        }
    }
    public function unique_prom_roll($roll)
    {
        if (!empty($roll)) {
            $promote_session_id = $this->request->getPost('promote_session_id');
            $promote_class_id = $this->request->getPost('promote_class_id');
            $promote_section_id = $this->request->getPost('promote_section_id');
            $branchID = $this->applicationModel->get_branch_id();
            $schoolSettings = $this->feesModel->get('branch', ['id' => $branchID], true, false, 'unique_roll');
            $unique_roll = $schoolSettings['unique_roll'];
            if (!empty($unique_roll) && $unique_roll != 0) {
                $builder->select('id');
                if ($unique_roll == 2) {
                    $this->db->table('section_id', $promote_section_id)->where();
                }
                $this->db->table(['roll' => $roll, 'class_id' => $promote_class_id, 'session_id' => $promote_session_id, 'branch_id' => $branchID])->where();
                $r = $builder->get('enroll');
                if ($r->num_rows() == 0) {
                    return true;
                } else {
                    $this->validation->setRule('unique_prom_roll', "The %s is already exists.");
                    return false;
                }
            }
        }
        return true;
    }
    function validClass($classID)
    {
        if (!empty($classID)) {
            $pre_class_id = $this->request->getPost('class_id');
            $promote_session_id = $this->request->getPost('promote_session_id');
            if ($pre_class_id == $classID && $promote_session_id == get_session_id()) {
                $this->validation->setRule('validClass', translate("wrong_command"));
                return false;
            }
        }
        return true;
    }
    function validSection($sectionID)
    {
        if (!empty($sectionID)) {
            $pre_class_id = $this->request->getPost('class_id');
            $pre_section_id = $this->request->getPost('section_id');
            $promote_session_id = $this->request->getPost('promote_session_id');
            $promote_class_id = $this->request->getPost('promote_class_id');
            if ($promote_session_id == get_session_id() && $pre_class_id == $promote_class_id && $pre_section_id == $sectionID) {
                $this->validation->setRule('validSection', translate("wrong_command"));
                return false;
            }
        }
        return true;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Subject.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.5
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Subject.php
 * @copyright : Reserved RamomCoder Team
 */
class Subject extends AdminController
{
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    public $load;
    public $validation;
    public $input;
    public $applicationModel;
    public $db;
    public $appLib;
    public $subjectModel;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->subject = new \App\Models\SubjectModel();
    }
    public function index()
    {
        if (!get_permission('subject', 'is_view')) {
            access_denied();
        }
        $this->data['subjectlist'] = $this->appLib->getTable('subject');
        $this->data['title'] = translate('subject');
        $this->data['sub_page'] = 'subject/index';
        $this->data['main_menu'] = 'subject';
        echo view('layout/index', $this->data);
    }
    // subject edit page
    public function edit($id = '')
    {
        if (!get_permission('subject', 'is_edit')) {
            access_denied();
        }
        $this->data['subject'] = $this->appLib->getTable('subject', ['t.id' => $id], true);
        $this->data['title'] = translate('subject');
        $this->data['sub_page'] = 'subject/edit';
        $this->data['main_menu'] = 'subject';
        echo view('layout/index', $this->data);
    }
    // moderator subject all information
    public function save()
    {
        if ($_POST !== []) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['name' => ["label" => translate('subject_name'), "rules" => 'trim|required']]);
            $this->validation->setRules(['subject_code' => ["label" => translate('subject_code'), "rules" => 'trim|required']]);
            $this->validation->setRules(['subject_type' => ["label" => translate('subject_type'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $arraySubject = ['name' => $this->request->getPost('name'), 'subject_code' => $this->request->getPost('subject_code'), 'subject_type' => $this->request->getPost('subject_type'), 'subject_author' => $this->request->getPost('subject_author'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $subjectID = $this->request->getPost('subject_id');
                if (empty($subjectID)) {
                    if (get_permission('subject', 'is_add')) {
                        $this->db->table('subject', $arraySubject)->insert();
                    }
                    set_alert('success', translate('information_has_been_saved_successfully'));
                } else {
                    if (get_permission('subject', 'is_edit')) {
                        if (!is_superadmin_loggedin()) {
                            $this->db->table('branch_id', get_loggedin_branch_id())->where();
                        }
                        $this->db->table('id', $subjectID)->where();
                        $this->db->table('subject', $arraySubject)->update();
                    }
                    set_alert('success', translate('information_has_been_updated_successfully'));
                }
                $url = base_url('subject/index');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function delete($id = '')
    {
        if (get_permission('subject', 'is_delete')) {
            $this->appLib->check_branch_restrictions('subject', $id);
            $this->db->table('id', $id)->where();
            $this->db->table('subject')->delete();
            $this->db->table('subject_id', $id)->where();
            $this->db->table('subject_assign')->delete();
        }
    }
    // add subject assign information and delete
    public function class_assign()
    {
        if (!get_permission('subject_class_assign', 'is_view')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['assignlist'] = $this->subjectModel->getAssignList();
        $this->data['title'] = translate('class_assign');
        $this->data['sub_page'] = 'subject/class_assign';
        $this->data['main_menu'] = 'subject';
        echo view('layout/index', $this->data);
    }
    // moderator class assign save all information
    public function class_assign_save()
    {
        if ($_POST !== [] && get_permission('subject_class_assign', 'is_add')) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required|callback_unique_subject_assign']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
            $this->validation->setRules(['subjects[]' => ["label" => translate('subject'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $branchID = $this->applicationModel->get_branch_id();
                $arraySubject = ['class_id' => $this->request->getPost('class_id'), 'section_id' => $this->request->getPost('section_id'), 'session_id' => get_session_id(), 'branch_id' => $branchID];
                // get class teacher details
                $get_teacher = $this->subjectModel->get('teacher_allocation', $arraySubject, true);
                $subjects = $this->request->getPost('subjects');
                foreach ($subjects as $subject) {
    $arraySubject['subject_id'] = $subject;
                    $query = $builder->getWhere("subject_assign", $arraySubject);
                    if ($query->num_rows() == 0) {
                        $arraySubject['teacher_id'] = empty($get_teacher) ? 0 : $get_teacher['teacher_id'];
                        $this->db->table('subject_assign', $arraySubject)->insert();
}
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('subject/class_assign');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // subject assign information edit
    public function class_assign_edit()
    {
        if ($_POST !== [] && get_permission('subject_class_assign', 'is_edit')) {
            $this->validation->setRules(['subjects[]' => ["label" => translate('subject'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $sessionID = get_session_id();
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $branchID = $this->applicationModel->get_branch_id();
                $arraySubject = ['class_id' => $classID, 'section_id' => $sectionID, 'session_id' => $sessionID, 'branch_id' => $branchID];
                // get class teacher details
                $get_teacher = $this->subjectModel->get('teacher_allocation', $arraySubject, true);
                $subjects = $this->request->getPost('subjects');
                foreach ($subjects as $subject) {
    $arraySubject['subject_id'] = $subject;
                    $query = $builder->getWhere("subject_assign", $arraySubject);
                    if ($query->num_rows() == 0) {
                        $arraySubject['teacher_id'] = empty($get_teacher) ? 0 : $get_teacher['teacher_id'];
                        $this->db->table('subject_assign', $arraySubject)->insert();
}
                }
                $this->db->where_not_in('subject_id', $subjects);
                $this->db->table('class_id', $classID)->where();
                $this->db->table('section_id', $sectionID)->where();
                $this->db->table('session_id', $sessionID)->where();
                $this->db->table('branch_id', $branchID)->where();
                $this->db->table('subject_assign')->delete();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('subject/class_assign');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function class_assign_delete($class_id = '', $section_id = '')
    {
        if (!get_permission('subject_class_assign', 'is_delete')) {
            access_denied();
        }
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('class_id', $class_id)->where();
        $this->db->table('section_id', $section_id)->where();
        $this->db->table('session_id', get_session_id())->where();
        $this->db->table('subject_assign')->delete();
    }
    // validate here, if the check class assign
    public function unique_subject_assign($class_id)
    {
        $where = ['class_id' => $class_id, 'section_id' => $this->request->getPost('section_id'), 'session_id' => get_session_id()];
        $q = $builder->getWhere('subject_assign', $where)->num_rows();
        if ($q == 0) {
            return true;
        } else {
            $this->validation->setRule('unique_subject_assign', 'This class and section is already assigned.');
            return false;
        }
    }
    // teacher assign view page
    public function teacher_assign()
    {
        if (!get_permission('subject_teacher_assign', 'is_view')) {
            access_denied();
        }
        if ($_POST !== [] && get_permission('subject_teacher_assign', 'is_add')) {
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['staff_id' => ["label" => translate('teacher'), "rules" => 'trim|required']]);
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
            $this->validation->setRules(['section_id' => ["label" => translate('section'), "rules" => 'trim|required']]);
            $this->validation->setRules(['subject_id' => ["label" => translate('subject'), "rules" => 'trim|required']]);
            if ($this->validation->run() !== false) {
                $sessionID = get_session_id();
                $branchID = $this->applicationModel->get_branch_id();
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $subjectID = $this->request->getPost('subject_id');
                $teacherID = $this->request->getPost('staff_id');
                $query = $builder->getWhere("subject_assign", ['class_id' => $classID, 'section_id' => $sectionID, 'subject_id' => $subjectID, 'session_id' => $sessionID, 'branch_id' => $branchID]);
                if ($query->num_rows() != 0) {
                    $this->db->table('id', $query->row()->id)->where();
                    $this->db->table('subject_assign', ['teacher_id' => $teacherID])->update();
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('subject/teacher_assign');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['assignlist'] = $this->subjectModel->getTeacherAssignList();
        $this->data['title'] = translate('teacher_assign');
        $this->data['sub_page'] = 'subject/teacher_assign';
        $this->data['main_menu'] = 'subject';
        echo view('layout/index', $this->data);
    }
    // teacher assign information moderator
    public function teacher_assign_delete($id = '')
    {
        if (get_permission('subject_teacher_assign', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('subject_assign', ['teacher_id' => 0])->update();
        }
    }
    // get subject list based on class section
    public function getByClassSection()
    {
        $html = '';
        $classID = $this->request->getPost('classID');
        $sectionID = $this->request->getPost('sectionID');
        if (!empty($classID)) {
            $query = $this->subjectModel->getSubjectByClassSection($classID, $sectionID);
            if ($query->num_rows() > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                $subjects = $query->getResultArray();
                foreach ($subjects as $row) {
    $html .= '<option value="' . $row['subject_id'] . '">' . $row['subjectname'] . " (" . $row['subject_code'] . ')</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select') . '</option>';
        }
        echo $html;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/System_student_field.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\StudentFieldsModel;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : system_student_field.php
 * @copyright : Reserved RamomCoder Team
 */
class System_student_field extends AdminController
 
{
    public $appLib;
    protected $db;



    /**
     * @var App\Models\StudentFieldsModel
     */
    public $studentFields;
    public $load;
    public $applicationModel;
    public $input;
    public function __construct()
    {



        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->studentFields = new \App\Models\StudentFieldsModel();
    }
    public function index()
    {
        // check access permission
        if (!get_permission('system_student_field', 'is_view')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['sub_page'] = 'system_student_field/index';
        $this->data['title'] = translate('system_student_field');
        $this->data['main_menu'] = 'settings';
        echo view('layout/index', $this->data);
    }
    public function save()
    {
        if ($_POST !== []) {
            if (!get_permission('system_student_field', 'is_edit')) {
                ajax_access_denied();
            }
            $branchID = $this->applicationModel->get_branch_id();
            $systemFields = $this->request->getPost('system_fields');
            foreach ($systemFields as $key => $value) {
    $is_status = isset($value['status']) ? 1 : 0;
                $is_required = isset($value['required']) ? 1 : 0;
                $arrayData = ['fields_id' => $key, 'branch_id' => $branchID, 'status' => $is_status, 'required' => $is_required];
                $exist_privileges = $db->table('student_admission_fields')->get('student_admission_fields')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('student_admission_fields', $arrayData, ['fields_id' => $key, 'branch_id' => $branchID])->update();
} else {
                    $this->db->table('student_admission_fields', $arrayData)->insert();
                }
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
        }
    }
    public function save_profile()
    {
        if ($_POST !== []) {
            if (!get_permission('system_student_field', 'is_edit')) {
                ajax_access_denied();
            }
            $branchID = $this->applicationModel->get_branch_id();
            $systemFields = $this->request->getPost('system_fields');
            foreach ($systemFields as $key => $value) {
    $is_status = isset($value['status']) ? 1 : 0;
                $is_required = isset($value['required']) ? 1 : 0;
                $arrayData = ['fields_id' => $key, 'branch_id' => $branchID, 'status' => $is_status, 'required' => $is_required];
                $exist_privileges = $db->table('student_profile_fields')->get('student_profile_fields')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('student_profile_fields', $arrayData, ['fields_id' => $key, 'branch_id' => $branchID])->update();
} else {
                    $this->db->table('student_profile_fields', $arrayData)->insert();
                }
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
        }
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Timetable.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 6.2
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Timetable.php
 * @copyright : Reserved RamomCoder Team
 */
class Timetable extends AdminController
{
    public $appLib;
    /**
     * @var App\Models\TimetableModel
     */
    public $timetable;
    public $applicationModel;
    public $input;
    public $db;
    public $load;
    public $validation;
    public $timetableModel;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->timetable = new \App\Models\TimetableModel();
    }
    public function index()
    {
        if (get_loggedin_id()) {
            return redirect()->to(base_url('timetable/view_classwise'));
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    /* class timetable view page */
    public function viewclass()
    {
        if (!get_permission('class_timetable', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $arrayTimetable = ['branch_id' => $branchID, 'class_id' => $classID, 'section_id' => $sectionID, 'session_id' => get_session_id()];
            $this->db->order_by('time_start', 'asc');
            $this->data['timetables'] = $builder->getWhere('timetable_class', $arrayTimetable)->result();
            $this->data['class_id'] = $classID;
            $this->data['section_id'] = $sectionID;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('class') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/viewclass';
        $this->data['main_menu'] = 'timetable';
        echo view('layout/index', $this->data);
    }
    /* class timetable view page */
    public function teacherview()
    {
        if (!get_permission('teacher_timetable', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $teacherID = $this->request->getPost('staff_id');
            $arrayTimetable = ['branch_id' => $branchID, 'teacher_id' => $teacherID, 'session_id' => get_session_id()];
            $this->db->order_by('time_start', 'asc');
            $this->data['timetables'] = $builder->getWhere('timetable_class', $arrayTimetable)->result();
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('teacher') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/teacherview';
        $this->data['main_menu'] = 'timetable';
        echo view('layout/index', $this->data);
    }
    /* class timetable information are prepared and stored in the database here */
    public function set_classwise()
    {
        if (!get_permission('class_timetable', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $this->data['class_id'] = $this->request->getPost('class_id');
            $this->data['day'] = $this->request->getPost('day');
            $this->data['section_id'] = $this->request->getPost('section_id');
            $this->data['branch_id'] = $branchID;
            $this->data['exist_data'] = $this->timetableModel->get('timetable_class', ['class_id' => $this->data['class_id'], 'section_id' => $this->data['section_id'], 'day' => $this->data['day'], 'session_id' => get_session_id()], false, true);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('add') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/set_classwise';
        $this->data['main_menu'] = 'timetable';
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js', 'vendor/moment/moment.js']];
        echo view('layout/index', $this->data);
    }
    /* class timetable updating here */
    public function update_classwise()
    {
        if (!get_permission('class_timetable', 'is_edit')) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['class_id'] = $this->request->getPost('class_id');
        $this->data['section_id'] = $this->request->getPost('section_id');
        $this->data['day'] = $this->request->getPost('day');
        $timetable_array = ['branch_id' => $this->data['branch_id'], 'class_id' => $this->data['class_id'], 'section_id' => $this->data['section_id'], 'day' => $this->data['day'], 'session_id' => get_session_id()];
        $this->db->order_by('time_start', 'asc');
        $this->data['timetables'] = $builder->getWhere('timetable_class', $timetable_array)->result();
        $this->data['title'] = translate('class') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/update_classwise';
        $this->data['main_menu'] = 'timetable';
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function class_save($mode = '')
    {
        if ($_POST !== []) {
            if (!get_permission('class_timetable', 'is_add')) {
                ajax_access_denied();
            }
            $items = $this->request->getPost('timetable');
            $this->validation->setRules(['class_id' => ["label" => translate('class'), "rules" => 'trim|required']]);
            if (!empty($items)) {
                foreach ($items as $key => $value) {
    $this->validation->setRules(['timetable[' . $key . '][time_start]' => ["label" => translate('starting_time'), "rules" => 'required']]);
                    $this->validation->setRules(['timetable[' . $key . '][time_end]' => ["label" => translate('ending_time'), "rules" => 'required']]);
                    if (!isset($value['break'])) {
                        $this->validation->setRules(['timetable[' . $key . '][subject]' => ["label" => translate('subject'), "rules" => 'trim|required']]);
                        $this->validation->setRules(['timetable[' . $key . '][teacher]' => ["label" => translate('teacher'), "rules" => 'trim|required']]);
}
                }
            }
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                $this->timetableModel->classwise_save($post, $mode);
                $message = translate('information_has_been_saved_successfully');
                $array = ['status' => 'success', 'message' => $message, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // exam timetable preview page
    public function viewexam()
    {
        if (!get_permission('exam_timetable', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['examlist'] = $this->timetableModel->getExamTimetableList($classID, $sectionID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('exam') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/viewexam';
        $this->data['main_menu'] = 'exam_timetable';
        echo view('layout/index', $this->data);
    }
    // exam timetable information are prepared and stored in the database here
    public function set_examwise()
    {
        if (!get_permission('exam_timetable', 'is_add')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $examID = $this->request->getPost('exam_id');
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['exam_id'] = $examID;
            $this->data['class_id'] = $classID;
            $this->data['section_id'] = $sectionID;
            $this->data['subjectassign'] = $this->timetableModel->getSubjectExam($classID, $sectionID, $examID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('add') . " " . translate('schedule');
        $this->data['sub_page'] = 'timetable/set_examwise';
        $this->data['main_menu'] = 'exam_timetable';
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js', 'vendor/moment/moment.js']];
        echo view('layout/index', $this->data);
    }
    public function exam_create()
    {
        if (!get_permission('exam_timetable', 'is_add')) {
            ajax_access_denied();
        }
        if ($_POST !== []) {
            // form validation rules
            $items = $this->request->getPost('timetable');
            foreach ($items as $key => $value) {
    $this->validation->setRules(['timetable[' . $key . '][date]' => ["label" => translate('date'), "rules" => 'required']]);
                $this->validation->setRules(['timetable[' . $key . '][time_start]' => ["label" => translate('starting_time'), "rules" => 'required']]);
                $this->validation->setRules(['timetable[' . $key . '][time_end]' => ["label" => translate('ending_time'), "rules" => 'required']]);
                $this->validation->setRules(['timetable[' . $key . '][hall_id]' => ["label" => translate('hall_room'), "rules" => 'required|callback_check_hallseat_capacity']]);
                foreach ($value['full_mark'] as $i => $id) {
                    $this->validation->setRules(['timetable[' . $key . '][full_mark][' . $i . ']' => ["label" => translate('full_mark'), "rules" => 'required|numeric']]);
                    $this->validation->setRules(['timetable[' . $key . '][pass_mark][' . $i . ']' => ["label" => translate('pass_mark'), "rules" => 'required|numeric']]);
}
            }
            if ($this->validation->run() !== false) {
                $branchID = $this->applicationModel->get_branch_id();
                $examID = $this->request->getPost('exam_id');
                $classID = $this->request->getPost('class_id');
                $sectionID = $this->request->getPost('section_id');
                $timetable = $this->request->getPost('timetable');
                foreach ($timetable as $value) {
    // distribution array
                    $distribution = [];
                    foreach ($value['full_mark'] as $id => $mark) {
                        $distribution[$id]['full_mark'] = $mark;
}
                    foreach ($value['pass_mark'] as $id => $mark) {
    $distribution[$id]['pass_mark'] = $mark;
}
                    $arrayData = ['exam_id' => $examID, 'class_id' => $classID, 'section_id' => $sectionID, 'subject_id' => $value['subject_id'], 'time_start' => $value['time_start'], 'time_end' => $value['time_end'], 'hall_id' => $value['hall_id'], 'exam_date' => $value['date'], 'mark_distribution' => json_encode($distribution), 'branch_id' => $branchID, 'session_id' => get_session_id()];
                    $this->db->table('exam_id', $examID)->where();
                    $this->db->table('class_id', $classID)->where();
                    $this->db->table('section_id', $sectionID)->where();
                    $this->db->table('subject_id', $value['subject_id'])->where();
                    $this->db->table('session_id', get_session_id())->where();
                    $q = $builder->get('timetable_exam');
                    if ($q->num_rows() > 0) {
                        $result = $q->row_array();
                        $this->db->table('id', $result['id'])->where();
                        $this->db->table('timetable_exam', $arrayData)->update();
                    } else {
                        $this->db->table('timetable_exam', $arrayData)->insert();
                    }
                }
                $message = translate('information_has_been_saved_successfully');
                $array = ['status' => 'success', 'message' => $message];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function exam_delete($examID, $classID, $sectionID)
    {
        if (get_permission('exam_timetable', 'is_delete')) {
            $this->db->table('exam_id', $examID)->where();
            $this->db->table('class_id', $classID)->where();
            $this->db->table('section_id', $sectionID)->where();
            $this->db->table('session_id', get_session_id())->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('timetable_exam')->delete();
        }
    }
    public function getExamTimetableM()
    {
        $examID = $this->request->getPost('exam_id');
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $this->data['exam_id'] = $examID;
        $this->data['class_id'] = $classID;
        $this->data['section_id'] = $sectionID;
        $this->data['timetables'] = $this->timetableModel->getExamTimetableByModal($examID, $classID, $sectionID);
        echo view('timetable/examTimetableM', $this->data);
    }
    // check exam hall room capacity
    public function check_hallseat_capacity($hallid)
    {
        if ($hallid) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $seats = $builder->getWhere('exam_hall', ['id' => $hallid])->row()->seats;
            $stuCount = $builder->getWhere('enroll', ['class_id' => $classID, 'section_id' => $sectionID, 'session_id' => get_session_id()])->num_rows();
            if ($stuCount > $seats) {
                $this->validation->setRule("check_hallseat_capacity", "The seats capacity is exceeded.");
                return false;
            } else {
                return true;
            }
        }
        return null;
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Translations.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Translations.php
 * @copyright : Reserved RamomCoder Team
 */
class Translations extends AdminController
 
{
    protected $db;




    public $load;
    public $session;
    public $appLib;
    public $input;
    public $dbforge;
    public $image_lib;
    public function __construct()
    {




        parent::__construct();
    
        $this->appLib = service('appLib');}
    public function index()
    {
        if (!get_permission('translations', 'is_view')) {
            access_denied();
        }
        $this->data['edit_language'] = '';
        $this->data['sub_page'] = 'language/index';
        $this->data['main_menu'] = 'settings';
        $this->data['title'] = translate('translations');
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/bootstrap-toggle/css/bootstrap-toggle.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/bootstrap-toggle/js/bootstrap-toggle.min.js']];
        echo view('layout/index', $this->data);
    }
    public function set_language($action = '')
    {
        if (is_loggedin()) {
            session()->set('set_lang', $action);
            $isRTL = $this->appLib->getRTLStatus($action);
            session()->set('is_rtl', $isRTL);
            if (!empty($_SERVER['HTTP_REFERER'])) {
                redirect($_SERVER['HTTP_REFERER']);
            } else {
                redirect(base_url('dashboard'), 'refresh');
            }
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    public function update()
    {
        if (!get_permission('translations', 'is_edit')) {
            access_denied();
        }
        $language = html_escape($this->request->getGet('lang'));
        if (!empty($language)) {
            $query_language = $db->query("SELECT `id`, `word`, `{$language}` FROM `languages`");
            if ($this->request->getPost('submit') == 'update') {
                if ($query_language->num_rows() > 0) {
                    $words = $query_language->result();
                    foreach ($words as $row) {
    $word = $this->request->getPost('word_' . $row->word);
                        if (!empty($word)) {
                            $this->db->table('word', $row->word)->where();
                            $this->db->table('languages', [$language => $word])->update();
}
                    }
                    $this->db->table('lang_field', $language)->where();
                    $this->db->table('language_list', ['updated_at' => date('Y-m-d H:i:s')])->update();
                }
                set_alert('success', translate('information_has_been_updated_successfully'));
                return redirect()->to(base_url('translations'));
            }
            $this->data['select_language'] = $language;
            $this->data['query_language'] = $query_language;
            $this->data['sub_page'] = 'language/index';
            $this->data['main_menu'] = 'settings';
            $this->data['title'] = translate('translations');
            echo view('layout/index', $this->data);
        } else {
            session()->set('last_page', current_url());
            redirect(base_url(), 'refresh');
        }
    }
    // Fahad fixed lang for automated translation and flag CDN
    public function submitted_data($action = '', $id = '')
    {
        if ($action == 'create') {
            if (!get_permission('translations', 'is_add')) {
                access_denied();
            }
            $language = $this->request->getPost('name', true);
            $language_code = $this->request->getPost('language_code', true);
            $flag_url = $this->request->getPost('flag_url', true);
            $this->db->table('language_list', ['name' => ucfirst((string) $language), 'language_code' => $language_code, 'flag_url' => $flag_url])->insert();
            $id = $this->db->insert_id();
            // Handle file upload if no flag is selected from dropdown
            if (empty($flag_url) && !empty($_FILES["flag"]["name"])) {
                move_uploaded_file($_FILES['flag']['tmp_name'], 'uploads/language_flags/flag_' . $id . '.png');
                $this->create_thumb('uploads/language_flags/flag_' . $id . '.png');
                $flag_url = base_url('uploads/language_flags/flag_' . $id . '.png');
                $this->db->table('id', $id)->where();
                $this->db->table('language_list', ['flag_url' => $flag_url])->update();
            }
            $language = 'lang_' . $id;
            $this->db->table('id', $id)->where();
            $this->db->table('language_list', ['lang_field' => $language])->update();
            $this->load->dbforge();
            $fields = [$language => ['type' => 'LONGTEXT', 'collation' => 'utf8_unicode_ci', 'null' => true, 'default' => '']];
            $res = $this->dbforge->add_column('languages', $fields);
            if ($res == true) {
                set_alert('success', translate('information_has_been_saved_successfully'));
            } else {
                set_alert('error', translate('information_add_failed'));
            }
            return redirect()->to(base_url('translations'));
        }
        if ($action == 'rename') {
            if (!get_permission('translations', 'is_edit')) {
                access_denied();
            }
            $language = $this->request->getPost('rename', true);
            $language_code = $this->request->getPost('language_code', true);
            $flag_url = $this->request->getPost('flag_url', true);
            $this->db->table('id', $id)->where();
            $this->db->table('language_list', ['name' => $language, 'language_code' => $language_code])->update();
            // Handle flag selection or file upload
            if (!empty($flag_url)) {
                $this->db->table('id', $id)->where();
                $this->db->table('language_list', ['flag_url' => $flag_url])->update();
            } elseif (!empty($_FILES["flag"]["name"])) {
                move_uploaded_file($_FILES['flag']['tmp_name'], 'uploads/language_flags/flag_' . $id . '.png');
                $this->create_thumb('uploads/language_flags/flag_' . $id . '.png');
                $flag_url = base_url('uploads/language_flags/flag_' . $id . '.png');
                $this->db->table('id', $id)->where();
                $this->db->table('language_list', ['flag_url' => $flag_url])->update();
            }
            set_alert('success', translate('information_has_been_updated_successfully'));
            return redirect()->to(base_url('translations'));
        }
        if ($action == 'delete') {
            if (!get_permission('translations', 'is_delete')) {
                access_denied();
            }
            $lang = $db->table('language_list')->get('language_list')->row()->lang_field;
            $this->load->dbforge();
            $this->dbforge->drop_column('languages', $lang);
            $this->db->table('id', $id)->where();
            $this->db->table('language_list')->delete();
            if (file_exists('uploads/language_flags/flag_' . $id . '.png')) {
                unlink('uploads/language_flags/flag_' . $id . '.png');
                unlink('uploads/language_flags/flag_' . $id . '_thumb.png');
            }
        }
    }
    public function create_thumb($source)
    {
        ini_set('memory_limit', '-1');
        $config['image_library'] = 'gd2';
        $config['create_thumb'] = true;
        $config['maintain_ratio'] = true;
        $config['width'] = 16;
        $config['height'] = 12;
        $config['source_image'] = $source;
        $this->image_lib = service('image_lib', $config);
        $this->image_lib->resize();
        $this->image_lib->clear();
    }
    /* language publish/unpublished */
    public function status()
    {
        if (is_superadmin_loggedin()) {
            $id = $this->request->getPost('lang_id');
            $status = $this->request->getPost('status');
            if ($status == 'true') {
                $array_data['status'] = 1;
                $message = translate('language_published');
            } else {
                $array_data['status'] = 0;
                $message = translate('language_unpublished');
            }
            $this->db->table('id', $id)->where();
            $this->db->table('language_list', $array_data)->update();
            echo $message;
        }
    }
    /* RTL enable/disable */
    public function isRTL()
    {
        if (is_superadmin_loggedin()) {
            $id = $this->request->getPost('lang_id');
            $status = $this->request->getPost('status');
            if ($status == 'true') {
                $array_data['rtl'] = 1;
                $message = "RTL is enabled.";
            } else {
                $array_data['rtl'] = 0;
                $message = "RTL is disabled.";
            }
            $this->db->table('id', $id)->where();
            $this->db->table('language_list', $array_data)->update();
            $isRTL = $db->table('language_list')->get('language_list')->row();
            $lan = session()->get('set_lang');
            if ($lan == $isRTL->lang_field) {
                session()->set('is_rtl', $isRTL->rtl);
            }
            echo $message;
        }
    }
    public function get_details()
    {
        $id = $this->request->getPost('id');
        $this->db->table('id', $id)->where();
        $query = $builder->get('language_list');
        $result = $query->row_array();
        echo json_encode($result);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Transport.php
<?php

namespace App\Controllers;

use App\Models;
/**
 * @package : Ramom school management system
 * @version : 5.0
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Transport.php
 * @copyright : Reserved RamomCoder Team
 */
class Transport extends AdminController
 
{
    public $appLib;
    protected $db;




    /**
     * @var App\Models\TransportModel
     */
    public $transport;
    public $validation;
    public $input;
    public $transportModel;
    public $load;
    public $applicationModel;
    public $uri;
    public function __construct()
    {




        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->transport = new \App\Models\TransportModel();
    }
    public function index()
    {
        redirect(base_url(), 'refresh');
    }
    // route user interface 
    public function route()
    {
        if (!get_permission('transport_route', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('transport_route', 'is_add')) {
                ajax_access_denied();
            }
            $this->route_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all route information in the database file
                $this->transportModel->route_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('transport/route');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['transportlist'] = $this->appLib->getTable('transport_route');
        $this->data['title'] = translate('route_master');
        $this->data['sub_page'] = 'transport/route';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    // route all information are prepared and user interface
    public function route_edit($id = '')
    {
        if (!get_permission('transport_route', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->route_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all route information in the database file
                $this->transportModel->route_save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('transport/route');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['route'] = $this->appLib->getTable('transport_route', ['t.id' => $id], true);
        $this->data['title'] = translate('route_master');
        $this->data['sub_page'] = 'transport/route_edit';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    public function route_delete($id = '')
    {
        if (get_permission('transport_route', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('transport_route')->delete();
        }
    }
    // vehicle information add and delete
    public function vehicle()
    {
        if (!get_permission('transport_vehicle', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('transport_vehicle', 'is_add')) {
                ajax_access_denied();
            }
            $this->vehicle_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all vehicle information in the database file
                $this->transportModel->vehicle_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('transport/vehicle');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['transportlist'] = $this->appLib->getTable('transport_vehicle');
        $this->data['title'] = translate('vehicle_master');
        $this->data['sub_page'] = 'transport/vehicle';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    // vehicle information edit 
    public function vehicle_edit($id = '')
    {
        if (!get_permission('transport_vehicle', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->vehicle_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all vehicle information in the database file
                $this->transportModel->vehicle_save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('transport/vehicle');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['vehicle'] = $this->appLib->getTable('transport_vehicle', ['t.id' => $id], true);
        $this->data['title'] = translate('vehicle_master');
        $this->data['sub_page'] = 'transport/vehicle_edit';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    public function vehicle_delete($id = '')
    {
        if (get_permission('transport_route', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('transport_vehicle')->delete();
        }
    }
    // stoppage information add and delete
    public function stoppage()
    {
        if (!get_permission('transport_stoppage', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('transport_stoppage', 'is_add')) {
                ajax_access_denied();
            }
            $this->stoppage_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all stoppage information in the database file
                $this->transportModel->stoppage_save($post);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('transport/stoppage');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['stoppagelist'] = $this->appLib->getTable('transport_stoppage');
        $this->data['title'] = translate('stoppage');
        $this->data['sub_page'] = 'transport/stoppage';
        $this->data['main_menu'] = 'transport';
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        echo view('layout/index', $this->data);
    }
    // stoppage information edit
    public function stoppage_edit($id = '')
    {
        if (!get_permission('transport_stoppage', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->stoppage_validation();
            if ($this->validation->run() !== false) {
                $post = $this->request->getPost();
                //save all stoppage information in the database file
                $this->transportModel->stoppage_save($post);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('transport/stoppage');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['stoppage'] = $this->appLib->getTable('transport_stoppage', ['t.id' => $id], true);
        $this->data['title'] = translate('stoppage');
        $this->data['sub_page'] = 'transport/stoppage_edit';
        $this->data['main_menu'] = 'transport';
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-timepicker/css/bootstrap-timepicker.css'], 'js' => ['vendor/bootstrap-timepicker/bootstrap-timepicker.js']];
        echo view('layout/index', $this->data);
    }
    public function stoppage_delete($id = '')
    {
        if (get_permission('transport_stoppage', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('transport_stoppage')->delete();
        }
    }
    /* user interface with assign vehicles and stoppage information and delete */
    public function assign()
    {
        if (!get_permission('transport_assign', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            if (!get_permission('transport_assign', 'is_add')) {
                ajax_access_denied();
            }
            $this->assign_validation();
            if ($this->validation->run() !== false) {
                $vehicles = $this->request->getPost('vehicle');
                foreach ($vehicles as $vehicle) {
    $arrayData[] = ['branch_id' => $branchID, 'route_id' => $this->request->getPost('route_id'), 'stoppage_id' => $this->request->getPost('stoppage_id'), 'vehicle_id' => $vehicle];
}
                $this->db->insert_batch('transport_assign', $arrayData);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('transport/assign');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('assign_vehicle');
        $this->data['sub_page'] = 'transport/assign';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    /* user interface with vehicles assign information edit */
    public function assign_edit($id = '')
    {
        if (!get_permission('transport_assign', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->assign_validation();
            if ($this->validation->run() !== false) {
                $branchID = $this->applicationModel->get_branch_id();
                $routeID = $this->request->getPost('route_id');
                $stoppageID = $this->request->getPost('stoppage_id');
                $vehicles = $this->request->getPost('vehicle');
                foreach ($vehicles as $vehicle) {
    $data = ['branch_id' => $branchID, 'route_id' => $id, 'vehicle_id' => $vehicle];
                    $query = $builder->getWhere("transport_assign", $data);
                    if ($query->num_rows() == 0) {
                        $data['stoppage_id'] = $stoppageID;
                        $this->db->table('transport_assign', $data)->insert();
} else {
                        $this->db->table('id', $query->row()->id)->where();
                        $this->db->table('transport_assign', ['stoppage_id' => $stoppageID, 'route_id' => $routeID])->update();
                    }
                }
                $this->db->where_not_in('vehicle_id', $vehicles);
                $this->db->table('route_id', $routeID)->where();
                $this->db->table('branch_id', $branchID)->where();
                $this->db->table('transport_assign')->delete();
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('transport/assign');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['assign'] = $this->transportModel->getAssignEdit($id);
        $this->data['title'] = translate('assign_vehicle');
        $this->data['sub_page'] = 'transport/assign_edit';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    public function assign_delete($id = '')
    {
        if (get_permission('transport_assign', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('route_id', $id)->where();
            $this->db->table('transport_assign')->delete();
        }
    }
    // validate here, if the check route assign
    public function unique_route_assign($id)
    {
        if ($this->uri->segment(3)) {
            $this->db->where_not_in('route_id', $this->uri->segment(3));
        }
        $this->db->table(['route_id' => $id])->where();
        $uniform_row = $builder->get('transport_assign')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_route_assign", "This route is already assigned.");
            return false;
        }
    }
    /* student transport allocation report */
    public function report()
    {
        if (!get_permission('transport_allocation', 'is_view')) {
            access_denied();
        }
        $branchID = $this->applicationModel->get_branch_id();
        if ($_POST !== []) {
            $classID = $this->request->getPost('class_id');
            $sectionID = $this->request->getPost('section_id');
            $this->data['allocationlist'] = $this->transportModel->allocation_report($classID, $sectionID, $branchID);
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('allocation_report');
        $this->data['sub_page'] = 'transport/allocation';
        $this->data['main_menu'] = 'transport';
        echo view('layout/index', $this->data);
    }
    public function allocation_delete($id)
    {
        if (get_permission('transport_allocation', 'is_delete')) {
            $builder->select('student_id');
            $this->db->table('id', $id)->where();
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $student_id = $builder->get('enroll')->row()->student_id;
            if (!empty($student_id)) {
                $arrayData = ['vehicle_id' => 0, 'route_id' => 0];
                $this->db->table('id', $student_id)->where();
                $this->db->table('student', $arrayData)->update();
            }
        }
    }
    /* get vehicle list based on the route */
    public function get_vehicle_by_route()
    {
        $routeID = $this->request->getPost("routeID");
        if (!empty($routeID)) {
            $query = $db->table('transport_assign')->get('transport_assign');
            if ($query->num_rows() != 0) {
                echo '<option value="">' . translate('select') . '</option>';
                $vehicles = $query->getResultArray();
                foreach ($vehicles as $row) {
    echo '<option value="' . $row['vehicle_id'] . '">' . get_type_name_by_id('transport_vehicle', $row['vehicle_id'], 'vehicle_no') . '</option>';
}
            } else {
                echo '<option value="">' . translate('no_selection_available') . '</option>';
            }
        } else {
            echo '<option value="">' . translate('first_select_the_route') . '</option>';
        }
    }
    /* get vehicle list based on the branch */
    public function getVehicleByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $result = $db->table('transport_vehicle')->get('transport_vehicle')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['vehicle_no'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_selection_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('first_select_the_route') . '</option>';
        }
        echo $html;
    }
    /* get stoppage list based on the branch */
    public function getStoppageByBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $result = $db->table('transport_stoppage')->get('transport_stoppage')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['stop_position'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_selection_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('first_select_the_branch') . '</option>';
        }
        echo $html;
    }
    protected function route_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['route_name' => ["label" => translate('route_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['start_place' => ["label" => translate('start_place'), "rules" => 'required']]);
        $this->validation->setRules(['stop_place' => ["label" => translate('stop_place'), "rules" => 'trim|required']]);
    }
    protected function stoppage_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['stop_position' => ["label" => translate('stoppage'), "rules" => 'trim|required']]);
        $this->validation->setRules(['stop_time' => ["label" => translate('stop_time'), "rules" => 'required']]);
        $this->validation->setRules(['route_fare' => ["label" => translate('route_fare'), "rules" => 'trim|required|numeric']]);
    }
    protected function vehicle_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['vehicle_no' => ["label" => translate('vehicle_no'), "rules" => 'trim|required']]);
        $this->validation->setRules(['capacity' => ["label" => translate('capacity'), "rules" => 'required|numeric']]);
        $this->validation->setRules(['driver_name' => ["label" => translate('driver_name'), "rules" => 'trim|required']]);
        $this->validation->setRules(['driver_phone' => ["label" => translate('driver_phone'), "rules" => 'trim|required']]);
        $this->validation->setRules(['driver_license' => ["label" => translate('driver_license'), "rules" => 'trim|required']]);
    }
    protected function assign_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['route_id' => ["label" => translate('transport_route'), "rules" => 'required|callback_unique_route_assign']]);
        $this->validation->setRules(['stoppage_id' => ["label" => translate('stoppage'), "rules" => 'required']]);
        $this->validation->setRules(['vehicle[]' => ["label" => translate('vehicle'), "rules" => 'required']]);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/Userrole.php
<?php

namespace App\Controllers;

use App\Models;
use App\Models\LeaveModel;
use App\Models\FeesModel;
use App\Models\ExamModel;
use App\Models\AttendanceModel;
use App\Models\OnlineexamModel;
use App\Models\AttendancePeriodModel;
use App\Models\SubjectModel;
/**
 * @package : Ramom school management system
 * @version : 6.8
 * @developed by : RamomCoder
 * @support : ramomcoder@yahoo.com
 * @author url : http://codecanyon.net/user/RamomCoder
 * @filename : Userrole.php
 * @copyright : Reserved RamomCoder Team
 */
class Userrole extends UserController
 
{
    protected $db;





    /**
     * @var App\Models\UserroleModel
     */
    public $userrole;
    /**
     * @var App\Models\LeaveModel
     */
    public $leave;
    /**
     * @var App\Models\FeesModel
     */
    public $fees;
    /**
     * @var App\Models\ExamModel
     */
    public $exam;
    public $load;
    public $userroleModel;
    public $validation;
    public $input;
    public $applicationModel;
    public $upload;
    /**
     * @var App\Models\AttendanceModel
     */
    public $attendance;
    public $bigbluebutton_lib;
    /**
     * @var App\Models\OnlineexamModel
     */
    public $onlineexam;
    public $onlineexamModel;
    public $feesModel;
    public $security;
    public $session;
    public $appLib;
    /**
     * @var App\Models\AttendancePeriodModel
     */
    public $attendancePeriod;
    /**
     * @var App\Models\SubjectModel
     */
    public $subject;
    public function __construct()
    {





        parent::__construct();
        
        
        $this->bigbluebuttonLib = service('bigbluebuttonLib');$this->appLib = service('appLib'); 
$this->userrole = new \App\Models\UserroleModel();
        $this->leave = new \App\Models\LeaveModel();
        $this->fees = new \App\Models\FeesModel();
        $this->exam = new \App\Models\ExamModel();
    }
    public function index()
    {
        redirect(base_url(), 'refresh');
    }
    /* getting all teachers list */
    public function teacher()
    {
        $this->data['title'] = translate('teachers');
        $this->data['getSchoolConfig'] = $this->appLib->getSchoolConfig('', 'teacher_mobile_visible,teacher_email_visible');
        $this->data['sub_page'] = 'userrole/teachers';
        $this->data['main_menu'] = 'teachers';
        echo view('layout/index', $this->data);
    }
    public function subject()
    {
        $this->data['title'] = translate('subject');
        $this->data['sub_page'] = 'userrole/subject';
        $this->data['main_menu'] = 'academic';
        echo view('layout/index', $this->data);
    }
    /*student or parent timetable preview page*/
    public function class_schedule()
    {
        $stu = $this->userroleModel->getStudentDetails();
        $arrayTimetable = ['class_id' => $stu['class_id'], 'section_id' => $stu['section_id'], 'session_id' => get_session_id()];
        $this->db->order_by('time_start', 'asc');
        $this->data['timetables'] = $builder->getWhere('timetable_class', $arrayTimetable)->result();
        $this->data['student'] = $stu;
        $this->data['title'] = translate('class') . " " . translate('schedule');
        $this->data['sub_page'] = 'userrole/class_schedule';
        $this->data['main_menu'] = 'academic';
        echo view('layout/index', $this->data);
    }
    public function leave_request()
    {
        $stu = $this->userroleModel->getStudentDetails();
        if (isset($_POST['save'])) {
            $this->validation->setRules(['leave_category' => ["label" => translate('leave_category'), "rules" => 'required|callback_leave_check']]);
            $this->validation->setRules(['daterange' => ["label" => translate('leave_date'), "rules" => 'trim|required|callback_date_check']]);
            $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_fileHandleUpload[attachment_file]']]);
            if ($this->validation->run() !== false) {
                $leave_type_id = $this->request->getPost('leave_category');
                $branch_id = $this->applicationModel->get_branch_id();
                $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
                $start_date = date("Y-m-d", strtotime($daterange[0]));
                $end_date = date("Y-m-d", strtotime($daterange[1]));
                $reason = $this->request->getPost('reason');
                $apply_date = date("Y-m-d H:i:s");
                $datetime1 = new DateTime($start_date);
                $datetime2 = new DateTime($end_date);
                $leave_days = $datetime2->diff($datetime1)->format("%a") + 1;
                $orig_file_name = '';
                $enc_file_name = '';
                // upload attachment file
                if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
                    $config['upload_path'] = './uploads/attachments/leave/';
                    $config['allowed_types'] = "*";
                    $config['max_size'] = '2024';
                    $config['encrypt_name'] = true;
                    $file = $this->request->getFile('attachment_file'); $file->initialize($config);
                    $file = $this->request->getFile('attachment_file'); $file->do_upload("attachment_file");
                    $orig_file_name = $file = $this->request->getFile('attachment_file'); $file->data('orig_name');
                    $enc_file_name = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
                }
                $arrayData = ['user_id' => $stu['student_id'], 'role_id' => 7, 'session_id' => get_session_id(), 'category_id' => $leave_type_id, 'reason' => $reason, 'branch_id' => $branch_id, 'start_date' => date("Y-m-d", strtotime($start_date)), 'end_date' => date("Y-m-d", strtotime($end_date)), 'leave_days' => $leave_days, 'status' => 1, 'orig_file_name' => $orig_file_name, 'enc_file_name' => $enc_file_name, 'apply_date' => $apply_date];
                $this->db->table('leave_application', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('userrole/leave_request'));
            }
        }
        $where = ['la.user_id' => $stu['student_id'], 'la.role_id' => 7];
        $this->data['leavelist'] = $this->leaveModel->getLeaveList($where);
        $this->data['title'] = translate('leaves');
        $this->data['sub_page'] = 'userrole/leave_request';
        $this->data['main_menu'] = 'leave';
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/daterangepicker/daterangepicker.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/moment/moment.js', 'vendor/daterangepicker/daterangepicker.js']];
        echo view('layout/index', $this->data);
    }
    // date check for leave request
    public function date_check($daterange)
    {
        $daterange = explode(' - ', (string) $daterange);
        $start_date = date("Y-m-d", strtotime($daterange[0]));
        $end_date = date("Y-m-d", strtotime($daterange[1]));
        $today = date('Y-m-d');
        if ($today === $start_date) {
            $this->validation->setRule('date_check', "You can not leave the current day.");
            return false;
        }
        if ($this->request->getPost('applicant_id')) {
            $applicant_id = $this->request->getPost('applicant_id');
            $role_id = $this->request->getPost('user_role');
        } else {
            $applicant_id = get_loggedin_user_id();
            $role_id = loggedin_role_id();
        }
        $getUserLeaves = $builder->getWhere('leave_application', ['user_id' => $applicant_id, 'role_id' => $role_id])->result();
        if (!empty($getUserLeaves)) {
            foreach ($getUserLeaves as $user_leave) {
    $get_dates = $this->user_leave_days($user_leave->start_date, $user_leave->end_date);
                $result_start = in_array($start_date, $get_dates);
                $result_end = in_array($end_date, $get_dates);
                if ($result_start || $result_end) {
                    $this->validation->setRule('date_check', 'Already have leave in the selected time.');
                    return false;
}
            }
        }
        return true;
    }
    public function leave_check(string $str, string $fields, array $data): bool
    {
        $type_id = $data['type_id'] ?? null;  // Assuming type_id is passed through $data when called
        if (!empty($type_id)) {
            $daterange = explode(' - ', (string) $this->request->getPost('daterange'));
            $start_date = new DateTime(date("Y-m-d", strtotime($daterange[0])));
            $end_date = new DateTime(date("Y-m-d", strtotime($daterange[1])));
    
            $applicant_id = $this->request->getPost('applicant_id') ?: get_loggedin_user_id();
            $role_id = $this->request->getPost('user_role') ?: loggedin_role_id();
    
            if ($end_date > $start_date) {
                $db = db_connect(); // Get database connection
                $leave_total = get_type_name_by_id('leave_category', $type_id, 'days'); // Assuming this function fetches days correctly
                $total_spent = $db->table('leave_application')
                                  ->where('user_id', $applicant_id)
                                  ->where('role_id', $role_id)
                                  ->selectSum('total_days')
                                  ->get()
                                  ->getRow()
                                  ->total_days;
    
                $leave_days = $end_date->diff($start_date)->format("%a") + 1;
                $left_leave = $leave_total - $total_spent;
    
                if ($left_leave < $leave_days) {
                    $this->validator->setError('daterange', "Applied for {$leave_days} days, maximum allowed is {$left_leave} days.");
                    return false;
                }
                return true;
            } else {
                $this->validator->setError('daterange', "Select a valid date range.");
                return false;
            }
        }
        return true;
    }
    
    public function user_leave_days($start_date, $end_date)
    {
        $dates = [];
        $current = strtotime((string) $start_date);
        $end_date = strtotime((string) $end_date);
        while ($current <= $end_date) {
            $dates[] = date('Y-m-d', $current);
            $current = strtotime('+1 day', $current);
        }
        return $dates;
    }
    public function attachments()
    {
        $this->data['title'] = translate('attachments');
        $this->data['sub_page'] = 'userrole/attachments';
        $this->data['main_menu'] = 'attachments';
        echo view('layout/index', $this->data);
    }
    public function playVideo()
    {
        $id = $this->request->getPost('id');
        $file = get_type_name_by_id('attachments', $id, 'enc_name');
        echo '<video width="560" controls id="attachment_video">';
        echo '<source src="' . base_url('uploads/attachments/' . $file) . '" type="video/mp4">';
        echo 'Your browser does not support HTML video.';
        echo '</video>';
    }
    // file downloader
    public function download()
    {
        $encrypt_name = urldecode((string) $this->request->getGet('file'));
        if (preg_match('/^[^.][-a-z0-9_.]+[a-z]$/i', $encrypt_name)) {
            $file_name = $db->table('attachments')->get('attachments')->row()->file_name;
            if (!empty($file_name)) {
                helper('download');
                return $this->response->download($file_name, file_get_contents('uploads/attachments/' . $encrypt_name));
            }
        }
    }
    /* exam timetable preview page */
    public function exam_schedule()
    {
        $stu = $this->userroleModel->getStudentDetails();
        $this->data['student'] = $stu;
        $builder->select('*');
        $this->db->from('timetable_exam');
        $this->db->table('class_id', $stu['class_id'])->where();
        $this->db->table('section_id', $stu['section_id'])->where();
        $this->db->table('session_id', get_session_id())->where();
        $this->db->group_by('exam_id');
        $this->db->order_by('exam_id', 'asc');
        $results = $builder->get()->result_array();
        $this->data['exams'] = $results;
        $this->data['title'] = translate('exam') . " " . translate('schedule');
        $this->data['sub_page'] = 'userrole/exam_schedule';
        $this->data['main_menu'] = 'exam';
        echo view('layout/index', $this->data);
    }
    /* hostels user interface */
    public function hostels()
    {
        $this->data['student'] = $this->userroleModel->getStudentDetails();
        $this->data['title'] = translate('hostels');
        $this->data['sub_page'] = 'userrole/hostels';
        $this->data['main_menu'] = 'supervision';
        echo view('layout/index', $this->data);
    }
    /* route user interface */
    public function route()
    {
        $stu = $this->userroleModel->getStudentDetails();
        $this->data['route'] = $this->userroleModel->getRouteDetails($stu['route_id'], $stu['vehicle_id']);
        $this->data['title'] = translate('route_master');
        $this->data['sub_page'] = 'userrole/transport_route';
        $this->data['main_menu'] = 'supervision';
        echo view('layout/index', $this->data);
    }
    /* after login students or parents produced reports here */
    public function attendance()
    {
        $this->attendance = new \App\Models\AttendanceModel();
        if ($this->request->getPost('submit') == 'search') {
            $this->data['month'] = date('m', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['year'] = date('Y', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['days'] = cal_days_in_month(CAL_GREGORIAN, $this->data['month'], $this->data['year']);
            $this->data['student'] = $this->userroleModel->getStudentDetails();
        }
        $this->data['title'] = translate('student_attendance');
        $this->data['sub_page'] = 'userrole/attendance';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
    // book page
    public function book()
    {
        $this->data['booklist'] = $this->appLib->getTable('book');
        $this->data['title'] = translate('books');
        $this->data['sub_page'] = 'userrole/book';
        $this->data['main_menu'] = 'library';
        echo view('layout/index', $this->data);
    }
    public function book_request()
    {
        $stu = $this->userroleModel->getStudentDetails();
        if ($_POST !== []) {
            $this->validation->setRules(['book_id' => ["label" => translate('book_title'), "rules" => 'required|callback_validation_stock']]);
            $this->validation->setRules(['date_of_issue' => ["label" => translate('date_of_issue'), "rules" => 'trim|required']]);
            $this->validation->setRules(['date_of_expiry' => ["label" => translate('date_of_expiry'), "rules" => 'trim|required|callback_validation_date']]);
            if ($this->validation->run() !== false) {
                $arrayIssue = ['branch_id' => $stu['branch_id'], 'book_id' => $this->request->getPost('book_id'), 'user_id' => $stu['student_id'], 'role_id' => 7, 'date_of_issue' => date("Y-m-d", strtotime((string) $this->request->getPost('date_of_issue'))), 'date_of_expiry' => date("Y-m-d", strtotime((string) $this->request->getPost('date_of_expiry'))), 'issued_by' => get_loggedin_user_id(), 'status' => 0, 'session_id' => get_session_id()];
                $this->db->table('book_issues', $arrayIssue)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('userrole/book_request');
                $array = ['status' => 'success', 'url' => $url, 'error' => ''];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['stu'] = $stu;
        $this->data['title'] = translate('library');
        $this->data['sub_page'] = 'userrole/book_request';
        $this->data['main_menu'] = 'library';
        echo view('layout/index', $this->data);
    }
    // book date validation
    public function validation_date($date)
    {
        if ($date) {
            $date = strtotime((string) $date);
            $today = strtotime(date('Y-m-d'));
            if ($today >= $date) {
                $this->validation->setRule("validation_date", translate('today_or_the_previous_day_can_not_be_issued'));
                return false;
            } else {
                return true;
            }
        }
        return null;
    }
    // validation book stock
    public function validation_stock($book_id)
    {
        $query = $db->table('book')->get('book')->row_array();
        $stock = $query['total_stock'];
        $issued = $query['issued_copies'];
        if ($stock == 0 || $issued >= $stock) {
            $this->validation->setRule("validation_stock", translate('the_book_is_not_available_in_stock'));
            return false;
        } else {
            return true;
        }
    }
    public function event()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('events');
        $this->data['sub_page'] = 'userrole/event';
        $this->data['main_menu'] = 'event';
        echo view('layout/index', $this->data);
    }
    /* invoice user interface with information are controlled here */
    public function invoice()
    {
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js']];
        $stu = $this->userroleModel->getStudentDetails();
        $this->data['config'] = $this->get_payment_config();
        $this->data['getUser'] = $this->userroleModel->getUserDetails();
        $this->data['getOfflinePaymentsConfig'] = $this->userroleModel->getOfflinePaymentsConfig();
        $this->data['invoice'] = $this->feesModel->getInvoiceStatus($stu['enroll_id']);
        $this->data['basic'] = $this->feesModel->getInvoiceBasic($stu['enroll_id']);
        $this->data['title'] = translate('fees_history');
        $this->data['main_menu'] = 'fees';
        $this->data['sub_page'] = 'userrole/collect';
        echo view('layout/index', $this->data);
    }
    /* invoice user interface with information are controlled here */
    public function report_card()
    {
        $this->data['stu'] = $this->userroleModel->getStudentDetails();
        $this->data['title'] = translate('exam_master');
        $this->data['main_menu'] = 'exam';
        $this->data['sub_page'] = 'userrole/report_card';
        echo view('layout/index', $this->data);
    }
    public function homework()
    {
        $stu = $this->userroleModel->getStudentDetails();
        $this->data['homeworklist'] = $this->userroleModel->getHomeworkList($stu['enroll_id']);
        $this->data['title'] = translate('homework');
        $this->data['headerelements'] = ['css' => ['vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
        $this->data['main_menu'] = 'homework';
        $this->data['sub_page'] = 'userrole/homework';
        echo view('layout/index', $this->data);
    }
    public function getHomeworkAssignment()
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $id = $this->request->getPost('id');
        $r = $this->db->table('homework_submit')->where(['homework_id' => $id, 'student_id' => get_loggedin_user_id()])->get()->getRowArray();
        $array = ['id' => $r['id'], 'message' => $r['message'], 'file_name' => $r['enc_name']];
        echo json_encode($array);
    }
    /* homework form validation rules */
    protected function homework_validation()
    {
        $this->validation->setRules(['message' => ["label" => translate('message'), "rules" => 'trim|required']]);
        $this->validation->setRules(['attachment_file' => ["label" => translate('attachment'), "rules" => 'callback_assignment_handle_upload']]);
    }
    // upload file form validation
    public function assignment_handle_upload()
    {
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $allowedExts = array_map('trim', array_map('strtolower', explode(',', (string) $this->data['global_config']['file_extension'])));
            $allowedSizeKB = $this->data['global_config']['file_size'];
            $allowedSize = floatval(1024 * $allowedSizeKB);
            $file_size = $_FILES["attachment_file"]["size"];
            $file_name = $_FILES["attachment_file"]["name"];
            $extension = pathinfo((string) $file_name, PATHINFO_EXTENSION);
            if ($files = filesize($_FILES["attachment_file"]['tmp_name'])) {
                if (!in_array(strtolower($extension), $allowedExts)) {
                    $this->validation->setRule('handle_upload', translate('this_file_type_is_not_allowed'));
                    return false;
                }
                if ($file_size > $allowedSize) {
                    $this->validation->setRule('handle_upload', translate('file_size_shoud_be_less_than') . " {$allowedSizeKB} KB.");
                    return false;
                }
            } else {
                $this->validation->setRule('handle_upload', translate('error_reading_the_file'));
                return false;
            }
            return true;
        } else {
            if (!empty($_POST['old_file'])) {
                return true;
            }
            $this->validation->setRule('assignment_handle_upload', "The Attachment field is required.");
            return false;
        }
    }
    public function assignment_upload()
    {
        if ($_POST !== []) {
            $this->homework_validation();
            if ($this->validation->run() !== false) {
                $message = $this->request->getPost('message');
                $homeworkID = $this->request->getPost('homework_id');
                $assigmentID = $this->request->getPost('assigment_id');
                $arrayDB = [
                    'homework_id' => $homeworkID,
                    'student_id' => get_loggedin_user_id(),
                    'message' => $message
                ];
                if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
                    $config = [];
                    $config['upload_path'] = 'uploads/attachments/homework_submit/';
                    $config['encrypt_name'] = true;
                    $config['allowed_types'] = '*';
                    $file = $this->request->getFile('attachment_file');
    
                    if ($file->isValid() && !$file->hasMoved()) {
                        $file->move($config['upload_path']);
                        $encrypt_name = $this->request->getPost('old_file');
                        if (!empty($encrypt_name)) {
                            $file_name = $config['upload_path'] . $encrypt_name;
                            if (file_exists($file_name)) {
                                unlink($file_name);
                            }
                        }
                        $orig_name = $file->getClientName();
                        $enc_name = $file->getName();
                        $arrayDB['enc_name'] = $enc_name;
                        $arrayDB['file_name'] = $orig_name;
                    } else {
                        set_alert('error', strip_tags((string)$file->getErrorString()));
                    }
                }
                if (empty($assigmentID)) {
                    $this->db->table('homework_submit')->insert($arrayDB);
                } else {
                    $this->db->table('homework_submit')->where('id', $assigmentID)->update($arrayDB);
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $url = base_url('userrole/homework');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->getErrors();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
    }
    
    public function live_class()
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $this->data['branch_id'] = $this->applicationModel->get_branch_id();
        $this->data['title'] = translate('live_class_rooms');
        $this->data['sub_page'] = 'userrole/live_class';
        $this->data['main_menu'] = 'live_class';
        echo view('layout/index', $this->data);
    }
    public function joinModal()
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $this->data['meetingID'] = $this->request->getPost('meeting_id');
        echo view('userrole/live_classModal', $this->data, true);
    }
    public function livejoin()
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $meetingID = $this->request->getGet('meeting_id', true);
        $liveID = $this->request->getGet('live_id', true);
        if (empty($meetingID) || empty($liveID)) {
            access_denied();
        }
        $getMeeting = $this->userroleModel->get('live_class', ['id' => $liveID, 'meeting_id' => $meetingID], true);
        if ($getMeeting['live_class_method'] == 1) {
            echo view('userrole/livejoin', $this->data);
        } else {
            $getStudent = $this->applicationModel->getStudentDetails(get_loggedin_user_id());
            $bbb_config = json_decode((string) $getMeeting['bbb'], true);
            // get BBB api config
            $getConfig = $this->userroleModel->get('live_class_config', ['branch_id' => $getMeeting['branch_id']], true);
            $api_keys = ['bbb_security_salt' => $getConfig['bbb_salt_key'], 'bbb_server_base_url' => $getConfig['bbb_server_base_url']];
            $this->Bigbluebutton_lib = service('bigbluebuttonLib', $api_keys);
            $arrayBBB = ['meeting_id' => $getMeeting['meeting_id'], 'title' => $getMeeting['title'], 'attendee_password' => $bbb_config['attendee_password'], 'presen_name' => $getStudent['first_name'] . ' ' . $getStudent['last_name'] . ' (Roll - ' . $getStudent['roll'] . ')'];
            $response = $this->bigbluebutton_lib->joinMeeting($arrayBBB);
            redirect($response);
        }
    }
    public function live_atten()
    {
        $stu_id = get_loggedin_user_id();
        $id = $this->request->getPost('live_id');
        $arrayInsert = ['live_class_id' => $id, 'student_id' => $stu_id];
        $this->db->table($arrayInsert)->where();
        $query = $builder->get('live_class_reports');
        if ($query->num_rows() > 0) {
            $arrayInsert['created_at'] = date("Y-m-d H:i:s");
            $this->db->table('id', $query->row()->id)->where();
            $this->db->table('live_class_reports', $arrayInsert)->update();
        } else {
            $this->db->table('live_class_reports', $arrayInsert)->insert();
        }
        $array = ['status' => 1];
        echo json_encode($array);
    }
    /* Online exam controller */
    public function online_exam()
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $this->onlineexam = new \App\Models\OnlineexamModel();
        $this->data['headerelements'] = ['js' => ['js/online-exam.js']];
        $this->data['title'] = translate('online_exam');
        $this->data['sub_page'] = 'userrole/online_exam';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function getExamListDT()
    {
        if ($_POST !== []) {
            $this->onlineexam = new \App\Models\OnlineexamModel();
            $postData = $this->request->getPost();
            $currencySymbol = $this->data['global_config']['currency_symbol'];
            echo $this->userroleModel->examListDT($postData, $currencySymbol);
        }
    }
    /* Online exam controller */
    public function onlineexam_take($id = '')
    {
        if (!is_student_loggedin()) {
            access_denied();
        }
        $this->onlineexam = new \App\Models\OnlineexamModel();
        $this->data['headerelements'] = ['js' => ['js/online-exam.js']];
        $exam = $this->userroleModel->getExamDetails($id);
        if (empty($exam)) {
            return redirect()->to(base_url('userrole/online_exam'));
        }
        if ($exam->exam_type == 1 && $exam->payment_status == 0) {
            set_alert('error', "You have to make payment to attend this exam !");
            return redirect()->to(base_url('userrole/online_exam'));
        }
        $this->data['studentSubmitted'] = $this->onlineexamModel->getStudentSubmitted($exam->id);
        $this->data['exam'] = $exam;
        $this->data['title'] = translate('online_exam');
        $this->data['sub_page'] = 'onlineexam/take';
        $this->data['main_menu'] = 'onlineexam';
        echo view('layout/index', $this->data);
    }
    public function ajaxQuestions()
    {
        $status = 0;
        $totalQuestions = 0;
        $message = "";
        $this->onlineexam = new \App\Models\OnlineexamModel();
        $examID = $this->request->getPost('exam_id');
        $exam = $this->userroleModel->getExamDetails($examID);
        $totalQuestions = $exam->questions_qty;
        $studentAttempt = $this->onlineexamModel->getStudentAttempt($exam->id);
        $examSubmitted = $this->onlineexamModel->getStudentSubmitted($exam->id);
        if (!empty($exam)) {
            $startTime = strtotime($exam->exam_start);
            $endTime = strtotime($exam->exam_end);
            $now = strtotime("now");
            if ($startTime <= $now && $now <= $endTime && empty($examSubmitted) && $exam->publish_status == 1) {
                if ($exam->limits_participation > $studentAttempt) {
                    $this->onlineexamModel->addStudentAttemts($exam->id);
                    $message = "";
                    $status = 1;
                } else {
                    $status = 0;
                    $message = "You already reach max exam attempt.";
                }
            } else {
                $message = "Maybe the test has expired or something wrong.";
            }
        }
        $data['exam'] = $exam;
        $data['questions'] = $this->onlineexamModel->getExamQuestions($exam->id, $exam->question_type);
        $pag_content = view('onlineexam/ajax_take', $data, true);
        echo json_encode(['status' => $status, 'total_questions' => $totalQuestions, 'message' => $message, 'page' => $pag_content]);
    }
    public function getStudent_result()
    {
        if ($_POST !== []) {
            $examID = $this->request->getPost('id');
            $this->onlineexam = new \App\Models\OnlineexamModel();
            $exam = $this->onlineexamModel->getExamDetails($examID);
            $data['exam'] = $exam;
            echo view('userrole/onlineexam_result', $data, true);
        }
    }
    public function getExamPaymentForm()
    {
        if ($_POST !== []) {
            $this->onlineexam = new \App\Models\OnlineexamModel();
            $status = 1;
            $page_data = "";
            $examID = $this->request->getPost('examID');
            $exam = $this->userroleModel->getExamDetails($examID);
            $message = "";
            if (empty($exam)) {
                $status = 0;
                $message = 'Exam not found.';
                echo json_encode(['status' => $status, 'message' => $message]);
                exit;
            }
            $data['config'] = $this->get_payment_config();
            $data['global_config'] = $this->data['global_config'];
            $data['getUser'] = $this->userroleModel->getUserDetails();
            $data['exam'] = $exam;
            if ($exam->payment_status == 0) {
                $status = 1;
                $page_data = view('userrole/getExamPaymentForm', $data, true);
            } else {
                $status = 0;
                $message = 'The fee has already been paid.';
            }
            echo json_encode(['status' => $status, 'message' => $message, 'data' => $page_data]);
        }
    }
    public function onlineexam_submit_answer()
    {
        if ($_POST !== []) {
            if (!is_student_loggedin()) {
                access_denied();
            }
            $studentID = get_loggedin_user_id();
            $online_examID = $this->request->getPost('online_exam_id');
            $variable = $this->request->getPost('answer');
            if (!empty($variable)) {
                $saveAnswer = [];
                foreach ($variable as $key => $value) {
    if (isset($value[1])) {
                        $saveAnswer[] = ['student_id' => $studentID, 'online_exam_id' => $online_examID, 'question_id' => $key, 'answer' => $value[1], 'created_at' => date('Y-m-d H:i:s')];
}
                    if (isset($value[2])) {
                        $saveAnswer[] = ['student_id' => $studentID, 'online_exam_id' => $online_examID, 'question_id' => $key, 'answer' => json_encode($value[2]), 'created_at' => date('Y-m-d H:i:s')];
                    }
                    if (isset($value[3])) {
                        $saveAnswer[] = ['student_id' => $studentID, 'online_exam_id' => $online_examID, 'question_id' => $key, 'answer' => $value[3], 'created_at' => date('Y-m-d H:i:s')];
                    }
                    if (isset($value[4])) {
                        $saveAnswer[] = ['student_id' => $studentID, 'online_exam_id' => $online_examID, 'question_id' => $key, 'answer' => $value[4], 'created_at' => date('Y-m-d H:i:s')];
                    }
                }
                $this->db->insert_batch('online_exam_answer', $saveAnswer);
                $this->db->table('online_exam_submitted', ['student_id' => get_loggedin_user_id(), 'online_exam_id' => $online_examID, 'created_at' => date('Y-m-d H:i:s')])->insert();
            }
            set_alert('success', translate('your_exam_has_been_successfully_submitted'));
            return redirect()->to(base_url('userrole/online_exam'));
        }
    }
    public function offline_payments()
    {
        if ($_POST !== []) {
            $this->validation->setRules(['fees_type' => ["label" => translate('fees_type'), "rules" => 'trim|required']]);
            $this->validation->setRules(['date_of_payment' => ["label" => translate('date_of_payment'), "rules" => 'trim|required']]);
            $this->validation->setRule('fee_amount', translate('amount'), ['trim', 'required', 'numeric', 'greater_than[0]', ['deposit_verify', [$this->fees_model, 'depositAmountVerify']]]);
            $this->validation->setRules(['payment_method' => ["label" => translate('payment_method'), "rules" => 'trim|required']]);
            $this->validation->setRules(['note' => ["label" => translate('note'), "rules" => 'trim|required']]);
            $this->validation->setRules(['proof_of_payment' => ["label" => translate('proof_of_payment'), "rules" => 'callback_fileHandleUpload[proof_of_payment]']]);
            if ($this->validation->run() !== false) {
                $feesType = explode("|", (string) $this->request->getPost('fees_type'));
                $date_of_payment = $this->request->getPost('date_of_payment');
                $payment_method = $this->request->getPost('payment_method');
                $invoice_no = $this->request->getPost('invoice_no');
                $enc_name = null;
                $orig_name = null;
                $config = [];
                $config['upload_path'] = 'uploads/attachments/offline_payments/';
                $config['encrypt_name'] = true;
                $config['allowed_types'] = '*';
                $file = $this->request->getFile('attachment_file'); $file->initialize($config);
                if ($this->upload->do_upload("proof_of_payment")) {
                    $orig_name = $file = $this->request->getFile('attachment_file'); $file->data('orig_name');
                    $enc_name = $file = $this->request->getFile('attachment_file'); $file->data('file_name');
                }
                $stu = $this->userroleModel->getStudentDetails();
                $arrayFees = ['fees_allocation_id' => $feesType[0], 'fees_type_id' => $feesType[1], 'invoice_no' => $invoice_no, 'student_enroll_id' => $stu['enroll_id'], 'amount' => $this->request->getPost('fee_amount'), 'fine' => $this->request->getPost('fine_amount'), 'payment_method' => $payment_method, 'reference' => $this->request->getPost('reference'), 'note' => $this->request->getPost('note'), 'payment_date' => date('Y-m-d', strtotime((string) $date_of_payment)), 'submit_date' => date('Y-m-d H:i:s'), 'enc_file_name' => $enc_name, 'orig_file_name' => $orig_name, 'status' => 1];
                $this->db->table('offline_fees_payments', $arrayFees)->insert();
                set_alert('success', "We will review and notify your of your payment.");
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'url' => '', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // get payments details modal
    public function getOfflinePaymentslDetails()
    {
        if ($_POST !== []) {
            $this->data['payments_id'] = $this->request->getPost('id');
            echo view('userrole/getOfflinePaymentslDetails', $this->data);
        }
    }
    public function getBalanceByType()
    {
        $input = $this->request->getPost('typeID');
        if (empty($input)) {
            $balance = 0;
            $fine = 0;
        } else {
            $feesType = explode("|", (string) $input);
            $fine = $this->feesModel->feeFineCalculation($feesType[0], $feesType[1]);
            $b = $this->feesModel->getBalance($feesType[0], $feesType[1]);
            $balance = $b['balance'];
            $fine = abs($fine - $b['fine']);
        }
        echo json_encode(['balance' => $balance, 'fine' => $fine]);
    }
    public function switchClass($enrollID = '')
    {
        $enrollID = $this->security->xss_clean($enrollID);
        if (!empty($enrollID) && is_student_loggedin()) {
            $getRow = $db->table('enroll')->get('enroll')->row();
            if (!empty($getRow) && $getRow->student_id == get_loggedin_user_id()) {
                $this->db->table('student_id', $getRow->student_id)->where();
                $this->db->table('session_id', $getRow->session_id)->where();
                $this->db->table('enroll', ['default_login' => 0])->update();
                $this->db->table('id', $enrollID)->where();
                $this->db->table('enroll', ['default_login' => 1])->update();
                session()->set('enrollID', $enrollID);
                if (!empty($_SERVER['HTTP_REFERER'])) {
                    redirect($_SERVER['HTTP_REFERER']);
                } else {
                    redirect(base_url('dashboard'), 'refresh');
                }
            } else {
                redirect(base_url('dashboard'), 'refresh');
            }
        } else {
            redirect(base_url(), 'refresh');
        }
    }
    public function subject_wise_attendance()
    {
        $getAttendanceType = $this->appLib->getAttendanceType();
        if ($getAttendanceType != 2 && $getAttendanceType != 1) {
            access_denied();
        }
        $this->attendancePeriod = new \App\Models\AttendancePeriodModel();
        $this->subject = new \App\Models\SubjectModel();
        $this->attendance = new \App\Models\AttendanceModel();
        $getStudentDetails = $this->userroleModel->getStudentDetails();
        $branchID = $getStudentDetails['branch_id'];
        $this->data['class_id'] = $getStudentDetails['class_id'];
        $this->data['section_id'] = $getStudentDetails['section_id'];
        if ($_POST !== []) {
            $this->data['subject_id'] = $this->request->getPost('subject_id');
            $this->data['month'] = date('m', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['year'] = date('Y', strtotime((string) $this->request->getPost('timestamp')));
            $this->data['days'] = date('t', strtotime($this->data['year'] . "-" . $this->data['month']));
            $this->data['studentDetails'] = $getStudentDetails;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['title'] = translate('subject_wise_attendance');
        $this->data['sub_page'] = 'userrole/subject_wise_attendance';
        $this->data['main_menu'] = 'attendance';
        echo view('layout/index', $this->data);
    }
}






File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/frontend/Content.php
<?php

namespace App\Controllers\frontend;

use App\Controllers\AdminController;
use App\Models;

class Content extends AdminController
{
    public $appLib;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->content = new \App\Models\ContentModel();
    }
    private function content_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['title' => ["label" => translate('page_title'), "rules" => 'trim|required|xss_clean']]);
        $this->validation->setRules(['menu_id' => ["label" => translate('select_menu'), "rules" => 'trim|required|xss_clean|callback_unique_menu']]);
        $this->validation->setRules(['content' => ["label" => translate('content'), "rules" => 'required']]);
        $this->validation->setRules(['meta_keyword' => ["label" => translate('meta_keyword'), "rules" => 'xss_clean']]);
        $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'trim|xss_clean|callback_check_image']]);
        $this->validation->setRules(['meta_description' => ["label" => translate('meta_description'), "rules" => 'xss_clean']]);
    }
    public function index()
    {
        // check access permission
        if (!get_permission('manage_page', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('manage_page', 'is_add')) {
                access_denied();
            }
            $this->content_validation();
            if ($this->validation->run() !== false) {
                // save information in the database
                $arrayData = ['branch_id' => $this->applicationModel->get_branch_id(), 'page_title' => $this->request->getPost('title'), 'menu_id' => $this->request->getPost('menu_id'), 'content' => $this->request->getPost('content', false), 'banner_image' => $this->contentModel->uploadBanner('page_' . $this->request->getPost('menu_id'), 'banners'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword')];
                $this->contentModel->save_content($arrayData);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/summernote/summernote.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/summernote/summernote.js']];
        $this->data['pagelist'] = $this->contentModel->get_page_list();
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/content';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function edit($id = '')
    {
        if (!get_permission('manage_page', 'is_edit')) {
            access_denied();
        }
        if ($this->request->getPost()) {
            $this->content_validation();
            if ($this->validation->run() !== false) {
                // update information in the database
                $page_id = $this->request->getPost('page_id');
                $arrayData = ['branch_id' => $this->applicationModel->get_branch_id(), 'page_title' => $this->request->getPost('title'), 'menu_id' => $this->request->getPost('menu_id'), 'content' => $this->request->getPost('content', false), 'banner_image' => $this->contentModel->uploadBanner('page_' . $this->request->getPost('menu_id'), 'banners'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword')];
                $this->contentModel->save_content($arrayData, $page_id);
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('frontend/content');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/summernote/summernote.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/summernote/summernote.js']];
        $this->data['content'] = $this->appLib->getTable('front_cms_pages', ['t.id' => $id], true);
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/content_edit';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function delete($id = '')
    {
        if (!get_permission('manage_page', 'is_delete')) {
            access_denied();
        }
        $this->db->table(['id' => $id])->delete("front_cms_pages")->where();
    }
    public function check_image()
    {
        $prev_image = $this->request->getPost('old_photo');
        if ($prev_image == "") {
            if (isset($_FILES['photo']['name']) && !empty($_FILES['photo']['name'])) {
                $name = $_FILES['photo']['name'];
                $arr = explode('.', (string) $name);
                $ext = end($arr);
                if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png') {
                    return true;
                } else {
                    $this->validation->setRule('check_image', translate('select_valid_file_format'));
                    return false;
                }
            } else {
                $this->validation->setRule('check_image', 'The Photo is required.');
                return false;
            }
        } else {
            return true;
        }
    }
    // unique valid menu verification is done here
    public function unique_menu($id)
    {
        if ($this->request->getPost('page_id')) {
            $page_id = $this->request->getPost('page_id');
            $this->db->where_not_in('id', $page_id);
        }
        $this->db->table('menu_id', $id)->where();
        $query = $builder->get('front_cms_pages');
        if ($query->num_rows() > 0) {
            $this->validation->setRule("unique_menu", "This menu has already been allocated.");
            return false;
        } else {
            return true;
        }
    }
    // get menu list based on the branch
    public function getMenuBranch()
    {
        $html = "";
        $branchID = $this->applicationModel->get_branch_id();
        if (!empty($branchID)) {
            $this->db->order_by('ordering', 'asc');
            $this->db->table('system', 0)->where();
            $this->db->table('branch_id', $branchID)->where();
            $result = $builder->get('front_cms_menu')->result_array();
            if (count($result) > 0) {
                $html .= '<option value="">' . translate('select') . '</option>';
                foreach ($result as $row) {
    $html .= '<option value="' . $row['id'] . '">' . $row['title'] . '</option>';
}
            } else {
                $html .= '<option value="">' . translate('no_information_available') . '</option>';
            }
        } else {
            $html .= '<option value="">' . translate('select_branch_first') . '</option>';
        }
        echo $html;
    }
}

File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/frontend/Gallery.php
<?php

namespace App\Controllers\frontend;

use App\Models;
use App\Controllers\AdminController;

class Gallery extends AdminController
{
    public $appLib;
    public function __construct()
    {
        parent::__construct();
        
        $this->appLib = service('appLib');$config = ['field' => 'alias', 'title' => 'title', 'table' => 'front_cms_gallery_content', 'id' => 'id'];
        $this->slug = service('slug', $config);
        $this->gallery = new \App\Models\GalleryModel();
        $this->data['headerelements'] = ['css' => ['vendor/dropify/css/dropify.min.css', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.css'], 'js' => ['vendor/dropify/js/dropify.min.js', 'vendor/bootstrap-fileupload/bootstrap-fileupload.min.js']];
    }
    private function slider_validation()
    {
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['gallery_title' => ["label" => translate('gallery_title'), "rules" => 'trim|required']]);
        $this->validation->setRules(['description' => ["label" => translate('description'), "rules" => 'trim|required']]);
        $this->validation->setRules(['category_id' => ["label" => translate('category'), "rules" => 'trim|required']]);
        $this->validation->setRules(['thumb_image' => ["label" => translate('thumb_image'), "rules" => 'trim|callback_check_image']]);
    }
    public function index()
    {
        // check access permission
        if (!get_permission('frontend_gallery', 'is_view')) {
            access_denied();
        }
        if ($_POST !== []) {
            if (!get_permission('frontend_gallery', 'is_add')) {
                access_denied();
            }
            $this->slider_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->galleryModel->save($this->request->getPost());
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['gallerylist'] = $this->appLib->getTable('front_cms_gallery_content');
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/gallery';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    // home slider edit
    public function edit($id = '')
    {
        if (!get_permission('frontend_gallery', 'is_edit')) {
            access_denied();
        }
        if ($_POST !== []) {
            $this->slider_validation();
            if ($this->validation->run() !== false) {
                // save information in the database file
                $this->galleryModel->save($this->request->getPost());
                set_alert('success', translate('information_has_been_updated_successfully'));
                $url = base_url('frontend/gallery/index');
                $array = ['status' => 'success', 'url' => $url];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['gallery'] = $this->galleryModel->get('front_cms_gallery_content', ['id' => $id], true);
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/gallery_edit';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    // home slider delete
    public function delete($id = '')
    {
        if (!get_permission('frontend_gallery', 'is_delete')) {
            access_denied();
        }
        $image = $builder->getWhere('front_cms_gallery_content', ['id' => $id])->row()->image;
        if ($this->db->where(['id' => $id])->delete("front_cms_gallery_content")) {
            // delete gallery user image
            $destination = './uploads/frontend/gallery/';
            if (file_exists($destination . $image)) {
                @unlink($destination . $image);
            }
        }
    }
    public function check_image()
    {
        if ($this->request->getPost('gallery_id')) {
            if (!empty($_FILES['thumb_image']['name'])) {
                $name = $_FILES['thumb_image']['name'];
                $arr = explode('.', (string) $name);
                $ext = end($arr);
                if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png') {
                    return true;
                } else {
                    $this->validation->setRule('check_image', translate('select_valid_file_format'));
                    return false;
                }
            }
        } elseif (isset($_FILES['thumb_image']['name']) && !empty($_FILES['thumb_image']['name'])) {
            $name = $_FILES['thumb_image']['name'];
            $arr = explode('.', (string) $name);
            $ext = end($arr);
            if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'png') {
                return true;
            } else {
                $this->validation->setRule('check_image', translate('select_valid_file_format'));
                return false;
            }
        } else {
            $this->validation->setRule('check_image', 'The thumb image is required.');
            return false;
        }
        return null;
    }
    public function album($id = '')
    {
        // check access permission
        if (!get_permission('frontend_gallery', 'is_edit')) {
            access_denied();
        }
        $this->data['gallery'] = $this->appLib->getTable('front_cms_gallery_content', ['t.id' => $id], TRUE);
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/gallery_album';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function upload()
    {
        // check access permission
        if (!get_permission('frontend_gallery', 'is_edit')) {
            ajax_access_denied();
        }
        $type = $this->request->getPost('type');
        $video_url = null;
        $this->validation->setRules(['type' => ["label" => translate('type'), "rules" => 'trim|required']]);
        if ($type == 2) {
            $video_url = $this->request->getPost('video_url');
            $this->validation->setRules(['video_url' => ["label" => translate('video_url'), "rules" => 'trim|required']]);
        }
        $this->validation->setRules(['thumb_image' => ["label" => translate('photo'), "rules" => 'trim|callback_check_image']]);
        if ($this->validation->run() !== false) {
            $album_id = $this->request->getPost('album_id');
            $getData = $this->appLib->getTable('front_cms_gallery_content', ['t.id' => $album_id], TRUE);
            $arr = [];
            $count = 1;
            if (!empty($getData['elements'])) {
                $getJson = json_decode((string) $getData['elements'], TRUE);
                if (array_keys($getJson) !== []) {
                    $count = max(array_keys($getJson)) + 1;
                }
                foreach ($getJson as $key => $value) {
    $arr[$key] = ['image' => $value['image'], 'type' => $value['type'], 'date' => $value['date'], 'video_url' => $value['video_url']];
}
            }
            $arr[$count] = ['image' => $this->galleryModel->upload_image('album'), 'type' => $type, 'video_url' => $video_url, 'date' => date("Y-m-d H:i:s")];
            $insertGallery = ['elements' => json_encode($arr)];
            $this->db->table('id', $album_id)->where();
            $this->db->table('front_cms_gallery_content', $insertGallery)->update();
            set_alert('success', translate('information_has_been_saved_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    public function upload_delete($id = '', $elem_id = '')
    {
        if (!get_permission('frontend_gallery', 'is_delete')) {
            access_denied();
        }
        $getData = $this->appLib->getTable('front_cms_gallery_content', ['t.id' => $id], TRUE);
        if (!empty($getData['elements'])) {
            $getJson = json_decode((string) $getData['elements'], TRUE);
            foreach ($getJson as $key => $value) {
    if ($key == $elem_id) {
                    unset($getJson[$key]);
                    // delete gallery user image
                    $destination = './uploads/frontend/gallery/';
                    $image = $value['image'];
                    if (file_exists($destination . $image)) {
                        @unlink($destination . $image);
}
                }
            }
            $insertGallery = ['elements' => json_encode($getJson)];
            $this->db->table('id', $id)->where();
            $this->db->table('front_cms_gallery_content', $insertGallery)->update();
        }
    }
    // publish on show website
    public function show_website()
    {
        $id = $this->request->getPost('id');
        $status = $this->request->getPost('status');
        $arrayData['show_web'] = $status == 'true' ? 1 : 0;
        if (!is_superadmin_loggedin()) {
            $this->db->table('branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('id', $id)->where();
        $this->db->table('front_cms_gallery_content', $arrayData)->update();
        $return = ['msg' => translate('information_has_been_updated_successfully'), 'status' => true];
        echo json_encode($return);
    }
    // add new student category
    public function category()
    {
        if (isset($_POST['category'])) {
            if (!get_permission('frontend_gallery_category', 'is_add')) {
                access_denied();
            }
            if (is_superadmin_loggedin()) {
                $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
            }
            $this->validation->setRules(['category_name' => ["label" => translate('category_name'), "rules" => 'trim|required|callback_unique_category']]);
            if ($this->validation->run() !== false) {
                $arrayData = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
                $this->db->table('front_cms_gallery_category', $arrayData)->insert();
                set_alert('success', translate('information_has_been_saved_successfully'));
                return redirect()->to(base_url('frontend/gallery/category'));
            }
        }
        $this->data['categorylist'] = $this->appLib->getTable('front_cms_gallery_category');
        $this->data['title'] = translate('frontend');
        $this->data['sub_page'] = 'frontend/gallery_category';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    // update existing student category
    public function category_edit()
    {
        if (!get_permission('frontend_gallery_category', 'is_edit')) {
            ajax_access_denied();
        }
        if (is_superadmin_loggedin()) {
            $this->validation->setRules(['branch_id' => ["label" => translate('branch'), "rules" => 'required']]);
        }
        $this->validation->setRules(['category_name' => ["label" => translate('category_name'), "rules" => 'trim|required|callback_unique_category']]);
        if ($this->validation->run() !== false) {
            $category_id = $this->request->getPost('category_id');
            $arrayData = ['name' => $this->request->getPost('category_name'), 'branch_id' => $this->applicationModel->get_branch_id()];
            $this->db->table('id', $category_id)->where();
            $this->db->table('front_cms_gallery_category', $arrayData)->update();
            set_alert('success', translate('information_has_been_updated_successfully'));
            $array = ['status' => 'success'];
        } else {
            $error = $this->validation->error_array();
            $array = ['status' => 'fail', 'error' => $error];
        }
        echo json_encode($array);
    }
    // delete student category from database
    public function category_delete($id)
    {
        if (get_permission('frontend_gallery_category', 'is_delete')) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $this->db->table('id', $id)->where();
            $this->db->table('front_cms_gallery_category')->delete();
        }
    }
    /* validate here, if the check student category name */
    public function unique_category($name)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $category_id = $this->request->getPost('category_id');
        if (!empty($category_id)) {
            $this->db->where_not_in('id', $category_id);
        }
        $this->db->table(['name' => $name, 'branch_id' => $branchID])->where();
        $uniform_row = $builder->get('front_cms_gallery_category')->num_rows();
        if ($uniform_row == 0) {
            return true;
        } else {
            $this->validation->setRule("unique_category", translate('already_taken'));
            return false;
        }
    }
}

File: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Controllers/frontend/Section.php
<?php

namespace App\Controllers\frontend;

use App\Models;
use App\Controllers\AdminController;

class Section extends AdminController
 
{
    public $appLib;
    protected $db;



    public function __construct()
    {



        parent::__construct();
        
        $this->appLib = service('appLib'); 
$this->frontend = new \App\Models\FrontendModel();
        $this->studentFields = new \App\Models\StudentFieldsModel();
        $this->data['headerelements'] = ['css' => ['vendor/summernote/summernote.css', 'vendor/dropify/css/dropify.min.css', 'vendor/jquery-asColorPicker-master/css/asColorPicker.css'], 'js' => ['vendor/summernote/summernote.js', 'vendor/dropify/js/dropify.min.js', 'vendor/jquery-asColorPicker-master/libs/jquery-asColor.js', 'vendor/jquery-asColorPicker-master/libs/jquery-asGradient.js', 'vendor/jquery-asColorPicker-master/dist/jquery-asColorPicker.min.js']];
        if (!get_permission('frontend_section', 'is_view')) {
            access_denied();
        }
    }
    public function index()
    {
        $this->home();
    }
    // home features
    public function home()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['wellcome'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'wellcome', 'branch_id' => $branchID], true);
        $this->data['home_seo'] = $this->frontendModel->get('front_cms_home_seo', ['branch_id' => $branchID], true);
        $this->data['teachers'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'teachers', 'branch_id' => $branchID], true);
        $this->data['testimonial'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'testimonial', 'branch_id' => $branchID], true);
        $this->data['services'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'services', 'branch_id' => $branchID], true);
        $this->data['statistics'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'statistics', 'branch_id' => $branchID], true);
        $this->data['cta'] = $this->frontendModel->get('front_cms_home', ['item_type' => 'cta', 'branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_home';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function home_wellcome()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['wel_title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['subtitle' => ["label" => 'Subtitle', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayWellcome = ['branch_id' => $branchID, 'title' => $this->request->getPost('wel_title'), 'subtitle' => $this->request->getPost('subtitle'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'description' => $this->request->getPost('description'), 'color1' => $this->request->getPost('title_text_color'), 'elements' => json_encode(['image' => $this->uploadImage('wellcome' . $branchID, 'home_page')])];
                // save information in the database
                $this->saveHome('wellcome', $branchID, $arrayWellcome);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function home_teachers()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['tea_title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['tea_description' => ["label" => 'Description', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayTeacher = ['branch_id' => $branchID, 'title' => $this->request->getPost('tea_title'), 'description' => $this->request->getPost('tea_description'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'elements' => json_encode(['teacher_start' => $this->request->getPost('teacher_start'), 'image' => $this->uploadImage('featured-parallax' . $branchID, 'home_page')]), 'color1' => $this->request->getPost('title_text_color'), 'color2' => $this->request->getPost('description_text_color')];
                // save information in the database
                $this->saveHome('teachers', $branchID, $arrayTeacher);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function home_testimonial()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['tes_title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['tes_description' => ["label" => 'Description', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayTestimonial = ['branch_id' => $branchID, 'title' => $this->request->getPost('tes_title'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'description' => $this->request->getPost('tes_description')];
                // save information in the database
                $this->saveHome('testimonial', $branchID, $arrayTestimonial);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function home_services()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['ser_title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['ser_description' => ["label" => 'Description', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayServices = ['branch_id' => $branchID, 'title' => $this->request->getPost('ser_title'), 'color1' => $this->request->getPost('title_text_color'), 'color2' => $this->request->getPost('background_color'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'description' => $this->request->getPost('ser_description')];
                // save information in the database
                $this->saveHome('services', $branchID, $arrayServices);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function home_statistics()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['sta_title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['sta_description' => ["label" => 'Description', "rules" => 'trim|required']]);
            for ($i = 1; $i < 5; $i++) {
                $this->validation->setRules(['widget_title_' . $i => ["label" => 'Widget Title', "rules" => 'trim|required']]);
                $this->validation->setRules(['widget_icon_' . $i => ["label" => 'Widget Icon', "rules" => 'trim|required']]);
                $this->validation->setRules(['statistics_type_' . $i => ["label" => 'Statistics Type', "rules" => 'trim|required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $elements = [];
                $elements['image'] = $this->uploadImage('counter-parallax' . $branchID, 'home_page');
                for ($i = 1; $i < 5; $i++) {
                    $elements['widget_title_' . $i] = $this->request->getPost('widget_title_' . $i);
                    $elements['widget_icon_' . $i] = $this->request->getPost('widget_icon_' . $i);
                    $elements['type_' . $i] = $this->request->getPost('statistics_type_' . $i);
                }
                $arrayServices = ['branch_id' => $branchID, 'title' => $this->request->getPost('sta_title'), 'color1' => $this->request->getPost('title_text_color'), 'color2' => $this->request->getPost('description_text_color'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'description' => $this->request->getPost('sta_description'), 'elements' => json_encode($elements)];
                // save information in the database
                $this->saveHome('statistics', $branchID, $arrayServices);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function home_cta()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['cta_title' => ["label" => 'Cta Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['mobile_no' => ["label" => 'Mobile No', "rules" => 'trim|required']]);
            $this->validation->setRules(['button_text' => ["label" => 'Button Text', "rules" => 'trim|required']]);
            $this->validation->setRules(['button_url' => ["label" => 'Button Url', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $elements_data = ['mobile_no' => $this->request->getPost('mobile_no'), 'button_text' => $this->request->getPost('button_text'), 'button_url' => $this->request->getPost('button_url')];
                $array_cta = ['branch_id' => $branchID, 'title' => $this->request->getPost('cta_title'), 'color1' => $this->request->getPost('background_color'), 'color2' => $this->request->getPost('text_color'), 'active' => isset($_POST['isvisible']) ? 1 : 0, 'elements' => json_encode($elements_data)];
                // save information in the database
                $this->saveHome('cta', $branchID, $array_cta);
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function home_options()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arraySeo = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'meta_keyword' => $this->request->getPost('meta_keyword', true), 'meta_description' => $this->request->getPost('meta_description', true)];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_home_seo');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_home_seo', $arraySeo)->update();
                } else {
                    $this->db->table('front_cms_home_seo', $arraySeo)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function teachers()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('teachers' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_teachers');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_teachers', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_teachers', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['teachers'] = $this->frontendModel->get('front_cms_teachers', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_teachers';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function events()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['events'] = $this->frontendModel->get('front_cms_events', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_events';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function eventsSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'title' => $this->request->getPost('title'), 'description' => $this->request->getPost('description', false)];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_events');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_events', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_events', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function eventsOptionSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('event' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_events');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_events', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_events', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function about()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['about'] = $this->frontendModel->get('front_cms_about', ['branch_id' => $branchID], true);
        $this->data['service'] = $this->frontendModel->get('front_cms_services', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_about';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function aboutSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['subtitle' => ["label" => 'Subtitle', "rules" => 'trim|required']]);
            $this->validation->setRules(['content' => ["label" => 'Content', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $branchID = $this->frontendModel->getBranchID();
                // save information in the database
                $arrayData = ['title' => $this->request->getPost('title'), 'subtitle' => $this->request->getPost('subtitle'), 'content' => $this->request->getPost('content', false), 'about_image' => $this->uploadImage('about' . $branchID, 'about'), 'branch_id' => $branchID];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_about');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_about', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_about', $arrayData)->insert();
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function aboutServiceSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['subtitle' => ["label" => 'Subtitle', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                $branchID = $this->frontendModel->getBranchID();
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'title' => $this->request->getPost('title'), 'subtitle' => $this->request->getPost('subtitle'), 'parallax_image' => $this->uploadImage('service_parallax' . $branchID, 'about')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_services');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_services', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_services', $arrayData)->insert();
                }
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function aboutCtaSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['cta_title' => ["label" => 'Cta Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['button_text' => ["label" => 'Button Text', "rules" => 'trim|required']]);
            $this->validation->setRules(['button_url' => ["label" => 'Button Url', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $array_cta = ['cta_title' => $this->request->getPost('cta_title'), 'button_text' => $this->request->getPost('button_text'), 'button_url' => $this->request->getPost('button_url')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_about');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_about', ['elements' => json_encode($array_cta)])->update();
                } else {
                    $this->db->table('front_cms_about', ['elements' => json_encode($array_cta)])->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function aboutOptionsSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('about' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_about');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_about', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_about', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function faq()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['faq'] = $this->frontendModel->get('front_cms_faq', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_faq';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function faqSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'title' => $this->request->getPost('title'), 'description' => $this->request->getPost('description', false)];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_faq');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_faq', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_faq', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function faqOptionSave()
    {
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('faq' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_faq');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_faq', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_faq', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function admission()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['admission'] = $this->frontendModel->get('front_cms_admission', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_admission';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function saveAdmission()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            // check access permission
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['title' => ["label" => 'Title', "rules" => 'trim|required']]);
            $items = $this->request->getPost('addmissionfee');
            if (!empty($items)) {
                foreach ($items as $key => $value) {
    if ($value['status'] == 1) {
                        $this->validation->setRules(['addmissionfee[' . $key . '][amount]' => ["label" => translate('amount'), "rules" => 'trim|numeric|required']]);
}
                }
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $feeElements = [];
                if (!empty($items)) {
                    foreach ($items as $value) {
    if ($value['status'] == 1) {
                            $classID = $value['class_id'];
                            $feeElements[$classID] = ['fee_status' => $value['status'], 'amount' => $value['amount']];
}
                    }
                }
                $arrayData = ['branch_id' => $branchID, 'title' => $this->request->getPost('title'), 'description' => $this->request->getPost('description', false), 'terms_conditions_title' => $this->request->getPost('terms_conditions_title'), 'terms_conditions_description' => $this->request->getPost('terms_conditions_description', false), 'fee_elements' => json_encode($feeElements)];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_admission');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_admission', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_admission', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function saveAdmissionOption()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'meta_description' => $this->request->getPost('meta_description'), 'banner_image' => $this->uploadImage('admission' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_admission');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_admission', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_admission', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    public function saveOnlineAdmissionFields()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $systemFields = $this->request->getPost('system_fields');
            foreach ($systemFields as $key => $value) {
    $is_status = isset($value['status']) ? 1 : 0;
                $is_required = isset($value['required']) ? 1 : 0;
                $arrayData = ['fields_id' => $key, 'branch_id' => $branchID, 'system' => 1, 'status' => $is_status, 'required' => $is_required];
                $exist_privileges = $db->table('online_admission_fields')->get('online_admission_fields')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('online_admission_fields', $arrayData, ['fields_id' => $key, 'branch_id' => $branchID, 'system' => 1])->update();
} else {
                    $this->db->table('online_admission_fields', $arrayData)->insert();
                }
            }
            $customFields = $this->request->getPost('custom_fields');
            foreach ($customFields as $key => $value) {
    $is_status = isset($value['status']) ? 1 : 0;
                $is_required = isset($value['required']) ? 1 : 0;
                $arrayData = ['fields_id' => $key, 'branch_id' => $branchID, 'system' => 0, 'status' => $is_status, 'required' => $is_required];
                $exist_privileges = $db->table('online_admission_fields')->get('online_admission_fields')->num_rows();
                if ($exist_privileges > 0) {
                    $this->db->table('online_admission_fields', $arrayData, ['fields_id' => $key, 'branch_id' => $branchID, 'system' => 0])->update();
} else {
                    $this->db->table('online_admission_fields', $arrayData)->insert();
                }
            }
            $message = translate('information_has_been_saved_successfully');
            $array = ['status' => 'success', 'message' => $message];
            echo json_encode($array);
        }
    }
    public function contact()
    {
        $branchID = $this->frontendModel->getBranchID();
        $this->data['branch_id'] = $branchID;
        $this->data['contact'] = $this->frontendModel->get('front_cms_contact', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_contact';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function contactSave()
    {
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['box_title' => ["label" => 'Box Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['box_description' => ["label" => 'Box Description', "rules" => 'trim|required']]);
            $this->validation->setRules(['form_title' => ["label" => 'Form Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['address' => ["label" => 'Address', "rules" => 'trim|required']]);
            $this->validation->setRules(['phone' => ["label" => 'Phone', "rules" => 'trim|required']]);
            $this->validation->setRules(['email' => ["label" => 'Email', "rules" => 'trim|required']]);
            $this->validation->setRules(['submit_text' => ["label" => 'Submit Text', "rules" => 'trim|required']]);
            $this->validation->setRules(['map_iframe' => ["label" => 'Map Iframe', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'box_title' => $this->request->getPost('box_title'), 'box_description' => $this->request->getPost('box_description'), 'form_title' => $this->request->getPost('form_title'), 'address' => $this->request->getPost('address'), 'phone' => $this->request->getPost('phone'), 'email' => $this->request->getPost('email'), 'submit_text' => $this->request->getPost('submit_text'), 'map_iframe' => $this->request->getPost('map_iframe', false)];
                // upload box image
                if (isset($_FILES["photo"]) && !empty($_FILES["photo"]['name'])) {
                    $imageNmae = $_FILES['photo']['name'];
                    $extension = pathinfo((string) $imageNmae, PATHINFO_EXTENSION);
                    $newLogoName = "contact-info-box{$branchID}." . $extension;
                    $image_path = './uploads/frontend/images/' . $newLogoName;
                    if (move_uploaded_file($_FILES['photo']['tmp_name'], $image_path)) {
                        $arrayData['box_image'] = $newLogoName;
                    }
                }
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_contact');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_contact', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_contact', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    function contactOptionSave()
    {
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                access_denied();
            }
            $branchID = $this->frontendModel->getBranchID();
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $array_about = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('contact' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_contact');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_contact', $array_about)->update();
                } else {
                    $this->db->table('front_cms_contact', $array_about)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
        }
    }
    // upload image
    public function uploadImage($img_name, $path)
    {
        $prev_image = $this->request->getPost('old_photo');
        $image = $_FILES['photo']['name'];
        $return_image = '';
        if ($image != '') {
            $destination = './uploads/frontend/' . $path . '/';
            $extension = pathinfo((string) $image, PATHINFO_EXTENSION);
            $image_path = $img_name . '.' . $extension;
            move_uploaded_file($_FILES['photo']['tmp_name'], $destination . $image_path);
            // need to unlink previous slider
            if ($prev_image != $image_path && file_exists($destination . $prev_image)) {
                @unlink($destination . $prev_image);
            }
            $return_image = $image_path;
        } else {
            $return_image = $prev_image;
        }
        return $return_image;
    }
    private function saveHome($item, $branch_id, $data)
    {
        $this->db->table(['item_type' => $item, 'branch_id' => $branch_id])->where();
        $get = $builder->get('front_cms_home');
        if ($get->num_rows() > 0) {
            $this->db->table('id', $get->row()->id)->where();
            $this->db->table('front_cms_home', $data)->update();
        } else {
            $data['item_type'] = $item;
            $this->db->table('front_cms_home', $data)->insert();
        }
    }
    public function admit_card()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            $this->validation->setRules(['templete_id' => ["label" => 'Default Template', "rules" => 'trim|required']]);
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'description' => $this->request->getPost('description', false), 'templete_id' => $this->request->getPost('templete_id'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('admit_card' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_admitcard');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_admitcard', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_admitcard', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['admitcard'] = $this->frontendModel->get('front_cms_admitcard', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_admit_card';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function exam_results()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'description' => $this->request->getPost('description', false), 'grade_scale' => isset($_POST['grade_scale']) ? 1 : 0, 'attendance' => isset($_POST['attendance']) ? 1 : 0, 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('exam_results' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_exam_results');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_exam_results', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_exam_results', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['admitcard'] = $this->frontendModel->get('front_cms_exam_results', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_exam_results';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function certificates()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'description' => $this->request->getPost('description', false), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('certificates' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_certificates');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_certificates', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_certificates', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['admitcard'] = $this->frontendModel->get('front_cms_certificates', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_certificates';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function gallery()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('gallery' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_gallery');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_gallery', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_gallery', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['admitcard'] = $this->frontendModel->get('front_cms_gallery', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_gallery';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
    public function news()
    {
        $branchID = $this->frontendModel->getBranchID();
        if ($_POST !== []) {
            if (!get_permission('frontend_section', 'is_add')) {
                ajax_access_denied();
            }
            $this->validation->setRules(['page_title' => ["label" => 'Page Title', "rules" => 'trim|required']]);
            $this->validation->setRules(['description' => ["label" => 'Description', "rules" => 'required']]);
            $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'callback_photoHandleUpload[photo]']]);
            if (isset($_FILES["photo"]) && empty($_FILES["photo"]['name']) && empty($_POST['old_photo'])) {
                $this->validation->setRules(['photo' => ["label" => translate('photo'), "rules" => 'required']]);
            }
            if ($this->validation->run() == true) {
                // save information in the database
                $arrayData = ['branch_id' => $branchID, 'page_title' => $this->request->getPost('page_title'), 'description' => $this->request->getPost('description', false), 'meta_description' => $this->request->getPost('meta_description'), 'meta_keyword' => $this->request->getPost('meta_keyword'), 'banner_image' => $this->uploadImage('news' . $branchID, 'banners')];
                $this->db->table('branch_id', $branchID)->where();
                $get = $builder->get('front_cms_news');
                if ($get->num_rows() > 0) {
                    $this->db->table('id', $get->row()->id)->where();
                    $this->db->table('front_cms_news', $arrayData)->update();
                } else {
                    $this->db->table('front_cms_news', $arrayData)->insert();
                }
                set_alert('success', translate('information_has_been_saved_successfully'));
                $array = ['status' => 'success'];
            } else {
                $error = $this->validation->error_array();
                $array = ['status' => 'fail', 'error' => $error];
            }
            echo json_encode($array);
            exit;
        }
        $this->data['branch_id'] = $branchID;
        $this->data['admitcard'] = $this->frontendModel->get('front_cms_news', ['branch_id' => $branchID], true);
        $this->data['title'] = translate('website_page');
        $this->data['sub_page'] = 'frontend/section_news';
        $this->data['main_menu'] = 'frontend';
        echo view('layout/index', $this->data);
    }
}