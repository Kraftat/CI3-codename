Update Log

Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/AttendancePeriodModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class AttendancePeriodModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function getStudentAttendence($classID, $sectionID, $date, $subject_timetableID, $branchID)
    {
        $sql = "SELECT `enroll`.`id` as `enroll_id`,`enroll`.`roll`,`student`.`first_name`,`student`.`last_name`,`student`.`id` as `student_id`,`student`.`register_no`,`student_subject_attendance`.`id` as `att_id`,`student_subject_attendance`.`status` as `att_status`,`student_subject_attendance`.`remark` as `att_remark` FROM `enroll` INNER JOIN `student` ON `student`.`id` = `enroll`.`student_id` LEFT JOIN `student_subject_attendance` ON `student_subject_attendance`.`enroll_id` = `enroll`.`id` AND `student_subject_attendance`.`date` = " . $db->escape($date) . " AND `student_subject_attendance`.`subject_timetable_id` = " . $db->escape($subject_timetableID) . " WHERE `enroll`.`class_id` = " . $db->escape($classID) . " AND `enroll`.`section_id` = " . $db->escape($sectionID) . " AND `enroll`.`branch_id` = " . $db->escape($branchID) . " AND `enroll`.`session_id` = " . $db->escape(get_session_id());
        return $db->query($sql)->result_array();
    }
    public function getDailyStudentReport($branchID = '', $date = '')
    {
        $sql = "SELECT class.name as `class_name`,section.name as `section_name`, SUM(CASE WHEN `status` = 'P' THEN 1 ELSE 0 END) AS 'present',SUM(CASE WHEN `status` = 'A' THEN 1 ELSE 0 END) AS 'absent',SUM(CASE WHEN `status` = 'L' THEN 1 ELSE 0 END) AS 'late',SUM(CASE WHEN `status` = 'HD' THEN 1 ELSE 0 END) AS 'half_day' FROM `student_attendance` JOIN `enroll` on student_attendance.enroll_id=enroll.id INNER JOIN `sections_allocation` on (enroll.class_id=sections_allocation.class_id and enroll.section_id=sections_allocation.section_id) inner join `class` on class.id=sections_allocation.class_id INNER JOIN `section` on section.id=sections_allocation.section_id WHERE `enroll`.`session_id`=" . $db->escape(get_session_id()) . " AND enroll.branch_id = " . $db->escape($branchID) . " AND student_attendance.date = " . $db->escape($date) . " GROUP BY sections_allocation.id ORDER BY sections_allocation.class_id";
        $query = $db->query($sql);
        $count_studentattendance = $query->getResult();
        return $count_studentattendance;
    }
    // check attendance by staff id and date
    public function get_attendance_by_date($studentID, $date, $timetable_id)
    {
        $sql = "SELECT `remark`,`status` FROM `student_subject_attendance` WHERE `enroll_id` = " . $db->escape($studentID) . " AND DATE(`date`) = " . $db->escape($date) . " AND `subject_timetable_id` = " . $db->escape($timetable_id);
        return $db->query($sql)->row_array();
    }
    // check attendance by staff id and date
    public function get_attendance_by_subjectID($studentID, $classID, $sectionID, $date, $day, $subject_id)
    {
        $sql = "SELECT `timetable_class`.`id`,`timetable_class`.`time_start`,`timetable_class`.`time_end` FROM `timetable_class` LEFT JOIN `section` ON `section`.`id` = `timetable_class`.`section_id` INNER JOIN `subject` ON `subject`.`id` = `timetable_class`.`subject_id` WHERE `timetable_class`.`day` = " . $db->escape($day) . " AND `timetable_class`.`session_id` = " . get_session_id() . " AND `timetable_class`.`class_id` = " . $classID . " AND `timetable_class`.`section_id` = " . $sectionID;
        if (!empty($subject_id)) {
            $sql .= " AND `timetable_class`.`subject_id` = " . $db->escape($subject_id);
        }
        $sql .= " GROUP BY `timetable_class`.`subject_id`";
        $timetable_class = $db->query($sql)->row();
        if (!empty($timetable_class)) {
            $sql = "SELECT `remark`,`status` FROM `student_subject_attendance` WHERE `enroll_id` = " . $db->escape($studentID) . " AND DATE(`date`) = " . $db->escape($date) . " AND `subject_timetable_id` = " . $db->escape($timetable_class->id);
            $r = $db->query($sql)->row_array();
            if (!empty($r)) {
                $r['time'] = date("g:i A", strtotime($timetable_class->time_start)) . " - " . date("g:i A", strtotime($timetable_class->time_end));
                return $r;
            }
        }
        return false;
    }
    public function getSubjectByClassSection($classID = '', $sectionID = '', $day = '')
    {
        $subject_condition = "";
        if (loggedin_role_id() == 3) {
            $restricted = $this->getSingle('branch', get_loggedin_branch_id(), true)->teacher_restricted;
            if ($restricted == 1) {
                $getClassTeacher = $this->subject_model->getClassTeacherByClassSection($classID, $sectionID);
                if ($getClassTeacher != true) {
                    $subject_condition = " AND `timetable_class`.`teacher_id` = " . get_loggedin_user_id();
                }
            }
        }
        $sql = "SELECT `timetable_class`.`id`, `timetable_class`.`time_start`,`timetable_class`.`time_end`,`subject`.`name` as `subjectname`,`subject`.`subject_code` FROM `timetable_class` LEFT JOIN `section` ON `section`.`id` = `timetable_class`.`section_id` INNER JOIN `subject` ON `subject`.`id` = `timetable_class`.`subject_id` WHERE `timetable_class`.`day` = " . $db->escape($day) . " AND `timetable_class`.`session_id` = " . get_session_id() . " AND `timetable_class`.`class_id` = " . $classID . " AND `timetable_class`.`section_id` = " . $sectionID . $subject_condition . " GROUP BY `timetable_class`.`subject_id`";
        return $db->query($sql);
    }
    public function getSubjectAttendanceReport($classID = '', $sectionID = '', $date = '', $subject_timetableID = '', $branchID = '')
    {
        $sql = "SELECT `ssa`.*, `s`.`first_name`, `s`.`last_name`, `s`.`register_no`, `s`.`category_id`, `s`.`mobileno`,`e`.`roll` FROM `student_subject_attendance` as `ssa` INNER JOIN `enroll` as `e` ON `e`.`id` = `ssa`.`enroll_id` LEFT JOIN `student` as `s` ON `s`.`id` = `e`.`student_id` WHERE `ssa`.`subject_timetable_id` = " . $db->escape($subject_timetableID) . " AND `ssa`.`branch_id` = " . $db->escape($branchID) . " AND `e`.`class_id` = " . $db->escape($classID) . " AND `e`.`section_id` = " . $db->escape($sectionID) . " AND `e`.`session_id` = " . $db->escape(get_session_id());
        return $db->query($sql)->result_array();
    }
    public function getSubjectBytimetableID($id = '')
    {
        $builder->select('subject.name');
        $builder->from('timetable_class');
        $builder->join('subject', 'subject.id = timetable_class.subject_id', 'inner');
        $builder->where('timetable_class.id', $id);
        $name = $builder->get()->row()->name;
        return $name;
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class AttendancePeriodModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function getStudentAttendence($classID, $sectionID, $date, $subject_timetableID, $branchID)
    {
        $sql = "SELECT `enroll`.`id` as `enroll_id`,`enroll`.`roll`,`student`.`first_name`,`student`.`last_name`,`student`.`id` as `student_id`,`student`.`register_no`,`student_subject_attendance`.`id` as `att_id`,`student_subject_attendance`.`status` as `att_status`,`student_subject_attendance`.`remark` as `att_remark` FROM `enroll` INNER JOIN `student` ON `student`.`id` = `enroll`.`student_id` LEFT JOIN `student_subject_attendance` ON `student_subject_attendance`.`enroll_id` = `enroll`.`id` AND `student_subject_attendance`.`date` = " . $db->escape($date) . " AND `student_subject_attendance`.`subject_timetable_id` = " . $db->escape($subject_timetableID) . " WHERE `enroll`.`class_id` = " . $db->escape($classID) . " AND `enroll`.`section_id` = " . $db->escape($sectionID) . " AND `enroll`.`branch_id` = " . $db->escape($branchID) . " AND `enroll`.`session_id` = " . $db->escape(get_session_id());
        return $db->query($sql)->result_array();
    }
    public function getDailyStudentReport($branchID = '', $date = '')
    {
        $sql = "SELECT class.name as `class_name`,section.name as `section_name`, SUM(CASE WHEN `status` = 'P' THEN 1 ELSE 0 END) AS 'present',SUM(CASE WHEN `status` = 'A' THEN 1 ELSE 0 END) AS 'absent',SUM(CASE WHEN `status` = 'L' THEN 1 ELSE 0 END) AS 'late',SUM(CASE WHEN `status` = 'HD' THEN 1 ELSE 0 END) AS 'half_day' FROM `student_attendance` JOIN `enroll` on student_attendance.enroll_id=enroll.id INNER JOIN `sections_allocation` on (enroll.class_id=sections_allocation.class_id and enroll.section_id=sections_allocation.section_id) inner join `class` on class.id=sections_allocation.class_id INNER JOIN `section` on section.id=sections_allocation.section_id WHERE `enroll`.`session_id`=" . $db->escape(get_session_id()) . " AND enroll.branch_id = " . $db->escape($branchID) . " AND student_attendance.date = " . $db->escape($date) . " GROUP BY sections_allocation.id ORDER BY sections_allocation.class_id";
        $query = $db->query($sql);
        $count_studentattendance = $query->getResult();
        return $count_studentattendance;
    }
    // check attendance by staff id and date
    public function get_attendance_by_date($studentID, $date, $timetable_id)
    {
        $sql = "SELECT `remark`,`status` FROM `student_subject_attendance` WHERE `enroll_id` = " . $db->escape($studentID) . " AND DATE(`date`) = " . $db->escape($date) . " AND `subject_timetable_id` = " . $db->escape($timetable_id);
        return $db->query($sql)->row_array();
    }
    // check attendance by staff id and date
    public function get_attendance_by_subjectID($studentID, $classID, $sectionID, $date, $day, $subject_id)
    {
        $sql = "SELECT `timetable_class`.`id`,`timetable_class`.`time_start`,`timetable_class`.`time_end` FROM `timetable_class` LEFT JOIN `section` ON `section`.`id` = `timetable_class`.`section_id` INNER JOIN `subject` ON `subject`.`id` = `timetable_class`.`subject_id` WHERE `timetable_class`.`day` = " . $db->escape($day) . " AND `timetable_class`.`session_id` = " . get_session_id() . " AND `timetable_class`.`class_id` = " . $classID . " AND `timetable_class`.`section_id` = " . $sectionID;
        if (!empty($subject_id)) {
            $sql .= " AND `timetable_class`.`subject_id` = " . $db->escape($subject_id);
        }
        $sql .= " GROUP BY `timetable_class`.`subject_id`";
        $timetable_class = $db->query($sql)->row();
        if (!empty($timetable_class)) {
            $sql = "SELECT `remark`,`status` FROM `student_subject_attendance` WHERE `enroll_id` = " . $db->escape($studentID) . " AND DATE(`date`) = " . $db->escape($date) . " AND `subject_timetable_id` = " . $db->escape($timetable_class->id);
            $r = $db->query($sql)->row_array();
            if (!empty($r)) {
                $r['time'] = date("g:i A", strtotime($timetable_class->time_start)) . " - " . date("g:i A", strtotime($timetable_class->time_end));
                return $r;
            }
        }
        return false;
    }
    public function getSubjectByClassSection($classID = '', $sectionID = '', $day = '')
    {
        $subject_condition = "";
        if (loggedin_role_id() == 3) {
            $restricted = $this->getSingle('branch', get_loggedin_branch_id(), true)->teacher_restricted;
            if ($restricted == 1) {
                $getClassTeacher = $this->subjectModel->getClassTeacherByClassSection($classID, $sectionID);
                if ($getClassTeacher != true) {
                    $subject_condition = " AND `timetable_class`.`teacher_id` = " . get_loggedin_user_id();
                }
            }
        }
        $sql = "SELECT `timetable_class`.`id`, `timetable_class`.`time_start`,`timetable_class`.`time_end`,`subject`.`name` as `subjectname`,`subject`.`subject_code` FROM `timetable_class` LEFT JOIN `section` ON `section`.`id` = `timetable_class`.`section_id` INNER JOIN `subject` ON `subject`.`id` = `timetable_class`.`subject_id` WHERE `timetable_class`.`day` = " . $db->escape($day) . " AND `timetable_class`.`session_id` = " . get_session_id() . " AND `timetable_class`.`class_id` = " . $classID . " AND `timetable_class`.`section_id` = " . $sectionID . $subject_condition . " GROUP BY `timetable_class`.`subject_id`";
        return $db->query($sql);
    }
    public function getSubjectAttendanceReport($classID = '', $sectionID = '', $date = '', $subject_timetableID = '', $branchID = '')
    {
        $sql = "SELECT `ssa`.*, `s`.`first_name`, `s`.`last_name`, `s`.`register_no`, `s`.`category_id`, `s`.`mobileno`,`e`.`roll` FROM `student_subject_attendance` as `ssa` INNER JOIN `enroll` as `e` ON `e`.`id` = `ssa`.`enroll_id` LEFT JOIN `student` as `s` ON `s`.`id` = `e`.`student_id` WHERE `ssa`.`subject_timetable_id` = " . $db->escape($subject_timetableID) . " AND `ssa`.`branch_id` = " . $db->escape($branchID) . " AND `e`.`class_id` = " . $db->escape($classID) . " AND `e`.`section_id` = " . $db->escape($sectionID) . " AND `e`.`session_id` = " . $db->escape(get_session_id());
        return $db->query($sql)->result_array();
    }
    public function getSubjectBytimetableID($id = '')
    {
        $builder->select('subject.name');
        $builder->from('timetable_class');
        $builder->join('subject', 'subject.id = timetable_class.subject_id', 'inner');
        $builder->where('timetable_class.id', $id);
        $name = $builder->get()->row()->name;
        return $name;
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/StudentModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class StudentModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // moderator student all information
    public function save($data = array(), $getBranch = array())
    {
        $hostelID = empty($data['hostel_id']) ? 0 : $data['hostel_id'];
        $roomID = empty($data['room_id']) ? 0 : $data['room_id'];
        $previous_details = array('school_name' => $this->request->getPost('school_name'), 'qualification' => $this->request->getPost('qualification'), 'remarks' => $this->request->getPost('previous_remarks'));
        if (empty($previous_details)) {
            $previous_details = "";
        } else {
            $previous_details = json_encode($previous_details);
        }
        $inser_data1 = array('register_no' => $this->request->getPost('register_no'), 'admission_date' => !empty($data['admission_date']) ? date("Y-m-d", strtotime($data['admission_date'])) : "", 'first_name' => $this->request->getPost('first_name'), 'last_name' => $this->request->getPost('last_name'), 'gender' => $this->request->getPost('gender'), 'birthday' => !empty($data['birthday']) ? date("Y-m-d", strtotime($data['birthday'])) : "", 'religion' => $this->request->getPost('religion'), 'caste' => $this->request->getPost('caste'), 'blood_group' => $this->request->getPost('blood_group'), 'mother_tongue' => $this->request->getPost('mother_tongue'), 'current_address' => $this->request->getPost('current_address'), 'permanent_address' => $this->request->getPost('permanent_address'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'mobileno' => $this->request->getPost('mobileno'), 'category_id' => isset($data['category_id']) ? $data['category_id'] : 0, 'email' => $this->request->getPost('email'), 'parent_id' => $this->request->getPost('parent_id'), 'route_id' => empty($this->request->getPost('route_id')) ? 0 : $this->request->getPost('route_id'), 'vehicle_id' => empty($this->request->getPost('vehicle_id')) ? 0 : $this->request->getPost('vehicle_id'), 'hostel_id' => $hostelID, 'room_id' => $roomID, 'previous_details' => $previous_details, 'photo' => $this->uploadImage('student'));
        // moderator guardian all information
        if (!isset($data['student_id']) && empty($data['student_id'])) {
            if (!isset($data['guardian_chk'])) {
                // add new guardian all information in db
                if (!empty($data['grd_name']) || !empty($data['father_name'])) {
                    $arrayParent = array('name' => $this->request->getPost('grd_name'), 'relation' => $this->request->getPost('grd_relation'), 'father_name' => $this->request->getPost('father_name'), 'mother_name' => $this->request->getPost('mother_name'), 'occupation' => $this->request->getPost('grd_occupation'), 'income' => $this->request->getPost('grd_income'), 'education' => $this->request->getPost('grd_education'), 'email' => $this->request->getPost('grd_email'), 'mobileno' => $this->request->getPost('grd_mobileno'), 'address' => $this->request->getPost('grd_address'), 'city' => $this->request->getPost('grd_city'), 'state' => $this->request->getPost('grd_state'), 'branch_id' => $this->applicationModel->get_branch_id(), 'photo' => $this->uploadImage('parent', 'guardian_photo'));
                    $builder->insert('parent', $arrayParent);
                    $parentID = $builder->insert_id();
                    // save guardian login credential information in the database
                    if ($getBranch['grd_generate'] == 1) {
                        $grd_username = $getBranch['grd_username_prefix'] . $parentID;
                        $grd_password = $getBranch['grd_default_password'];
                    } else {
                        $grd_username = $data['grd_username'];
                        $grd_password = $data['grd_password'];
                    }
                    $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
                    $builder->insert('login_credential', $parent_credential);
                } else {
                    $parentID = 0;
                }
            } else {
                $parentID = $data['parent_id'];
            }
            $inser_data1['parent_id'] = $parentID;
            // insert student all information in the database
            $builder->insert('student', $inser_data1);
            $student_id = $builder->insert_id();
            // save student login credential information in the database
            if ($getBranch['stu_generate'] == 1) {
                $stu_username = $getBranch['stu_username_prefix'] . $student_id;
                $stu_password = $getBranch['stu_default_password'];
            } else {
                $stu_username = $data['username'];
                $stu_password = $data['password'];
            }
            $inser_data2 = array('user_id' => $student_id, 'username' => $stu_username, 'role' => 7, 'password' => $this->app_lib->pass_hashed($stu_password));
            $builder->insert('login_credential', $inser_data2);
            // return student information
            $studentData = array('student_id' => $student_id, 'email' => $this->request->getPost('email'), 'username' => $stu_username, 'password' => $stu_password);
            if (!empty($data['grd_name']) || !empty($data['father_name'])) {
                // send parent account activate email
                $emailData = array('name' => $this->request->getPost('grd_name'), 'username' => $grd_username, 'password' => $grd_password, 'user_role' => 6, 'email' => $this->request->getPost('grd_email'));
                $this->email_model->sentStaffRegisteredAccount($emailData);
            }
            return $studentData;
        } else {
            // update student all information in the database
            $inser_data1['parent_id'] = $data['parent_id'];
            $builder->where('id', $data['student_id']);
            $builder->update('student', $inser_data1);
            // update login credential information in the database
            $builder->where('user_id', $data['student_id']);
            $builder->where('role', 7);
            $this->db->table('login_credential', array('username' => $data['username']))->update();
        }
    }
    public function csvImport($row = array(), $classID = '', $sectionID = '', $branchID = '')
    {
        // getting existing father data
        if ($row['GuardianUsername'] !== '') {
            $getParent = $builder->select('parent.id')->from('login_credential')->join('parent', 'parent.id = login_credential.user_id', 'left')->where(array('parent.branch_id' => $branchID, 'login_credential.username' => $row['GuardianUsername']))->get()->row_array();
        }
        // getting branch settings
        $getSettings = $builder->select('*')->where('id', $branchID)->from('branch')->get()->row_array();
        if (isset($getParent) && count($getParent)) {
            $parentID = $getParent['id'];
        } else {
            // add new guardian all information in db
            $arrayParent = array('name' => $row['GuardianName'], 'relation' => $row['GuardianRelation'], 'father_name' => $row['FatherName'], 'mother_name' => $row['MotherName'], 'occupation' => $row['GuardianOccupation'], 'mobileno' => $row['GuardianMobileNo'], 'address' => $row['GuardianAddress'], 'email' => $row['GuardianEmail'], 'branch_id' => $branchID, 'photo' => 'defualt.png');
            $builder->insert('parent', $arrayParent);
            $parentID = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getSettings['grd_generate'] == 1) {
                $grd_username = $getSettings['grd_username_prefix'] . $parentID;
                $grd_password = $getSettings['grd_default_password'];
            } else {
                $grd_username = $row['GuardianUsername'];
                $grd_password = $row['GuardianPassword'];
            }
            $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
            $builder->insert('login_credential', $parent_credential);
        }
        $inser_data1 = array('first_name' => $row['FirstName'], 'last_name' => $row['LastName'], 'blood_group' => $row['BloodGroup'], 'gender' => $row['Gender'], 'birthday' => date("Y-m-d", strtotime($row['Birthday'])), 'mother_tongue' => $row['MotherTongue'], 'religion' => $row['Religion'], 'parent_id' => $parentID, 'caste' => $row['Caste'], 'mobileno' => $row['Phone'], 'city' => $row['City'], 'state' => $row['State'], 'current_address' => $row['PresentAddress'], 'permanent_address' => $row['PermanentAddress'], 'category_id' => $row['CategoryID'], 'admission_date' => date("Y-m-d", strtotime($row['AdmissionDate'])), 'register_no' => $row['RegisterNo'], 'photo' => 'defualt.png', 'email' => $row['StudentEmail']);
        //save all student information in the database file
        $builder->insert('student', $inser_data1);
        $studentID = $builder->insert_id();
        // save student login credential information in the database
        if ($getSettings['stu_generate'] == 1) {
            $stu_username = $getSettings['stu_username_prefix'] . $studentID;
            $stu_password = $getSettings['stu_default_password'];
        } else {
            $stu_username = $row['StudentUsername'];
            $stu_password = $row['StudentPassword'];
        }
        //save student login credential
        $inser_data2 = array('username' => $stu_username, 'role' => 7, 'user_id' => $studentID, 'password' => $this->app_lib->pass_hashed($stu_password));
        $builder->insert('login_credential', $inser_data2);
        //save student enroll information in the database file
        $arrayEnroll = array('student_id' => $studentID, 'class_id' => $classID, 'section_id' => $sectionID, 'branch_id' => $branchID, 'roll' => $row['Roll'], 'session_id' => get_session_id());
        $builder->insert('enroll', $arrayEnroll);
    }
    public function getFeeProgress($id)
    {
        $builder->select('IFNULL(SUM(gd.amount), 0) as totalfees,IFNULL(SUM(p.amount), 0) as totalpay,IFNULL(SUM(p.discount),0) as totaldiscount');
        $builder->from('fee_allocation as a');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = a.group_id', 'inner');
        $builder->join('fee_payment_history as p', 'p.allocation_id = a.id and p.type_id = gd.fee_type_id', 'left');
        $builder->where('a.student_id', $id);
        $this->db->table('a.session_id', get_session_id())->where();
        $r = $builder->get()->row_array();
        $total_amount = floatval($r['totalfees']);
        $total_paid = floatval($r['totalpay'] + $r['totaldiscount']);
        if ($total_paid != 0) {
            $percentage = $total_paid / $total_amount * 100;
            return number_format($percentage);
        } else {
            return 0;
        }
    }
    public function getStudentList($classID = '', $sectionID = '', $branchID = '', $deactivate = false, $start = '', $end = '')
    {
        $builder->select('e.*,s.photo, CONCAT_WS(" ", s.first_name, s.last_name) as fullname,s.register_no,s.gender,s.admission_date,s.parent_id,s.email,s.blood_group,s.birthday,l.active,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        if (!empty($classID)) {
            $builder->where('e.class_id', $classID);
        }
        if (!empty($start) && !empty($end)) {
            $builder->where('s.admission_date >=', $start);
            $builder->where('s.admission_date <=', $end);
        }
        $builder->where('e.branch_id', $branchID);
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->order_by('s.id', 'ASC');
        if ($sectionID != 'all' && !empty($sectionID)) {
            $builder->where('e.section_id', $sectionID);
        }
        if ($deactivate == true) {
            $builder->where('l.active', 0);
        }
        return $builder->get();
    }
    public function getSearchStudentList($search_text)
    {
        $builder->select('e.*,s.photo,s.first_name,s.last_name,s.register_no,s.parent_id,s.email,s.blood_group,s.birthday,c.name as class_name,se.name as section_name,sp.name as parent_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'left');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        $builder->join('parent as sp', 'sp.id = s.parent_id', 'left');
        $this->db->table('e.session_id', get_session_id())->where();
        if (!is_superadmin_loggedin()) {
            $this->db->table('e.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->group_start();
        $builder->like('s.first_name', $search_text);
        $builder->or_like('s.last_name', $search_text);
        $builder->or_like('s.register_no', $search_text);
        $builder->or_like('s.email', $search_text);
        $builder->or_like('e.roll', $search_text);
        $builder->or_like('s.blood_group', $search_text);
        $builder->or_like('sp.name', $search_text);
        $builder->group_end();
        $builder->order_by('s.id', 'desc');
        return $builder->get();
    }
    public function getSingleStudent($id = '', $enroll = false)
    {
        $builder->select('s.*,l.username,l.active,e.class_id,e.section_id,e.id as enrollid,e.roll,e.branch_id,e.session_id,c.name as class_name,se.name as section_name,sc.name as category_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'left');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->join('student_category as sc', 's.category_id=sc.id', 'left');
        if ($enroll == true) {
            $builder->where('e.id', $id);
        } else {
            $builder->where('s.id', $id);
        }
        $this->db->table('e.session_id', get_session_id())->where();
        if (!is_superadmin_loggedin()) {
            $this->db->table('e.branch_id', get_loggedin_branch_id())->where();
        }
        $query = $builder->get();
        if ($query->num_rows() == 0) {
            show_404();
        }
        return $query->row_array();
    }
    public function regSerNumber($school_id = '')
    {
        $registerNoPrefix = '';
        if (!empty($school_id)) {
            $schoolconfig = $db->table('branch')->get('branch')->row();
            if ($schoolconfig->reg_prefix_enable == 1) {
                $registerNoPrefix = $schoolconfig->institution_code . $schoolconfig->reg_start_from;
                $last_registerNo = $this->app_lib->studentLastRegID($school_id);
                if (!empty($last_registerNo)) {
                    $last_registerNo_digit = str_replace($schoolconfig->institution_code, "", $last_registerNo->register_no);
                    if (!is_numeric($last_registerNo_digit)) {
                        $last_registerNo_digit = $schoolconfig->reg_start_from;
                    } else {
                        $last_registerNo_digit = $last_registerNo_digit + 1;
                    }
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $last_registerNo_digit);
                } else {
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $schoolconfig->reg_start_from);
                }
            }
            return $registerNoPrefix;
        } else {
            $config = $db->table('global_settings')->get('global_settings')->row();
            if ($config->reg_prefix == 'on') {
                $prefix = $config->institution_code;
            }
            $result = $builder->select("max(id) as id")->get('student')->row_array();
            $id = $result["id"];
            if (!empty($id)) {
                $maxNum = str_pad($id + 1, 5, '0', STR_PAD_LEFT);
            } else {
                $maxNum = '00001';
            }
            return $prefix . $maxNum;
        }
    }
    public function getDisableReason($student_id = '')
    {
        $builder->select("rd.*,disable_reason.name as reason");
        $builder->from('disable_reason_details as rd');
        $builder->join('disable_reason', 'disable_reason.id = rd.reason_id', 'left');
        $builder->where('student_id', $student_id);
        $builder->order_by('rd.id', 'DESC');
        $builder->limit(1);
        $row = $builder->get()->row();
        return $row;
    }
    public function getSiblingList($parent_id = '', $student_id = '')
    {
        $builder->select('s.photo, s.register_no, CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.gender,s.mobileno,e.roll,e.branch_id,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->where_not_in('s.id', $student_id);
        $builder->where('s.parent_id', $parent_id);
        $builder->order_by('s.id', 'ASC');
        $query = $builder->get();
        return $query->getResult();
    }
    public function getParentList($class_id = '', $section_id = '', $branch_id = '')
    {
        $builder->select('p.name as g_name,p.father_name,p.mother_name,p.occupation,count(s.parent_id) as child,p.mobileno,s.parent_id');
        $builder->from('student as s');
        $builder->join('enroll as e', 'e.student_id = s.id', 'inner');
        $builder->join('parent as p', 'p.id = s.parent_id', 'inner');
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $builder->where('e.branch_id', $branch_id);
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->order_by('s.id', 'ASC');
        $builder->group_by('p.id');
        $query = $builder->get();
        return $query->getResultArray();
    }
    public function getSiblingListByClass($parent_id = '', $class_id = '', $section_id = '')
    {
        $builder->select('s.register_no,e.id as enroll_id,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.gender,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->where('s.parent_id', $parent_id);
        $builder->order_by('s.id', 'ASC');
        $query = $builder->get();
        return $query->getResult();
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class StudentModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // moderator student all information
    public function save($data = array(), $getBranch = array())
    {
        $hostelID = empty($data['hostel_id']) ? 0 : $data['hostel_id'];
        $roomID = empty($data['room_id']) ? 0 : $data['room_id'];
        $previous_details = array('school_name' => $this->request->getPost('school_name'), 'qualification' => $this->request->getPost('qualification'), 'remarks' => $this->request->getPost('previous_remarks'));
        if (empty($previous_details)) {
            $previous_details = "";
        } else {
            $previous_details = json_encode($previous_details);
        }
        $inser_data1 = array('register_no' => $this->request->getPost('register_no'), 'admission_date' => !empty($data['admission_date']) ? date("Y-m-d", strtotime($data['admission_date'])) : "", 'first_name' => $this->request->getPost('first_name'), 'last_name' => $this->request->getPost('last_name'), 'gender' => $this->request->getPost('gender'), 'birthday' => !empty($data['birthday']) ? date("Y-m-d", strtotime($data['birthday'])) : "", 'religion' => $this->request->getPost('religion'), 'caste' => $this->request->getPost('caste'), 'blood_group' => $this->request->getPost('blood_group'), 'mother_tongue' => $this->request->getPost('mother_tongue'), 'current_address' => $this->request->getPost('current_address'), 'permanent_address' => $this->request->getPost('permanent_address'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'mobileno' => $this->request->getPost('mobileno'), 'category_id' => isset($data['category_id']) ? $data['category_id'] : 0, 'email' => $this->request->getPost('email'), 'parent_id' => $this->request->getPost('parent_id'), 'route_id' => empty($this->request->getPost('route_id')) ? 0 : $this->request->getPost('route_id'), 'vehicle_id' => empty($this->request->getPost('vehicle_id')) ? 0 : $this->request->getPost('vehicle_id'), 'hostel_id' => $hostelID, 'room_id' => $roomID, 'previous_details' => $previous_details, 'photo' => $this->uploadImage('student'));
        // moderator guardian all information
        if (!isset($data['student_id']) && empty($data['student_id'])) {
            if (!isset($data['guardian_chk'])) {
                // add new guardian all information in db
                if (!empty($data['grd_name']) || !empty($data['father_name'])) {
                    $arrayParent = array('name' => $this->request->getPost('grd_name'), 'relation' => $this->request->getPost('grd_relation'), 'father_name' => $this->request->getPost('father_name'), 'mother_name' => $this->request->getPost('mother_name'), 'occupation' => $this->request->getPost('grd_occupation'), 'income' => $this->request->getPost('grd_income'), 'education' => $this->request->getPost('grd_education'), 'email' => $this->request->getPost('grd_email'), 'mobileno' => $this->request->getPost('grd_mobileno'), 'address' => $this->request->getPost('grd_address'), 'city' => $this->request->getPost('grd_city'), 'state' => $this->request->getPost('grd_state'), 'branch_id' => $this->applicationModel->get_branch_id(), 'photo' => $this->uploadImage('parent', 'guardian_photo'));
                    $builder->insert('parent', $arrayParent);
                    $parentID = $builder->insert_id();
                    // save guardian login credential information in the database
                    if ($getBranch['grd_generate'] == 1) {
                        $grd_username = $getBranch['grd_username_prefix'] . $parentID;
                        $grd_password = $getBranch['grd_default_password'];
                    } else {
                        $grd_username = $data['grd_username'];
                        $grd_password = $data['grd_password'];
                    }
                    $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
                    $builder->insert('login_credential', $parent_credential);
                } else {
                    $parentID = 0;
                }
            } else {
                $parentID = $data['parent_id'];
            }
            $inser_data1['parent_id'] = $parentID;
            // insert student all information in the database
            $builder->insert('student', $inser_data1);
            $student_id = $builder->insert_id();
            // save student login credential information in the database
            if ($getBranch['stu_generate'] == 1) {
                $stu_username = $getBranch['stu_username_prefix'] . $student_id;
                $stu_password = $getBranch['stu_default_password'];
            } else {
                $stu_username = $data['username'];
                $stu_password = $data['password'];
            }
            $inser_data2 = array('user_id' => $student_id, 'username' => $stu_username, 'role' => 7, 'password' => $this->app_lib->pass_hashed($stu_password));
            $builder->insert('login_credential', $inser_data2);
            // return student information
            $studentData = array('student_id' => $student_id, 'email' => $this->request->getPost('email'), 'username' => $stu_username, 'password' => $stu_password);
            if (!empty($data['grd_name']) || !empty($data['father_name'])) {
                // send parent account activate email
                $emailData = array('name' => $this->request->getPost('grd_name'), 'username' => $grd_username, 'password' => $grd_password, 'user_role' => 6, 'email' => $this->request->getPost('grd_email'));
                $this->emailModel->sentStaffRegisteredAccount($emailData);
            }
            return $studentData;
        } else {
            // update student all information in the database
            $inser_data1['parent_id'] = $data['parent_id'];
            $builder->where('id', $data['student_id']);
            $builder->update('student', $inser_data1);
            // update login credential information in the database
            $builder->where('user_id', $data['student_id']);
            $builder->where('role', 7);
            $this->db->table('login_credential', array('username' => $data['username']))->update();
        }
    }
    public function csvImport($row = array(), $classID = '', $sectionID = '', $branchID = '')
    {
        // getting existing father data
        if ($row['GuardianUsername'] !== '') {
            $getParent = $builder->select('parent.id')->from('login_credential')->join('parent', 'parent.id = login_credential.user_id', 'left')->where(array('parent.branch_id' => $branchID, 'login_credential.username' => $row['GuardianUsername']))->get()->row_array();
        }
        // getting branch settings
        $getSettings = $builder->select('*')->where('id', $branchID)->from('branch')->get()->row_array();
        if (isset($getParent) && count($getParent)) {
            $parentID = $getParent['id'];
        } else {
            // add new guardian all information in db
            $arrayParent = array('name' => $row['GuardianName'], 'relation' => $row['GuardianRelation'], 'father_name' => $row['FatherName'], 'mother_name' => $row['MotherName'], 'occupation' => $row['GuardianOccupation'], 'mobileno' => $row['GuardianMobileNo'], 'address' => $row['GuardianAddress'], 'email' => $row['GuardianEmail'], 'branch_id' => $branchID, 'photo' => 'defualt.png');
            $builder->insert('parent', $arrayParent);
            $parentID = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getSettings['grd_generate'] == 1) {
                $grd_username = $getSettings['grd_username_prefix'] . $parentID;
                $grd_password = $getSettings['grd_default_password'];
            } else {
                $grd_username = $row['GuardianUsername'];
                $grd_password = $row['GuardianPassword'];
            }
            $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
            $builder->insert('login_credential', $parent_credential);
        }
        $inser_data1 = array('first_name' => $row['FirstName'], 'last_name' => $row['LastName'], 'blood_group' => $row['BloodGroup'], 'gender' => $row['Gender'], 'birthday' => date("Y-m-d", strtotime($row['Birthday'])), 'mother_tongue' => $row['MotherTongue'], 'religion' => $row['Religion'], 'parent_id' => $parentID, 'caste' => $row['Caste'], 'mobileno' => $row['Phone'], 'city' => $row['City'], 'state' => $row['State'], 'current_address' => $row['PresentAddress'], 'permanent_address' => $row['PermanentAddress'], 'category_id' => $row['CategoryID'], 'admission_date' => date("Y-m-d", strtotime($row['AdmissionDate'])), 'register_no' => $row['RegisterNo'], 'photo' => 'defualt.png', 'email' => $row['StudentEmail']);
        //save all student information in the database file
        $builder->insert('student', $inser_data1);
        $studentID = $builder->insert_id();
        // save student login credential information in the database
        if ($getSettings['stu_generate'] == 1) {
            $stu_username = $getSettings['stu_username_prefix'] . $studentID;
            $stu_password = $getSettings['stu_default_password'];
        } else {
            $stu_username = $row['StudentUsername'];
            $stu_password = $row['StudentPassword'];
        }
        //save student login credential
        $inser_data2 = array('username' => $stu_username, 'role' => 7, 'user_id' => $studentID, 'password' => $this->app_lib->pass_hashed($stu_password));
        $builder->insert('login_credential', $inser_data2);
        //save student enroll information in the database file
        $arrayEnroll = array('student_id' => $studentID, 'class_id' => $classID, 'section_id' => $sectionID, 'branch_id' => $branchID, 'roll' => $row['Roll'], 'session_id' => get_session_id());
        $builder->insert('enroll', $arrayEnroll);
    }
    public function getFeeProgress($id)
    {
        $builder->select('IFNULL(SUM(gd.amount), 0) as totalfees,IFNULL(SUM(p.amount), 0) as totalpay,IFNULL(SUM(p.discount),0) as totaldiscount');
        $builder->from('fee_allocation as a');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = a.group_id', 'inner');
        $builder->join('fee_payment_history as p', 'p.allocation_id = a.id and p.type_id = gd.fee_type_id', 'left');
        $builder->where('a.student_id', $id);
        $this->db->table('a.session_id', get_session_id())->where();
        $r = $builder->get()->row_array();
        $total_amount = floatval($r['totalfees']);
        $total_paid = floatval($r['totalpay'] + $r['totaldiscount']);
        if ($total_paid != 0) {
            $percentage = $total_paid / $total_amount * 100;
            return number_format($percentage);
        } else {
            return 0;
        }
    }
    public function getStudentList($classID = '', $sectionID = '', $branchID = '', $deactivate = false, $start = '', $end = '')
    {
        $builder->select('e.*,s.photo, CONCAT_WS(" ", s.first_name, s.last_name) as fullname,s.register_no,s.gender,s.admission_date,s.parent_id,s.email,s.blood_group,s.birthday,l.active,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        if (!empty($classID)) {
            $builder->where('e.class_id', $classID);
        }
        if (!empty($start) && !empty($end)) {
            $builder->where('s.admission_date >=', $start);
            $builder->where('s.admission_date <=', $end);
        }
        $builder->where('e.branch_id', $branchID);
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->order_by('s.id', 'ASC');
        if ($sectionID != 'all' && !empty($sectionID)) {
            $builder->where('e.section_id', $sectionID);
        }
        if ($deactivate == true) {
            $builder->where('l.active', 0);
        }
        return $builder->get();
    }
    public function getSearchStudentList($search_text)
    {
        $builder->select('e.*,s.photo,s.first_name,s.last_name,s.register_no,s.parent_id,s.email,s.blood_group,s.birthday,c.name as class_name,se.name as section_name,sp.name as parent_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'left');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        $builder->join('parent as sp', 'sp.id = s.parent_id', 'left');
        $this->db->table('e.session_id', get_session_id())->where();
        if (!is_superadmin_loggedin()) {
            $this->db->table('e.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->group_start();
        $builder->like('s.first_name', $search_text);
        $builder->or_like('s.last_name', $search_text);
        $builder->or_like('s.register_no', $search_text);
        $builder->or_like('s.email', $search_text);
        $builder->or_like('e.roll', $search_text);
        $builder->or_like('s.blood_group', $search_text);
        $builder->or_like('sp.name', $search_text);
        $builder->group_end();
        $builder->order_by('s.id', 'desc');
        return $builder->get();
    }
    public function getSingleStudent($id = '', $enroll = false)
    {
        $builder->select('s.*,l.username,l.active,e.class_id,e.section_id,e.id as enrollid,e.roll,e.branch_id,e.session_id,c.name as class_name,se.name as section_name,sc.name as category_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'left');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->join('student_category as sc', 's.category_id=sc.id', 'left');
        if ($enroll == true) {
            $builder->where('e.id', $id);
        } else {
            $builder->where('s.id', $id);
        }
        $this->db->table('e.session_id', get_session_id())->where();
        if (!is_superadmin_loggedin()) {
            $this->db->table('e.branch_id', get_loggedin_branch_id())->where();
        }
        $query = $builder->get();
        if ($query->num_rows() == 0) {
            show_404();
        }
        return $query->row_array();
    }
    public function regSerNumber($school_id = '')
    {
        $registerNoPrefix = '';
        if (!empty($school_id)) {
            $schoolconfig = $db->table('branch')->get('branch')->row();
            if ($schoolconfig->reg_prefix_enable == 1) {
                $registerNoPrefix = $schoolconfig->institution_code . $schoolconfig->reg_start_from;
                $last_registerNo = $this->app_lib->studentLastRegID($school_id);
                if (!empty($last_registerNo)) {
                    $last_registerNo_digit = str_replace($schoolconfig->institution_code, "", $last_registerNo->register_no);
                    if (!is_numeric($last_registerNo_digit)) {
                        $last_registerNo_digit = $schoolconfig->reg_start_from;
                    } else {
                        $last_registerNo_digit = $last_registerNo_digit + 1;
                    }
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $last_registerNo_digit);
                } else {
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $schoolconfig->reg_start_from);
                }
            }
            return $registerNoPrefix;
        } else {
            $config = $db->table('global_settings')->get('global_settings')->row();
            if ($config->reg_prefix == 'on') {
                $prefix = $config->institution_code;
            }
            $result = $builder->select("max(id) as id")->get('student')->row_array();
            $id = $result["id"];
            if (!empty($id)) {
                $maxNum = str_pad($id + 1, 5, '0', STR_PAD_LEFT);
            } else {
                $maxNum = '00001';
            }
            return $prefix . $maxNum;
        }
    }
    public function getDisableReason($student_id = '')
    {
        $builder->select("rd.*,disable_reason.name as reason");
        $builder->from('disable_reason_details as rd');
        $builder->join('disable_reason', 'disable_reason.id = rd.reason_id', 'left');
        $builder->where('student_id', $student_id);
        $builder->order_by('rd.id', 'DESC');
        $builder->limit(1);
        $row = $builder->get()->row();
        return $row;
    }
    public function getSiblingList($parent_id = '', $student_id = '')
    {
        $builder->select('s.photo, s.register_no, CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.gender,s.mobileno,e.roll,e.branch_id,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->where_not_in('s.id', $student_id);
        $builder->where('s.parent_id', $parent_id);
        $builder->order_by('s.id', 'ASC');
        $query = $builder->get();
        return $query->getResult();
    }
    public function getParentList($class_id = '', $section_id = '', $branch_id = '')
    {
        $builder->select('p.name as g_name,p.father_name,p.mother_name,p.occupation,count(s.parent_id) as child,p.mobileno,s.parent_id');
        $builder->from('student as s');
        $builder->join('enroll as e', 'e.student_id = s.id', 'inner');
        $builder->join('parent as p', 'p.id = s.parent_id', 'inner');
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $builder->where('e.branch_id', $branch_id);
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->order_by('s.id', 'ASC');
        $builder->group_by('p.id');
        $query = $builder->get();
        return $query->getResultArray();
    }
    public function getSiblingListByClass($parent_id = '', $class_id = '', $section_id = '')
    {
        $builder->select('s.register_no,e.id as enroll_id,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.gender,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->where('s.parent_id', $parent_id);
        $builder->order_by('s.id', 'ASC');
        $query = $builder->get();
        return $query->getResult();
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/CardManageModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class CardManageModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function getList($type = 1)
    {
        $builder->select('card_templete.*,branch.name as branchname');
        $builder->from('card_templete');
        $builder->join('branch', 'branch.id = card_templete.branch_id', 'left');
        if (!is_superadmin_loggedin()) {
            $this->db->table('card_templete.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->where('card_templete.card_type', $type);
        $builder->order_by('card_templete.id', 'ASC');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function save($data)
    {
        $userType = $data['card_type'] == 2 ? 1 : $data['user_type'];
        $background_file = '';
        $oldBackground_file = $this->request->getPost('old_background_file');
        if (isset($_FILES["background_file"]) && !empty($_FILES['background_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("background_file")) {
                // need to unlink previous photo
                if (!empty($oldBackground_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldBackground_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $background_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldBackground_file)) {
            $background_file = $oldBackground_file;
        }
        $logo_file = '';
        $oldLogo_file = $this->request->getPost('old_logo_file');
        if (isset($_FILES["logo_file"]) && !empty($_FILES['logo_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("logo_file")) {
                // need to unlink previous photo
                if (!empty($oldLogo_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldLogo_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $logo_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldLogo_file)) {
            $logo_file = $oldLogo_file;
        }
        $signature_file = '';
        $oldSignature_file = $this->request->getPost('old_signature_file');
        if (isset($_FILES["signature_file"]) && !empty($_FILES['signature_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("signature_file")) {
                // need to unlink previous photo
                if (!empty($oldSignature_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldSignature_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $signature_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldSignature_file)) {
            $signature_file = $oldSignature_file;
        }
        if ($userType == 1) {
            $qrCode = $data['stu_qr_code'];
        } else {
            $qrCode = $data['emp_qr_code'];
        }
        $arrayLive = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['card_name'], 'card_type' => $data['card_type'], 'user_type' => $userType, 'layout_width' => $data['layout_width'], 'layout_height' => $data['layout_height'], 'qr_code' => $qrCode, 'photo_style' => $data['photo_style'], 'photo_size' => empty($data['photo_size']) ? 100 : $data['photo_size'], 'top_space' => empty($data['top_space']) ? 0 : $data['top_space'], 'bottom_space' => empty($data['bottom_space']) ? 0 : $data['bottom_space'], 'right_space' => empty($data['right_space']) ? 0 : $data['right_space'], 'left_space' => empty($data['left_space']) ? 0 : $data['left_space'], 'background' => $background_file, 'logo' => $logo_file, 'signature' => $signature_file, 'content' => $this->request->getPost('content', false));
        if (!isset($data['templete_id'])) {
            $builder->insert('card_templete', $arrayLive);
        } else {
            $builder->where('id', $data['templete_id']);
            $builder->update('card_templete', $arrayLive);
        }
    }
    public function tagsList($roleID = "", $admit_card = false)
    {
        $arrayTags = array();
        $arrayTags[] = '{name}';
        $arrayTags[] = '{gender}';
        if ($roleID == 1) {
            $arrayTags[] = '{father_name}';
            $arrayTags[] = '{mother_name}';
            $arrayTags[] = '{student_photo}';
            $arrayTags[] = '{register_no}';
            $arrayTags[] = '{roll}';
            $arrayTags[] = '{admission_date}';
            $arrayTags[] = '{class}';
            $arrayTags[] = '{section}';
            $arrayTags[] = '{category}';
            $arrayTags[] = '{caste}';
        }
        if ($roleID == 2) {
            $arrayTags[] = '{staff_photo}';
            $arrayTags[] = '{joining_date}';
            $arrayTags[] = '{designation}';
            $arrayTags[] = '{department}';
            $arrayTags[] = '{qualification}';
            $arrayTags[] = '{total_experience}';
        }
        if ($admit_card == true) {
            $arrayTags[] = '{exam_name}';
            $arrayTags[] = '{subject_list_table}';
        }
        $arrayTags[] = '{religion}';
        $arrayTags[] = '{blood_group}';
        $arrayTags[] = '{birthday}';
        $arrayTags[] = '{email}';
        $arrayTags[] = '{mobileno}';
        $arrayTags[] = '{present_address}';
        $arrayTags[] = '{permanent_address}';
        $arrayTags[] = '{logo}';
        $arrayTags[] = '{signature}';
        $arrayTags[] = '{qr_code}';
        $arrayTags[] = '{institute_name}';
        $arrayTags[] = '{institute_email}';
        $arrayTags[] = '{institute_address}';
        $arrayTags[] = '{institute_mobile_no}';
        $arrayTags[] = '{print_date}';
        if ($admit_card == false) {
            $arrayTags[] = '{expiry_date}';
        }
        return $arrayTags;
    }
    public function tagsReplace($roleID, $userID, $templete, $print_date, $expiry_date)
    {
        $body = $templete['content'];
        $photo_size = $templete['photo_size'];
        $photo_style = $templete['photo_style'];
        $tags = $this->tagsList($roleID);
        if ($roleID == 1) {
            $userDetails = $this->getStudent($userID);
        } else if ($roleID == 2) {
            $userDetails = $this->getStaff($userID);
        }
        $arr = array('{', '}');
        foreach ($tags as $tag) {
            $field = str_replace($arr, '', $tag);
            if ($roleID == 1) {
                if ($field == 'student_photo') {
                    $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('student', $userDetails['photo']) . '" style="width: auto; max-height:' . $photo_size . '">';
                    $body = str_replace($tag, $photo, $body);
                } else if ($field == 'logo') {
                    if (!empty($templete['logo'])) {
                        $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                        $body = str_replace($tag, $logo_ph, $body);
                    }
                } else if ($field == 'signature') {
                    if (!empty($templete['signature'])) {
                        $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                        $body = str_replace($tag, $signature_ph, $body);
                    }
                } else if ($field == 'qr_code') {
                    if (!empty($templete['qr_code'])) {
                        $qr_code = $templete['qr_code'];
                        if ($qr_code == 'attendance') {
                            $qrData = str_replace('=', '', base64_encode('s-' . $userDetails['attendance']));
                        } else {
                            $qrData = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                        }
                        $params['savename'] = 'uploads/qr_code/stu_' . substr(hash('sha256', mt_rand() . microtime()), 0, 20) . '.png';
                        $params['level'] = 'M';
                        $params['size'] = 3;
                        $params['data'] = $qrData;
                        $qrCode = $this->ciqrcode->generate($params);
                        $photo = '<img src="' . base_url($qrCode) . '">';
                        $body = str_replace($tag, $photo, $body);
                    }
                } else if ($field == 'present_address') {
                    $body = str_replace($tag, $userDetails['current_address'], $body);
                } else if ($field == 'print_date') {
                    $body = str_replace($tag, _d($print_date), $body);
                } else if ($field == 'expiry_date') {
                    $body = str_replace($tag, _d($expiry_date), $body);
                } else if ($field == 'birthday') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else {
                    $body = str_replace($tag, $userDetails[$field], $body);
                }
            }
            if ($roleID == 2) {
                if ($field == 'staff_photo') {
                    $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('staff', $userDetails['photo']) . '" style="width: auto; max-height:' . $photo_size . '">';
                    $body = str_replace($tag, $photo, $body);
                } else if ($field == 'logo') {
                    if (!empty($templete['logo'])) {
                        $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                        $body = str_replace($tag, $logo_ph, $body);
                    }
                } else if ($field == 'signature') {
                    if (!empty($templete['signature'])) {
                        $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                        $body = str_replace($tag, $signature_ph, $body);
                    }
                } else if ($field == 'print_date') {
                    $body = str_replace($tag, _d($print_date), $body);
                } else if ($field == 'expiry_date') {
                    $body = str_replace($tag, _d($expiry_date), $body);
                } else if ($field == 'qr_code') {
                    if (!empty($templete['qr_code'])) {
                        $qr_code = $templete['qr_code'];
                        if ($qr_code == 'attendance') {
                            $qrData = str_replace('=', '', base64_encode('e-' . $userDetails['id']));
                        } else {
                            $qrData = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                        }
                        $params['savename'] = 'uploads/qr_code/sta_' . substr(hash('sha256', mt_rand() . microtime()), 0, 20) . '.png';
                        $params['level'] = 'M';
                        $params['size'] = 3;
                        $params['data'] = $qrData;
                        $qrCode = $this->ciqrcode->generate($params);
                        $photo = '<img src="' . base_url($qrCode) . '">';
                        $body = str_replace($tag, $photo, $body);
                    }
                } else if ($field == 'gender') {
                    $body = str_replace($tag, $userDetails['sex'], $body);
                } else if ($field == 'joining_date') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else if ($field == 'birthday') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else {
                    $body = str_replace($tag, $userDetails[$field], $body);
                }
            }
        }
        return $body;
    }
    public function admitCardTagsReplace($userID, $templete, $print_date, $exam_id)
    {
        $body = $templete['content'];
        $photo_size = $templete['photo_size'];
        $photo_style = $templete['photo_style'];
        $tags = $this->tagsList(1, true);
        $userDetails = $this->getStudent($userID);
        $arr = array('{', '}');
        foreach ($tags as $tag) {
            $field = str_replace($arr, '', $tag);
            if ($field == 'student_photo') {
                $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('student', $userDetails['photo']) . '" width="' . $photo_size . '">';
                $body = str_replace($tag, $photo, $body);
            } else if ($field == 'exam_name') {
                $body = str_replace($tag, $this->applicationModel->exam_name_by_id($exam_id), $body);
            } else if ($field == 'subject_list_table') {
                $body = str_replace($tag, $this->tableHtml($exam_id, $userDetails['class_id'], $userDetails['section_id'], $userDetails['branch_id']), $body);
            } else if ($field == 'logo') {
                if (!empty($templete['logo'])) {
                    $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                    $body = str_replace($tag, $logo_ph, $body);
                }
            } else if ($field == 'signature') {
                if (!empty($templete['signature'])) {
                    $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                    $body = str_replace($tag, $signature_ph, $body);
                }
            } else if ($field == 'qr_code') {
                if (!empty($templete['qr_code'])) {
                    $qr_code = $templete['qr_code'];
                    $params['savename'] = 'uploads/qr_code/stu_' . $userDetails['id'] . '.png';
                    $params['level'] = 'M';
                    $params['size'] = 2;
                    $params['data'] = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                    $qrCode = $this->ciqrcode->generate($params);
                    $photo = '<img src="' . base_url($qrCode) . '">';
                    $body = str_replace($tag, $photo, $body);
                }
            } else if ($field == 'present_address') {
                $body = str_replace($tag, $userDetails['current_address'], $body);
            } else if ($field == 'print_date') {
                $body = str_replace($tag, _d($print_date), $body);
            } else {
                $body = str_replace($tag, $userDetails[$field], $body);
            }
        }
        return $body;
    }
    public function getStudent($id)
    {
        $builder->select('s.*,CONCAT_WS(" ",s.first_name, s.last_name) as name,e.roll,e.id as attendance,e.class_id,e.section_id,e.branch_id,e.session_id,c.name as class,se.name as section,sc.name as category,p.father_name,p.mother_name,br.name as institute_name,br.email as institute_email,br.address as institute_address,br.mobileno as institute_mobile_no');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id and e.session_id = ' . $db->escape(get_session_id()), 'left');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->join('student_category as sc', 's.category_id=sc.id', 'left');
        $builder->join('parent as p', 'p.id=s.parent_id', 'left');
        $builder->join('branch as br', 'br.id = e.branch_id', 'left');
        $builder->where('e.id', $id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function getStaff($id)
    {
        $builder->select('s.*,s.department as deid,s.designation as desid,staff_department.name as department,staff_designation.name as designation,br.name as institute_name,br.email as institute_email,br.address as institute_address,br.mobileno as institute_mobile_no');
        $builder->from('staff as s');
        $builder->join('staff_department', 'staff_department.id = s.department', 'left');
        $builder->join('staff_designation', 'staff_designation.id = s.designation', 'left');
        $builder->join('branch as br', 'br.id = s.branch_id', 'left');
        $builder->where('s.id', $id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function tableHtml($examID, $classID, $sectionID, $branchID = '')
    {
        $html = '';
        $html .= '<table class="table table-bordered table-condensed">';
        $html .= '<thead>';
        $html .= '<tr>';
        $html .= '<th>Subject</th>';
        $html .= '<th>Date</th>';
        $html .= '<th>Time</th>';
        $html .= '<th>Hall Room</th>';
        $html .= '</tr>';
        $html .= '</thead>';
        $html .= '<tbody>';
        $timetables = $this->timetable_model->getExamTimetableByModal($examID, $classID, $sectionID, $branchID);
        if (count($timetables->result_array())) {
            foreach ($timetables->result_array() as $row) {
                $html .= '<tr>';
                $html .= '<td>' . $row['subject_name'] . '</td>';
                $html .= '<td>' . _d($row['exam_date']) . '</td>';
                $html .= '<td>' . $row['time_start'] . ' To ' . $row['time_end'] . '</td>';
                $html .= '<td>' . $row['hall_no'] . '</td>';
                $html .= '</tr>';
            }
        } else {
            $html .= '<tr> <td colspan="5"> <h5 class="text-danger text-center">' . translate('no_information_available') . '</h5> </td></tr>';
        }
        $html .= '</tbody>';
        $html .= '</table>';
        return $html;
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class CardManageModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function getList($type = 1)
    {
        $builder->select('card_templete.*,branch.name as branchname');
        $builder->from('card_templete');
        $builder->join('branch', 'branch.id = card_templete.branch_id', 'left');
        if (!is_superadmin_loggedin()) {
            $this->db->table('card_templete.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->where('card_templete.card_type', $type);
        $builder->order_by('card_templete.id', 'ASC');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function save($data)
    {
        $userType = $data['card_type'] == 2 ? 1 : $data['user_type'];
        $background_file = '';
        $oldBackground_file = $this->request->getPost('old_background_file');
        if (isset($_FILES["background_file"]) && !empty($_FILES['background_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("background_file")) {
                // need to unlink previous photo
                if (!empty($oldBackground_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldBackground_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $background_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldBackground_file)) {
            $background_file = $oldBackground_file;
        }
        $logo_file = '';
        $oldLogo_file = $this->request->getPost('old_logo_file');
        if (isset($_FILES["logo_file"]) && !empty($_FILES['logo_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("logo_file")) {
                // need to unlink previous photo
                if (!empty($oldLogo_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldLogo_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $logo_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldLogo_file)) {
            $logo_file = $oldLogo_file;
        }
        $signature_file = '';
        $oldSignature_file = $this->request->getPost('old_signature_file');
        if (isset($_FILES["signature_file"]) && !empty($_FILES['signature_file']['name'])) {
            $config['upload_path'] = './uploads/certificate/';
            $config['allowed_types'] = 'jpg|png';
            $config['overwrite'] = false;
            $this->upload->initialize($config);
            if ($this->upload->do_upload("signature_file")) {
                // need to unlink previous photo
                if (!empty($oldSignature_file)) {
                    $unlink_path = 'uploads/certificate/' . $oldSignature_file;
                    if (file_exists($unlink_path)) {
                        @unlink($unlink_path);
                    }
                }
                $signature_file = $this->upload->data('file_name');
            }
        } else if (!empty($oldSignature_file)) {
            $signature_file = $oldSignature_file;
        }
        if ($userType == 1) {
            $qrCode = $data['stu_qr_code'];
        } else {
            $qrCode = $data['emp_qr_code'];
        }
        $arrayLive = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['card_name'], 'card_type' => $data['card_type'], 'user_type' => $userType, 'layout_width' => $data['layout_width'], 'layout_height' => $data['layout_height'], 'qr_code' => $qrCode, 'photo_style' => $data['photo_style'], 'photo_size' => empty($data['photo_size']) ? 100 : $data['photo_size'], 'top_space' => empty($data['top_space']) ? 0 : $data['top_space'], 'bottom_space' => empty($data['bottom_space']) ? 0 : $data['bottom_space'], 'right_space' => empty($data['right_space']) ? 0 : $data['right_space'], 'left_space' => empty($data['left_space']) ? 0 : $data['left_space'], 'background' => $background_file, 'logo' => $logo_file, 'signature' => $signature_file, 'content' => $this->request->getPost('content', false));
        if (!isset($data['templete_id'])) {
            $builder->insert('card_templete', $arrayLive);
        } else {
            $builder->where('id', $data['templete_id']);
            $builder->update('card_templete', $arrayLive);
        }
    }
    public function tagsList($roleID = "", $admit_card = false)
    {
        $arrayTags = array();
        $arrayTags[] = '{name}';
        $arrayTags[] = '{gender}';
        if ($roleID == 1) {
            $arrayTags[] = '{father_name}';
            $arrayTags[] = '{mother_name}';
            $arrayTags[] = '{student_photo}';
            $arrayTags[] = '{register_no}';
            $arrayTags[] = '{roll}';
            $arrayTags[] = '{admission_date}';
            $arrayTags[] = '{class}';
            $arrayTags[] = '{section}';
            $arrayTags[] = '{category}';
            $arrayTags[] = '{caste}';
        }
        if ($roleID == 2) {
            $arrayTags[] = '{staff_photo}';
            $arrayTags[] = '{joining_date}';
            $arrayTags[] = '{designation}';
            $arrayTags[] = '{department}';
            $arrayTags[] = '{qualification}';
            $arrayTags[] = '{total_experience}';
        }
        if ($admit_card == true) {
            $arrayTags[] = '{exam_name}';
            $arrayTags[] = '{subject_list_table}';
        }
        $arrayTags[] = '{religion}';
        $arrayTags[] = '{blood_group}';
        $arrayTags[] = '{birthday}';
        $arrayTags[] = '{email}';
        $arrayTags[] = '{mobileno}';
        $arrayTags[] = '{present_address}';
        $arrayTags[] = '{permanent_address}';
        $arrayTags[] = '{logo}';
        $arrayTags[] = '{signature}';
        $arrayTags[] = '{qr_code}';
        $arrayTags[] = '{institute_name}';
        $arrayTags[] = '{institute_email}';
        $arrayTags[] = '{institute_address}';
        $arrayTags[] = '{institute_mobile_no}';
        $arrayTags[] = '{print_date}';
        if ($admit_card == false) {
            $arrayTags[] = '{expiry_date}';
        }
        return $arrayTags;
    }
    public function tagsReplace($roleID, $userID, $templete, $print_date, $expiry_date)
    {
        $body = $templete['content'];
        $photo_size = $templete['photo_size'];
        $photo_style = $templete['photo_style'];
        $tags = $this->tagsList($roleID);
        if ($roleID == 1) {
            $userDetails = $this->getStudent($userID);
        } else if ($roleID == 2) {
            $userDetails = $this->getStaff($userID);
        }
        $arr = array('{', '}');
        foreach ($tags as $tag) {
            $field = str_replace($arr, '', $tag);
            if ($roleID == 1) {
                if ($field == 'student_photo') {
                    $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('student', $userDetails['photo']) . '" style="width: auto; max-height:' . $photo_size . '">';
                    $body = str_replace($tag, $photo, $body);
                } else if ($field == 'logo') {
                    if (!empty($templete['logo'])) {
                        $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                        $body = str_replace($tag, $logo_ph, $body);
                    }
                } else if ($field == 'signature') {
                    if (!empty($templete['signature'])) {
                        $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                        $body = str_replace($tag, $signature_ph, $body);
                    }
                } else if ($field == 'qr_code') {
                    if (!empty($templete['qr_code'])) {
                        $qr_code = $templete['qr_code'];
                        if ($qr_code == 'attendance') {
                            $qrData = str_replace('=', '', base64_encode('s-' . $userDetails['attendance']));
                        } else {
                            $qrData = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                        }
                        $params['savename'] = 'uploads/qr_code/stu_' . substr(hash('sha256', mt_rand() . microtime()), 0, 20) . '.png';
                        $params['level'] = 'M';
                        $params['size'] = 3;
                        $params['data'] = $qrData;
                        $qrCode = $this->ciqrcode->generate($params);
                        $photo = '<img src="' . base_url($qrCode) . '">';
                        $body = str_replace($tag, $photo, $body);
                    }
                } else if ($field == 'present_address') {
                    $body = str_replace($tag, $userDetails['current_address'], $body);
                } else if ($field == 'print_date') {
                    $body = str_replace($tag, _d($print_date), $body);
                } else if ($field == 'expiry_date') {
                    $body = str_replace($tag, _d($expiry_date), $body);
                } else if ($field == 'birthday') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else {
                    $body = str_replace($tag, $userDetails[$field], $body);
                }
            }
            if ($roleID == 2) {
                if ($field == 'staff_photo') {
                    $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('staff', $userDetails['photo']) . '" style="width: auto; max-height:' . $photo_size . '">';
                    $body = str_replace($tag, $photo, $body);
                } else if ($field == 'logo') {
                    if (!empty($templete['logo'])) {
                        $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                        $body = str_replace($tag, $logo_ph, $body);
                    }
                } else if ($field == 'signature') {
                    if (!empty($templete['signature'])) {
                        $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                        $body = str_replace($tag, $signature_ph, $body);
                    }
                } else if ($field == 'print_date') {
                    $body = str_replace($tag, _d($print_date), $body);
                } else if ($field == 'expiry_date') {
                    $body = str_replace($tag, _d($expiry_date), $body);
                } else if ($field == 'qr_code') {
                    if (!empty($templete['qr_code'])) {
                        $qr_code = $templete['qr_code'];
                        if ($qr_code == 'attendance') {
                            $qrData = str_replace('=', '', base64_encode('e-' . $userDetails['id']));
                        } else {
                            $qrData = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                        }
                        $params['savename'] = 'uploads/qr_code/sta_' . substr(hash('sha256', mt_rand() . microtime()), 0, 20) . '.png';
                        $params['level'] = 'M';
                        $params['size'] = 3;
                        $params['data'] = $qrData;
                        $qrCode = $this->ciqrcode->generate($params);
                        $photo = '<img src="' . base_url($qrCode) . '">';
                        $body = str_replace($tag, $photo, $body);
                    }
                } else if ($field == 'gender') {
                    $body = str_replace($tag, $userDetails['sex'], $body);
                } else if ($field == 'joining_date') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else if ($field == 'birthday') {
                    $body = str_replace($tag, _d($userDetails[$field]), $body);
                } else {
                    $body = str_replace($tag, $userDetails[$field], $body);
                }
            }
        }
        return $body;
    }
    public function admitCardTagsReplace($userID, $templete, $print_date, $exam_id)
    {
        $body = $templete['content'];
        $photo_size = $templete['photo_size'];
        $photo_style = $templete['photo_style'];
        $tags = $this->tagsList(1, true);
        $userDetails = $this->getStudent($userID);
        $arr = array('{', '}');
        foreach ($tags as $tag) {
            $field = str_replace($arr, '', $tag);
            if ($field == 'student_photo') {
                $photo = '<img class="' . ($photo_style == 1 ? '' : 'rounded') . '" src="' . get_image_url('student', $userDetails['photo']) . '" width="' . $photo_size . '">';
                $body = str_replace($tag, $photo, $body);
            } else if ($field == 'exam_name') {
                $body = str_replace($tag, $this->applicationModel->exam_name_by_id($exam_id), $body);
            } else if ($field == 'subject_list_table') {
                $body = str_replace($tag, $this->tableHtml($exam_id, $userDetails['class_id'], $userDetails['section_id'], $userDetails['branch_id']), $body);
            } else if ($field == 'logo') {
                if (!empty($templete['logo'])) {
                    $logo_ph = '<img src="' . base_url('uploads/certificate/' . $templete['logo']) . '">';
                    $body = str_replace($tag, $logo_ph, $body);
                }
            } else if ($field == 'signature') {
                if (!empty($templete['signature'])) {
                    $signature_ph = '<img src="' . base_url('uploads/certificate/' . $templete['signature']) . '">';
                    $body = str_replace($tag, $signature_ph, $body);
                }
            } else if ($field == 'qr_code') {
                if (!empty($templete['qr_code'])) {
                    $qr_code = $templete['qr_code'];
                    $params['savename'] = 'uploads/qr_code/stu_' . $userDetails['id'] . '.png';
                    $params['level'] = 'M';
                    $params['size'] = 2;
                    $params['data'] = ucfirst($qr_code) . " - " . $userDetails[$qr_code];
                    $qrCode = $this->ciqrcode->generate($params);
                    $photo = '<img src="' . base_url($qrCode) . '">';
                    $body = str_replace($tag, $photo, $body);
                }
            } else if ($field == 'present_address') {
                $body = str_replace($tag, $userDetails['current_address'], $body);
            } else if ($field == 'print_date') {
                $body = str_replace($tag, _d($print_date), $body);
            } else {
                $body = str_replace($tag, $userDetails[$field], $body);
            }
        }
        return $body;
    }
    public function getStudent($id)
    {
        $builder->select('s.*,CONCAT_WS(" ",s.first_name, s.last_name) as name,e.roll,e.id as attendance,e.class_id,e.section_id,e.branch_id,e.session_id,c.name as class,se.name as section,sc.name as category,p.father_name,p.mother_name,br.name as institute_name,br.email as institute_email,br.address as institute_address,br.mobileno as institute_mobile_no');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id and e.session_id = ' . $db->escape(get_session_id()), 'left');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id = se.id', 'left');
        $builder->join('student_category as sc', 's.category_id=sc.id', 'left');
        $builder->join('parent as p', 'p.id=s.parent_id', 'left');
        $builder->join('branch as br', 'br.id = e.branch_id', 'left');
        $builder->where('e.id', $id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function getStaff($id)
    {
        $builder->select('s.*,s.department as deid,s.designation as desid,staff_department.name as department,staff_designation.name as designation,br.name as institute_name,br.email as institute_email,br.address as institute_address,br.mobileno as institute_mobile_no');
        $builder->from('staff as s');
        $builder->join('staff_department', 'staff_department.id = s.department', 'left');
        $builder->join('staff_designation', 'staff_designation.id = s.designation', 'left');
        $builder->join('branch as br', 'br.id = s.branch_id', 'left');
        $builder->where('s.id', $id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function tableHtml($examID, $classID, $sectionID, $branchID = '')
    {
        $html = '';
        $html .= '<table class="table table-bordered table-condensed">';
        $html .= '<thead>';
        $html .= '<tr>';
        $html .= '<th>Subject</th>';
        $html .= '<th>Date</th>';
        $html .= '<th>Time</th>';
        $html .= '<th>Hall Room</th>';
        $html .= '</tr>';
        $html .= '</thead>';
        $html .= '<tbody>';
        $timetables = $this->timetableModel->getExamTimetableByModal($examID, $classID, $sectionID, $branchID);
        if (count($timetables->result_array())) {
            foreach ($timetables->result_array() as $row) {
                $html .= '<tr>';
                $html .= '<td>' . $row['subject_name'] . '</td>';
                $html .= '<td>' . _d($row['exam_date']) . '</td>';
                $html .= '<td>' . $row['time_start'] . ' To ' . $row['time_end'] . '</td>';
                $html .= '<td>' . $row['hall_no'] . '</td>';
                $html .= '</tr>';
            }
        } else {
            $html .= '<tr> <td colspan="5"> <h5 class="text-danger text-center">' . translate('no_information_available') . '</h5> </td></tr>';
        }
        $html .= '</tbody>';
        $html .= '</table>';
        return $html;
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/FeesModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class FeesModel extends MYModel
{
    protected $db;
    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
        $this->model('sms_model');
    }
    public function getPreviousSessionBalance($enrollID = '', $session_id = '', $with_fine = 0)
    {
        $total_balance = 0;
        $total_fine = 0;
        $variable = $db->table('fee_allocation')->get('fee_allocation')->getResult();
        foreach ($variable as $key => $allocation) {
            $groupsDetails = $db->table('fee_groups_details')->get('fee_groups_details')->getResult();
            foreach ($groupsDetails as $k => $type) {
                $fine = $this->feeFineCalculation($allocation->id, $type->fee_type_id);
                $b = $this->getBalance($allocation->id, $type->fee_type_id);
                $total_balance += $b['balance'];
                $total_fine += abs($fine - $b['fine']);
            }
        }
        if ($with_fine == 1) {
            return round($total_balance + $total_fine);
        } else {
            return $total_balance;
        }
    }
    public function feeFineCalculation($allocationID, $typeID)
    {
        $builder->select('fd.amount,fd.due_date,f.*');
        $builder->from('fee_allocation as a');
        $builder->join('fee_groups_details as fd', 'fd.fee_groups_id = a.group_id and fd.fee_type_id = ' . $db->escape($typeID), 'left');
        $builder->join('fee_fine as f', 'f.group_id = fd.fee_groups_id and f.type_id = fd.fee_type_id', 'inner');
        $builder->where('a.id', $allocationID);
        $this->db->table('f.session_id', get_session_id())->where();
        $getDB = $builder->get()->row_array();
        if (is_array($getDB) && count($getDB)) {
            $dueDate = $getDB['due_date'];
            if (strtotime($dueDate) < strtotime(date('Y-m-d'))) {
                $feeAmount = $getDB['amount'];
                $feeFrequency = $getDB['fee_frequency'];
                $fineValue = $getDB['fine_value'];
                if ($getDB['fine_type'] == 1) {
                    $fineAmount = $fineValue;
                } else {
                    $fineAmount = $feeAmount / 100 * $fineValue;
                }
                $now = time();
                // or your date as well
                $dueDate = strtotime($dueDate);
                $datediff = $now - $dueDate;
                $overDay = round($datediff / (60 * 60 * 24));
                if ($feeFrequency != 0) {
                    $fineAmount = $overDay / $feeFrequency * $fineAmount;
                }
                return $fineAmount;
            } else {
                return 0;
            }
        } else {
            return 0;
        }
    }
    public function getStudentAllocationList($classID = '', $sectionID = '', $groupID = '', $branchID = '')
    {
        $sql = "SELECT e.*, s.photo, CONCAT_WS(' ',s.first_name, s.last_name) as fullname, s.gender, s.register_no, s.parent_id, s.email, s.mobileno, IFNULL(fa.id, 0) as allocation_id FROM enroll as e INNER JOIN student as s ON e.student_id = s.id LEFT JOIN login_credential as l ON l.user_id = s.id AND l.role = '7' LEFT JOIN fee_allocation as fa ON fa.student_id = e.id AND fa.group_id = " . $db->escape($groupID) . " AND fa.session_id= " . $db->escape(get_session_id()) . " WHERE e.class_id = " . $db->escape($classID) . " AND e.branch_id = " . $db->escape($branchID) . " AND e.session_id = " . $db->escape(get_session_id());
        if ($sectionID != 'all') {
            $sql .= " AND e.section_id =" . $db->escape($sectionID);
        }
        $sql .= " ORDER BY s.id ASC";
        return $db->query($sql)->result_array();
    }
    public function getInvoiceStatus($enrollID = '')
    {
        $status = "";
        $sql = "SELECT SUM(`fee_groups_details`.`amount` + `fee_allocation`.`prev_due`) as `total`, min(`fee_allocation`.`id`) as `inv_no` FROM `fee_allocation` LEFT JOIN `fee_groups_details` ON `fee_groups_details`.`fee_groups_id` = `fee_allocation`.`group_id` LEFT JOIN `fees_type` ON `fees_type`.`id` = `fee_groups_details`.`fee_type_id` WHERE `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id());
        $balance = $db->query($sql)->row_array();
        $invNo = str_pad($balance['inv_no'], 4, '0', STR_PAD_LEFT);
        $sql = "SELECT IFNULL(SUM(`fee_payment_history`.`amount`), 0) as `amount`, IFNULL(SUM(`fee_payment_history`.`discount`), 0) as `discount`, IFNULL(SUM(`fee_payment_history`.`fine`), 0) as `fine` FROM `fee_payment_history` LEFT JOIN `fee_allocation` ON `fee_payment_history`.`allocation_id` = `fee_allocation`.`id` WHERE `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id());
        $paid = $db->query($sql)->row_array();
        if ($paid['amount'] == 0) {
            $status = 'unpaid';
        } elseif ($balance['total'] == $paid['amount'] + $paid['discount']) {
            $status = 'total';
        } elseif ($paid['amount'] > 1) {
            $status = 'partly';
        }
        return array('status' => $status, 'invoice_no' => $invNo);
    }
    public function getInvoiceDetails($enrollID = '')
    {
        $sql = "SELECT `fee_allocation`.`group_id`,`fee_allocation`.`prev_due`,`fee_allocation`.`id` as `allocation_id`, `fees_type`.`name`, `fees_type`.`system`, `fee_groups_details`.`amount`, `fee_groups_details`.`due_date`, `fee_groups_details`.`fee_type_id` FROM `fee_allocation` LEFT JOIN\r\n        `fee_groups_details` ON `fee_groups_details`.`fee_groups_id` = `fee_allocation`.`group_id` LEFT JOIN `fees_type` ON `fees_type`.`id` = `fee_groups_details`.`fee_type_id` WHERE\r\n        `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id()) . " ORDER BY `fee_allocation`.`group_id` ASC, `fees_type`.`id` ASC";
        $student = array();
        $r = $db->query($sql)->result_array();
        foreach ($r as $key => $value) {
            if ($value['system'] == 1) {
                $value['amount'] = $value['prev_due'];
            }
            $student[] = $value;
        }
        return $student;
    }
    public function getInvoiceBasic($enrollID = '')
    {
        $sessionID = get_session_id();
        $builder->select('s.id,s.register_no,e.branch_id,e.id as enroll_id,s.first_name,s.last_name,s.email as student_email,s.current_address as student_address,c.name as class_name,b.school_name,b.email as school_email,b.mobileno as school_mobileno,b.address as school_address,p.father_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->join('parent as p', 'p.id = s.parent_id', 'left');
        $builder->join('branch as b', 'b.id = e.branch_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('e.session_id', $sessionID);
        return $builder->get()->row_array();
    }
    public function getStudentFeeDeposit($allocationID, $typeID)
    {
        $sqlDeposit = "SELECT IFNULL(SUM(`amount`), '0.00') as `total_amount`, IFNULL(SUM(`discount`), '0.00') as `total_discount`, IFNULL(SUM(`fine`), '0.00') as `total_fine` FROM `fee_payment_history` WHERE `allocation_id` = " . $db->escape($allocationID) . " AND `type_id` = " . $db->escape($typeID);
        return $db->query($sqlDeposit)->row_array();
    }
    public function getPaymentHistory($allocationID, $groupID)
    {
        $builder->select('h.*,t.name,t.fee_code,pt.name as payvia');
        $builder->from('fee_payment_history as h');
        $builder->join('fees_type as t', 't.id = h.type_id', 'left');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $builder->where('h.allocation_id', $allocationID);
        $builder->order_by('h.id', 'asc');
        return $builder->get()->result_array();
    }
    public function typeSave($data = array())
    {
        $arrayData = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['type_name'], 'fee_code' => strtolower(str_replace(' ', '-', $data['type_name'])), 'description' => $data['description']);
        if (!isset($data['type_id'])) {
            $builder->insert('fees_type', $arrayData);
        } else {
            $builder->where('id', $data['type_id']);
            $builder->update('fees_type', $arrayData);
        }
    }
    // add partly of the fee
    public function add_fees($data = array(), $id = '')
    {
        $total_due = get_type_name_by_id('fee_invoice', $id, 'total_due');
        $payment_amount = $data['amount'];
        if ($payment_amount <= $total_due && $payment_amount > 0) {
            $arrayHistory = array('fee_invoice_id' => $id, 'collect_by' => get_user_stamp(), 'remarks' => $data['remarks'], 'method' => $data['method'], 'amount' => $payment_amount, 'date' => date("Y-m-d"), 'session_id' => get_session_id());
            $builder->insert('payment_history', $arrayHistory);
            if ($total_due <= $payment_amount) {
                $builder->where('id', $id);
                $this->db->table('fee_invoice', array('status' => 2))->update();
            } else {
                $builder->where('id', $id);
                $this->db->table('fee_invoice', array('status' => 1))->update();
            }
            $builder->where('id', $id);
            $builder->set('total_paid', 'total_paid + ' . $payment_amount, false);
            $builder->set('total_due', 'total_due - ' . $payment_amount, false);
            $builder->update('fee_invoice');
            // send payment confirmation sms
            $arrayHistory['student_id'] = $data['student_id'];
            $arrayHistory['timestamp'] = date("Y-m-d");
            $this->sms_model->send_sms($arrayHistory, 2);
            return true;
        } else {
            return false;
        }
    }
    public function getInvoiceList($class_id = '', $section_id = '', $branch_id = '')
    {
        $builder->select('e.id as enroll_id,e.student_id,e.roll,e.id as enroll_id,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name');
        $builder->from('fee_allocation as fa');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id = fa.session_id', 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->where('fa.branch_id', $branch_id);
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $builder->group_by('fa.student_id');
        $builder->order_by('e.id', 'asc');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['feegroup'] = $this->getfeeGroup($value['enroll_id']);
        }
        return $result;
    }
    public function getDueInvoiceList($class_id = '', $section_id = '', $feegroup_id = '', $fee_feetype_id = '')
    {
        $sql = "SELECT IFNULL(SUM(h.amount), '0') as `total_amount`, IFNULL(SUM(h.discount), '0') as `total_discount`, gd.amount as `full_amount`, fa.prev_due as `prev_due`, gd.`due_date`, e.student_id, e.id as enroll_id,e.roll, s.first_name, s.last_name, s.register_no, s.mobileno, c.name as `class_name`, se.name as `section_name` FROM fee_allocation as fa LEFT JOIN fee_payment_history as h ON h.allocation_id = fa.id and h.type_id = " . $db->escape($fee_feetype_id) . " INNER JOIN fee_groups_details as gd ON gd.fee_groups_id = fa.group_id and gd.fee_type_id = " . $db->escape($fee_feetype_id) . " INNER JOIN\r\n        enroll as e ON e.id = fa.student_id LEFT JOIN student as s ON s.id = e.student_id LEFT JOIN class as c ON c.id = e.class_id LEFT JOIN section as se ON se.id = e.section_id WHERE\r\n        fa.group_id = " . $db->escape($feegroup_id) . " AND fa.session_id = " . $db->escape(get_session_id()) . " AND e.class_id = " . $db->escape($class_id);
        if ($section_id != 'all') {
            $sql .= " AND e.section_id = " . $db->escape($section_id);
        }
        $sql .= " GROUP BY  fa.student_id ORDER BY e.id ASC";
        $result = $db->query($sql)->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['feegroup'] = $this->getfeeGroup($value['enroll_id']);
        }
        return $result;
    }
    public function getDueReport($class_id = '', $section_id = '')
    {
        $builder->select('fa.id as allocation_id,sum(gd.amount + fa.prev_due) as total_fees,e.id as enroll_id,e.roll,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name');
        $builder->from('fee_allocation as fa');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = fa.group_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id = ' . $db->escape(get_session_id()), 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('e.class_id', $class_id);
        if (!empty($section_id)) {
            $builder->where('e.section_id', $section_id);
        }
        $builder->group_by('fa.student_id');
        $builder->order_by('e.roll', 'asc');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['payment'] = $this->getPaymentDetails($value['enroll_id']);
        }
        return $result;
    }
    public function getPaymentDetails($student_id = '')
    {
        $builder->select('IFNULL(SUM(amount), 0) as total_paid, IFNULL(SUM(discount), 0) as total_discount, IFNULL(SUM(fine), 0) as total_fine');
        $builder->from('fee_allocation');
        $builder->join('fee_payment_history', 'fee_payment_history.allocation_id = fee_allocation.id', 'left');
        $builder->where('fee_allocation.student_id', $student_id);
        return $builder->get()->row_array();
    }
    public function getStuPaymentHistory($classID = '', $SectionID = '', $paymentVia = '', $start = '', $end = '', $branchID = '', $onlyFine = false)
    {
        $builder->select('h.*,ft.name as type_name,e.student_id,e.roll,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name,pt.name as pay_via');
        $builder->from('fee_payment_history as h');
        $builder->join('fee_allocation as fa', 'fa.id = h.allocation_id', 'inner');
        $builder->join('fees_type as ft', 'ft.id = h.type_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id', 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->where('h.date  >=', $start);
        $builder->where('h.date <=', $end);
        $builder->where('e.branch_id', $branchID);
        if ($onlyFine == true) {
            $builder->where('h.fine !=', 0);
        }
        if (!empty($classID)) {
            $builder->where('e.class_id', $classID);
        }
        if (!empty($SectionID)) {
            $builder->where('e.section_id', $SectionID);
        }
        if ($paymentVia != 'all') {
            if ($paymentVia == 'online') {
                $builder->where('h.collect_by', 'online');
            } else {
                $builder->where('h.collect_by !=', 'online');
            }
        }
        $builder->order_by('h.id', 'asc');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function getStuPaymentReport($classID = '', $sectionID = '', $enrollID = '', $typeID = '', $start = '', $end = '', $branchID = '')
    {
        $builder->select('h.*,gd.due_date,ft.name as type_name,e.student_id,e.roll,s.first_name,s.last_name,s.register_no,pt.name as pay_via');
        $builder->from('fee_payment_history as h');
        $builder->join('fee_allocation as fa', 'fa.id = h.allocation_id', 'inner');
        $builder->join('fees_type as ft', 'ft.id = h.type_id', 'left');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = fa.group_id and gd.fee_type_id = h.type_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id =  ' . $db->escape(get_session_id()), 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('h.date >=', $start);
        $builder->where('h.date <=', $end);
        $builder->where('e.branch_id', $branchID);
        $builder->where('e.class_id', $classID);
        if (!empty($typeID)) {
            $typeID = explode("|", $typeID);
            $builder->where('h.type_id', $typeID[1]);
        }
        if (!empty($enrollID)) {
            $builder->where('e.id', $enrollID);
        }
        $builder->where('e.section_id', $sectionID);
        $builder->order_by('h.id', 'asc');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function getfeeGroup($studentID = '')
    {
        $builder->select('g.name');
        $builder->from('fee_allocation as fa');
        $builder->join('fee_groups as g', 'g.id = fa.group_id', 'inner');
        $builder->where('fa.student_id', $studentID);
        $this->db->table('fa.session_id', get_session_id())->where();
        return $builder->get()->result_array();
    }
    public function reminderSave($data = array())
    {
        $arrayData = array('frequency' => $data['frequency'], 'days' => $data['days'], 'student' => isset($data['chk_student']) ? 1 : 0, 'guardian' => isset($data['chk_guardian']) ? 1 : 0, 'message' => $data['message'], 'dlt_template_id' => $data['dlt_template_id'], 'branch_id' => $data['branch_id']);
        if (!isset($data['reminder_id'])) {
            $builder->insert('fees_reminder', $arrayData);
        } else {
            $builder->where('id', $data['reminder_id']);
            $builder->update('fees_reminder', $arrayData);
        }
    }
    public function getFeeReminderByDate($date = '', $branch_id = '')
    {
        $builder->select('fee_groups_details.*,fees_type.name');
        $builder->from('fee_groups_details');
        $builder->join('fees_type', 'fees_type.id = fee_groups_details.fee_type_id', 'inner');
        $builder->where('fee_groups_details.due_date', $date);
        $builder->where('fees_type.branch_id', $branch_id);
        $builder->order_by('fee_groups_details.id', 'asc');
        return $builder->get()->result_array();
    }
    public function getStudentsListReminder($groupID = '', $typeID = '')
    {
        $sessionID = get_type_name_by_id('global_settings', 1, 'session_id');
        $builder->select('a.id as allocation_id,CONCAT_WS(" ",s.first_name, s.last_name) as child_name,s.mobileno as child_mobileno,pr.name as guardian_name,pr.mobileno as guardian_mobileno');
        $builder->from('fee_allocation as a');
        $builder->join('student as s', 's.id = a.student_id', 'inner');
        $builder->join('parent as pr', 'pr.id = s.parent_id', 'left');
        $builder->where('a.group_id', $groupID);
        $builder->where('a.session_id', $sessionID);
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['payment'] = $this->getPaymentDetailsByTypeID($value['allocation_id'], $typeID);
        }
        return $result;
    }
    public function getPaymentDetailsByTypeID($allocationID, $typeID)
    {
        $builder->select('IFNULL(SUM(amount), 0) as total_paid, IFNULL(SUM(discount), 0) as total_discount');
        $builder->from('fee_payment_history');
        $builder->where('allocation_id', $allocationID);
        $builder->where('type_id', $typeID);
        return $builder->get()->row_array();
    }
    public function depositAmountVerify($amount = '')
    {
        if ($amount != "") {
            $typeID = $this->request->getPost('fees_type');
            if (empty($typeID)) {
                return true;
            }
            $feesType = explode("|", $typeID);
            $remainAmount = $this->getBalance($feesType[0], $feesType[1]);
            if ($remainAmount['balance'] < $amount) {
                $this->form_validation->set_message('deposit_verify', '{field} cannot be greater than the remaining.');
                return false;
            } else {
                return true;
            }
        }
        return true;
    }
    public function getBalance($allocationID, $typeID)
    {
        $groupsID = get_type_name_by_id('fee_allocation', $allocationID, 'group_id');
        $systemFeesType = get_type_name_by_id('fees_type', $typeID, 'system');
        if ($systemFeesType == 1) {
            $totalAmount = get_type_name_by_id('fee_allocation', $allocationID, 'prev_due');
        } else {
            $totalAmount = $db->table('fee_groups_details')->get('fee_groups_details')->row_array();
            $totalAmount = $totalAmount['amount'];
        }
        $builder->select('IFNULL(sum(p.amount), 0) as total_amount,IFNULL(sum(p.discount), 0) as total_discount,IFNULL(sum(p.fine), 0) as total_fine');
        $builder->from('fee_payment_history as p');
        $builder->where('p.allocation_id', $allocationID);
        $builder->where('p.type_id', $typeID);
        $paid = $builder->get()->row_array();
        $balance = $totalAmount - ($paid['total_amount'] + $paid['total_discount']);
        $total_fine = $paid['total_fine'];
        return array('balance' => $balance, 'fine' => $total_fine);
    }
    // voucher transaction save function
    public function saveTransaction($data = array(), $payment_historyID = '')
    {
        $branchID = $this->applicationModel->get_branch_id();
        $accountID = $data['account_id'];
        $date = $data['date'];
        $amount = $data['amount'];
        // get the current balance of the selected account
        $qbal = $this->app_lib->get_table('accounts', $accountID, true);
        $cbal = $qbal['balance'];
        $bal = $cbal + $amount;
        // query system voucher head / insert
        $arrayHead = array('name' => 'Student Fees Collection', 'type' => 'income', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayHead);
        $query = $builder->get('voucher_head');
        if ($query->num_rows() > 0) {
            $voucher_headID = $query->row()->id;
        } else {
            $builder->insert('voucher_head', $arrayHead);
            $voucher_headID = $builder->insert_id();
        }
        // query system transactions / insert
        $arrayTransactions = array('account_id' => $accountID, 'voucher_head_id' => $voucher_headID, 'type' => 'deposit', 'system' => 1, 'date' => date("Y-m-d", strtotime($date)), 'branch_id' => $branchID);
        $builder->where($arrayTransactions);
        $query = $builder->get('transactions');
        if ($query->num_rows() == 1) {
            $transactionsID = $query->row()->id;
            $builder->set('amount', 'amount+' . $amount, false);
            $builder->set('cr', 'cr+' . $amount, false);
            $builder->set('bal', $bal);
            $builder->where('id', $transactionsID);
            $builder->update('transactions');
        } else {
            $arrayTransactions['ref'] = '';
            $arrayTransactions['amount'] = $amount;
            $arrayTransactions['dr'] = 0;
            $arrayTransactions['cr'] = $amount;
            $arrayTransactions['bal'] = $bal;
            $arrayTransactions['pay_via'] = 5;
            $arrayTransactions['description'] = date("d-M-Y", strtotime($date)) . " Total Fees Collection";
            $builder->insert('transactions', $arrayTransactions);
            $transactionsID = $builder->insert_id();
        }
        $builder->where('id', $accountID);
        $this->db->table('accounts', array('balance' => $bal))->update();
        // insert transactions links details in DB
        $arrayLinkDetails = array('payment_id' => $payment_historyID, 'transactions_id' => $transactionsID);
        $builder->insert('transactions_links_details', $arrayLinkDetails);
    }
    public function carryForwardDue($data = array())
    {
        $type_name = "Previous Session Balance";
        $group_name = "Due Record";
        $branchID = $data['branch_id'];
        $sessionID = $data['session_id'];
        $fee_type_id = 0;
        $fee_group_id = 0;
        $arrayType = array('name' => $type_name, 'branch_id' => $branchID, 'system' => 1);
        $fee_type_exists = $this->checkExistsData('fees_type', $arrayType);
        if (!$fee_type_exists) {
            $arrayType['fee_code'] = 'previous-balance';
            $builder->insert('fees_type', $arrayType);
            $fee_type_id = $builder->insert_id();
        } else {
            $fee_type_id = $fee_type_exists->id;
        }
        $arrayGroup = array('name' => $group_name, 'branch_id' => $branchID, 'session_id' => $sessionID, 'system' => 1);
        $fee_group_exists = $this->checkExistsData('fee_groups', $arrayGroup);
        if (!$fee_group_exists) {
            $builder->insert('fee_groups', $arrayGroup);
            $fee_group_id = $builder->insert_id();
        } else {
            $fee_group_id = $fee_group_exists->id;
        }
        $arrayGroupsDetails = array('fee_groups_id' => $fee_group_id, 'fee_type_id' => $fee_type_id);
        $fee_group_details_exists = $this->checkExistsData('fee_groups_details', $arrayGroupsDetails);
        if (!$fee_group_details_exists) {
            $arrayGroupsDetails['amount'] = 0;
            $arrayGroupsDetails['due_date'] = $data['due_date'];
            $builder->insert('fee_groups_details', $arrayGroupsDetails);
        }
        $arrayAllocation = array('student_id' => $data['student_id'], 'group_id' => $fee_group_id, 'branch_id' => $branchID, 'session_id' => $sessionID);
        $fee_allocation_exists = $this->checkExistsData('fee_allocation', $arrayAllocation);
        if (!$fee_allocation_exists) {
            $arrayAllocation['prev_due'] = $data['prev_due'];
            $builder->insert('fee_allocation', $arrayAllocation);
        } else {
            $arrayAllocation['prev_due'] = $data['prev_due'];
            $builder->where('id', $fee_allocation_exists->id);
            $builder->update('fee_allocation', $arrayAllocation);
        }
    }
    function checkExistsData($table = '', $data = array())
    {
        $builder->where($data);
        $query = $builder->get($table);
        if ($query->num_rows() > 0) {
            return $query->row();
        } else {
            return false;
        }
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class FeesModel extends MYModel
{
    protected $db;
    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
        $this->model('sms_model');
    }
    public function getPreviousSessionBalance($enrollID = '', $session_id = '', $with_fine = 0)
    {
        $total_balance = 0;
        $total_fine = 0;
        $variable = $db->table('fee_allocation')->get('fee_allocation')->getResult();
        foreach ($variable as $key => $allocation) {
            $groupsDetails = $db->table('fee_groups_details')->get('fee_groups_details')->getResult();
            foreach ($groupsDetails as $k => $type) {
                $fine = $this->feeFineCalculation($allocation->id, $type->fee_type_id);
                $b = $this->getBalance($allocation->id, $type->fee_type_id);
                $total_balance += $b['balance'];
                $total_fine += abs($fine - $b['fine']);
            }
        }
        if ($with_fine == 1) {
            return round($total_balance + $total_fine);
        } else {
            return $total_balance;
        }
    }
    public function feeFineCalculation($allocationID, $typeID)
    {
        $builder->select('fd.amount,fd.due_date,f.*');
        $builder->from('fee_allocation as a');
        $builder->join('fee_groups_details as fd', 'fd.fee_groups_id = a.group_id and fd.fee_type_id = ' . $db->escape($typeID), 'left');
        $builder->join('fee_fine as f', 'f.group_id = fd.fee_groups_id and f.type_id = fd.fee_type_id', 'inner');
        $builder->where('a.id', $allocationID);
        $this->db->table('f.session_id', get_session_id())->where();
        $getDB = $builder->get()->row_array();
        if (is_array($getDB) && count($getDB)) {
            $dueDate = $getDB['due_date'];
            if (strtotime($dueDate) < strtotime(date('Y-m-d'))) {
                $feeAmount = $getDB['amount'];
                $feeFrequency = $getDB['fee_frequency'];
                $fineValue = $getDB['fine_value'];
                if ($getDB['fine_type'] == 1) {
                    $fineAmount = $fineValue;
                } else {
                    $fineAmount = $feeAmount / 100 * $fineValue;
                }
                $now = time();
                // or your date as well
                $dueDate = strtotime($dueDate);
                $datediff = $now - $dueDate;
                $overDay = round($datediff / (60 * 60 * 24));
                if ($feeFrequency != 0) {
                    $fineAmount = $overDay / $feeFrequency * $fineAmount;
                }
                return $fineAmount;
            } else {
                return 0;
            }
        } else {
            return 0;
        }
    }
    public function getStudentAllocationList($classID = '', $sectionID = '', $groupID = '', $branchID = '')
    {
        $sql = "SELECT e.*, s.photo, CONCAT_WS(' ',s.first_name, s.last_name) as fullname, s.gender, s.register_no, s.parent_id, s.email, s.mobileno, IFNULL(fa.id, 0) as allocation_id FROM enroll as e INNER JOIN student as s ON e.student_id = s.id LEFT JOIN login_credential as l ON l.user_id = s.id AND l.role = '7' LEFT JOIN fee_allocation as fa ON fa.student_id = e.id AND fa.group_id = " . $db->escape($groupID) . " AND fa.session_id= " . $db->escape(get_session_id()) . " WHERE e.class_id = " . $db->escape($classID) . " AND e.branch_id = " . $db->escape($branchID) . " AND e.session_id = " . $db->escape(get_session_id());
        if ($sectionID != 'all') {
            $sql .= " AND e.section_id =" . $db->escape($sectionID);
        }
        $sql .= " ORDER BY s.id ASC";
        return $db->query($sql)->result_array();
    }
    public function getInvoiceStatus($enrollID = '')
    {
        $status = "";
        $sql = "SELECT SUM(`fee_groups_details`.`amount` + `fee_allocation`.`prev_due`) as `total`, min(`fee_allocation`.`id`) as `inv_no` FROM `fee_allocation` LEFT JOIN `fee_groups_details` ON `fee_groups_details`.`fee_groups_id` = `fee_allocation`.`group_id` LEFT JOIN `fees_type` ON `fees_type`.`id` = `fee_groups_details`.`fee_type_id` WHERE `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id());
        $balance = $db->query($sql)->row_array();
        $invNo = str_pad($balance['inv_no'], 4, '0', STR_PAD_LEFT);
        $sql = "SELECT IFNULL(SUM(`fee_payment_history`.`amount`), 0) as `amount`, IFNULL(SUM(`fee_payment_history`.`discount`), 0) as `discount`, IFNULL(SUM(`fee_payment_history`.`fine`), 0) as `fine` FROM `fee_payment_history` LEFT JOIN `fee_allocation` ON `fee_payment_history`.`allocation_id` = `fee_allocation`.`id` WHERE `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id());
        $paid = $db->query($sql)->row_array();
        if ($paid['amount'] == 0) {
            $status = 'unpaid';
        } elseif ($balance['total'] == $paid['amount'] + $paid['discount']) {
            $status = 'total';
        } elseif ($paid['amount'] > 1) {
            $status = 'partly';
        }
        return array('status' => $status, 'invoice_no' => $invNo);
    }
    public function getInvoiceDetails($enrollID = '')
    {
        $sql = "SELECT `fee_allocation`.`group_id`,`fee_allocation`.`prev_due`,`fee_allocation`.`id` as `allocation_id`, `fees_type`.`name`, `fees_type`.`system`, `fee_groups_details`.`amount`, `fee_groups_details`.`due_date`, `fee_groups_details`.`fee_type_id` FROM `fee_allocation` LEFT JOIN\r\n        `fee_groups_details` ON `fee_groups_details`.`fee_groups_id` = `fee_allocation`.`group_id` LEFT JOIN `fees_type` ON `fees_type`.`id` = `fee_groups_details`.`fee_type_id` WHERE\r\n        `fee_allocation`.`student_id` = " . $db->escape($enrollID) . " AND `fee_allocation`.`session_id` = " . $db->escape(get_session_id()) . " ORDER BY `fee_allocation`.`group_id` ASC, `fees_type`.`id` ASC";
        $student = array();
        $r = $db->query($sql)->result_array();
        foreach ($r as $key => $value) {
            if ($value['system'] == 1) {
                $value['amount'] = $value['prev_due'];
            }
            $student[] = $value;
        }
        return $student;
    }
    public function getInvoiceBasic($enrollID = '')
    {
        $sessionID = get_session_id();
        $builder->select('s.id,s.register_no,e.branch_id,e.id as enroll_id,s.first_name,s.last_name,s.email as student_email,s.current_address as student_address,c.name as class_name,b.school_name,b.email as school_email,b.mobileno as school_mobileno,b.address as school_address,p.father_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->join('parent as p', 'p.id = s.parent_id', 'left');
        $builder->join('branch as b', 'b.id = e.branch_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('e.session_id', $sessionID);
        return $builder->get()->row_array();
    }
    public function getStudentFeeDeposit($allocationID, $typeID)
    {
        $sqlDeposit = "SELECT IFNULL(SUM(`amount`), '0.00') as `total_amount`, IFNULL(SUM(`discount`), '0.00') as `total_discount`, IFNULL(SUM(`fine`), '0.00') as `total_fine` FROM `fee_payment_history` WHERE `allocation_id` = " . $db->escape($allocationID) . " AND `type_id` = " . $db->escape($typeID);
        return $db->query($sqlDeposit)->row_array();
    }
    public function getPaymentHistory($allocationID, $groupID)
    {
        $builder->select('h.*,t.name,t.fee_code,pt.name as payvia');
        $builder->from('fee_payment_history as h');
        $builder->join('fees_type as t', 't.id = h.type_id', 'left');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $builder->where('h.allocation_id', $allocationID);
        $builder->order_by('h.id', 'asc');
        return $builder->get()->result_array();
    }
    public function typeSave($data = array())
    {
        $arrayData = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['type_name'], 'fee_code' => strtolower(str_replace(' ', '-', $data['type_name'])), 'description' => $data['description']);
        if (!isset($data['type_id'])) {
            $builder->insert('fees_type', $arrayData);
        } else {
            $builder->where('id', $data['type_id']);
            $builder->update('fees_type', $arrayData);
        }
    }
    // add partly of the fee
    public function add_fees($data = array(), $id = '')
    {
        $total_due = get_type_name_by_id('fee_invoice', $id, 'total_due');
        $payment_amount = $data['amount'];
        if ($payment_amount <= $total_due && $payment_amount > 0) {
            $arrayHistory = array('fee_invoice_id' => $id, 'collect_by' => get_user_stamp(), 'remarks' => $data['remarks'], 'method' => $data['method'], 'amount' => $payment_amount, 'date' => date("Y-m-d"), 'session_id' => get_session_id());
            $builder->insert('payment_history', $arrayHistory);
            if ($total_due <= $payment_amount) {
                $builder->where('id', $id);
                $this->db->table('fee_invoice', array('status' => 2))->update();
            } else {
                $builder->where('id', $id);
                $this->db->table('fee_invoice', array('status' => 1))->update();
            }
            $builder->where('id', $id);
            $builder->set('total_paid', 'total_paid + ' . $payment_amount, false);
            $builder->set('total_due', 'total_due - ' . $payment_amount, false);
            $builder->update('fee_invoice');
            // send payment confirmation sms
            $arrayHistory['student_id'] = $data['student_id'];
            $arrayHistory['timestamp'] = date("Y-m-d");
            $this->smsModel->send_sms($arrayHistory, 2);
            return true;
        } else {
            return false;
        }
    }
    public function getInvoiceList($class_id = '', $section_id = '', $branch_id = '')
    {
        $builder->select('e.id as enroll_id,e.student_id,e.roll,e.id as enroll_id,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name');
        $builder->from('fee_allocation as fa');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id = fa.session_id', 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->where('fa.branch_id', $branch_id);
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('e.class_id', $class_id);
        if ($section_id != 'all') {
            $builder->where('e.section_id', $section_id);
        }
        $builder->group_by('fa.student_id');
        $builder->order_by('e.id', 'asc');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['feegroup'] = $this->getfeeGroup($value['enroll_id']);
        }
        return $result;
    }
    public function getDueInvoiceList($class_id = '', $section_id = '', $feegroup_id = '', $fee_feetype_id = '')
    {
        $sql = "SELECT IFNULL(SUM(h.amount), '0') as `total_amount`, IFNULL(SUM(h.discount), '0') as `total_discount`, gd.amount as `full_amount`, fa.prev_due as `prev_due`, gd.`due_date`, e.student_id, e.id as enroll_id,e.roll, s.first_name, s.last_name, s.register_no, s.mobileno, c.name as `class_name`, se.name as `section_name` FROM fee_allocation as fa LEFT JOIN fee_payment_history as h ON h.allocation_id = fa.id and h.type_id = " . $db->escape($fee_feetype_id) . " INNER JOIN fee_groups_details as gd ON gd.fee_groups_id = fa.group_id and gd.fee_type_id = " . $db->escape($fee_feetype_id) . " INNER JOIN\r\n        enroll as e ON e.id = fa.student_id LEFT JOIN student as s ON s.id = e.student_id LEFT JOIN class as c ON c.id = e.class_id LEFT JOIN section as se ON se.id = e.section_id WHERE\r\n        fa.group_id = " . $db->escape($feegroup_id) . " AND fa.session_id = " . $db->escape(get_session_id()) . " AND e.class_id = " . $db->escape($class_id);
        if ($section_id != 'all') {
            $sql .= " AND e.section_id = " . $db->escape($section_id);
        }
        $sql .= " GROUP BY  fa.student_id ORDER BY e.id ASC";
        $result = $db->query($sql)->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['feegroup'] = $this->getfeeGroup($value['enroll_id']);
        }
        return $result;
    }
    public function getDueReport($class_id = '', $section_id = '')
    {
        $builder->select('fa.id as allocation_id,sum(gd.amount + fa.prev_due) as total_fees,e.id as enroll_id,e.roll,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name');
        $builder->from('fee_allocation as fa');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = fa.group_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id = ' . $db->escape(get_session_id()), 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('e.class_id', $class_id);
        if (!empty($section_id)) {
            $builder->where('e.section_id', $section_id);
        }
        $builder->group_by('fa.student_id');
        $builder->order_by('e.roll', 'asc');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['payment'] = $this->getPaymentDetails($value['enroll_id']);
        }
        return $result;
    }
    public function getPaymentDetails($student_id = '')
    {
        $builder->select('IFNULL(SUM(amount), 0) as total_paid, IFNULL(SUM(discount), 0) as total_discount, IFNULL(SUM(fine), 0) as total_fine');
        $builder->from('fee_allocation');
        $builder->join('fee_payment_history', 'fee_payment_history.allocation_id = fee_allocation.id', 'left');
        $builder->where('fee_allocation.student_id', $student_id);
        return $builder->get()->row_array();
    }
    public function getStuPaymentHistory($classID = '', $SectionID = '', $paymentVia = '', $start = '', $end = '', $branchID = '', $onlyFine = false)
    {
        $builder->select('h.*,ft.name as type_name,e.student_id,e.roll,s.first_name,s.last_name,s.register_no,s.mobileno,c.name as class_name,se.name as section_name,pt.name as pay_via');
        $builder->from('fee_payment_history as h');
        $builder->join('fee_allocation as fa', 'fa.id = h.allocation_id', 'inner');
        $builder->join('fees_type as ft', 'ft.id = h.type_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id', 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $this->db->table('e.session_id', get_session_id())->where();
        $builder->where('h.date  >=', $start);
        $builder->where('h.date <=', $end);
        $builder->where('e.branch_id', $branchID);
        if ($onlyFine == true) {
            $builder->where('h.fine !=', 0);
        }
        if (!empty($classID)) {
            $builder->where('e.class_id', $classID);
        }
        if (!empty($SectionID)) {
            $builder->where('e.section_id', $SectionID);
        }
        if ($paymentVia != 'all') {
            if ($paymentVia == 'online') {
                $builder->where('h.collect_by', 'online');
            } else {
                $builder->where('h.collect_by !=', 'online');
            }
        }
        $builder->order_by('h.id', 'asc');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function getStuPaymentReport($classID = '', $sectionID = '', $enrollID = '', $typeID = '', $start = '', $end = '', $branchID = '')
    {
        $builder->select('h.*,gd.due_date,ft.name as type_name,e.student_id,e.roll,s.first_name,s.last_name,s.register_no,pt.name as pay_via');
        $builder->from('fee_payment_history as h');
        $builder->join('fee_allocation as fa', 'fa.id = h.allocation_id', 'inner');
        $builder->join('fees_type as ft', 'ft.id = h.type_id', 'left');
        $builder->join('fee_groups_details as gd', 'gd.fee_groups_id = fa.group_id and gd.fee_type_id = h.type_id', 'left');
        $builder->join('enroll as e', 'e.id = fa.student_id and e.session_id =  ' . $db->escape(get_session_id()), 'inner');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('payment_types as pt', 'pt.id = h.pay_via', 'left');
        $this->db->table('fa.session_id', get_session_id())->where();
        $builder->where('h.date >=', $start);
        $builder->where('h.date <=', $end);
        $builder->where('e.branch_id', $branchID);
        $builder->where('e.class_id', $classID);
        if (!empty($typeID)) {
            $typeID = explode("|", $typeID);
            $builder->where('h.type_id', $typeID[1]);
        }
        if (!empty($enrollID)) {
            $builder->where('e.id', $enrollID);
        }
        $builder->where('e.section_id', $sectionID);
        $builder->order_by('h.id', 'asc');
        $result = $builder->get()->result_array();
        return $result;
    }
    public function getfeeGroup($studentID = '')
    {
        $builder->select('g.name');
        $builder->from('fee_allocation as fa');
        $builder->join('fee_groups as g', 'g.id = fa.group_id', 'inner');
        $builder->where('fa.student_id', $studentID);
        $this->db->table('fa.session_id', get_session_id())->where();
        return $builder->get()->result_array();
    }
    public function reminderSave($data = array())
    {
        $arrayData = array('frequency' => $data['frequency'], 'days' => $data['days'], 'student' => isset($data['chk_student']) ? 1 : 0, 'guardian' => isset($data['chk_guardian']) ? 1 : 0, 'message' => $data['message'], 'dlt_template_id' => $data['dlt_template_id'], 'branch_id' => $data['branch_id']);
        if (!isset($data['reminder_id'])) {
            $builder->insert('fees_reminder', $arrayData);
        } else {
            $builder->where('id', $data['reminder_id']);
            $builder->update('fees_reminder', $arrayData);
        }
    }
    public function getFeeReminderByDate($date = '', $branch_id = '')
    {
        $builder->select('fee_groups_details.*,fees_type.name');
        $builder->from('fee_groups_details');
        $builder->join('fees_type', 'fees_type.id = fee_groups_details.fee_type_id', 'inner');
        $builder->where('fee_groups_details.due_date', $date);
        $builder->where('fees_type.branch_id', $branch_id);
        $builder->order_by('fee_groups_details.id', 'asc');
        return $builder->get()->result_array();
    }
    public function getStudentsListReminder($groupID = '', $typeID = '')
    {
        $sessionID = get_type_name_by_id('global_settings', 1, 'session_id');
        $builder->select('a.id as allocation_id,CONCAT_WS(" ",s.first_name, s.last_name) as child_name,s.mobileno as child_mobileno,pr.name as guardian_name,pr.mobileno as guardian_mobileno');
        $builder->from('fee_allocation as a');
        $builder->join('student as s', 's.id = a.student_id', 'inner');
        $builder->join('parent as pr', 'pr.id = s.parent_id', 'left');
        $builder->where('a.group_id', $groupID);
        $builder->where('a.session_id', $sessionID);
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['payment'] = $this->getPaymentDetailsByTypeID($value['allocation_id'], $typeID);
        }
        return $result;
    }
    public function getPaymentDetailsByTypeID($allocationID, $typeID)
    {
        $builder->select('IFNULL(SUM(amount), 0) as total_paid, IFNULL(SUM(discount), 0) as total_discount');
        $builder->from('fee_payment_history');
        $builder->where('allocation_id', $allocationID);
        $builder->where('type_id', $typeID);
        return $builder->get()->row_array();
    }
    public function depositAmountVerify($amount = '')
    {
        if ($amount != "") {
            $typeID = $this->request->getPost('fees_type');
            if (empty($typeID)) {
                return true;
            }
            $feesType = explode("|", $typeID);
            $remainAmount = $this->getBalance($feesType[0], $feesType[1]);
            if ($remainAmount['balance'] < $amount) {
                $this->form_validation->set_message('deposit_verify', '{field} cannot be greater than the remaining.');
                return false;
            } else {
                return true;
            }
        }
        return true;
    }
    public function getBalance($allocationID, $typeID)
    {
        $groupsID = get_type_name_by_id('fee_allocation', $allocationID, 'group_id');
        $systemFeesType = get_type_name_by_id('fees_type', $typeID, 'system');
        if ($systemFeesType == 1) {
            $totalAmount = get_type_name_by_id('fee_allocation', $allocationID, 'prev_due');
        } else {
            $totalAmount = $db->table('fee_groups_details')->get('fee_groups_details')->row_array();
            $totalAmount = $totalAmount['amount'];
        }
        $builder->select('IFNULL(sum(p.amount), 0) as total_amount,IFNULL(sum(p.discount), 0) as total_discount,IFNULL(sum(p.fine), 0) as total_fine');
        $builder->from('fee_payment_history as p');
        $builder->where('p.allocation_id', $allocationID);
        $builder->where('p.type_id', $typeID);
        $paid = $builder->get()->row_array();
        $balance = $totalAmount - ($paid['total_amount'] + $paid['total_discount']);
        $total_fine = $paid['total_fine'];
        return array('balance' => $balance, 'fine' => $total_fine);
    }
    // voucher transaction save function
    public function saveTransaction($data = array(), $payment_historyID = '')
    {
        $branchID = $this->applicationModel->get_branch_id();
        $accountID = $data['account_id'];
        $date = $data['date'];
        $amount = $data['amount'];
        // get the current balance of the selected account
        $qbal = $this->app_lib->get_table('accounts', $accountID, true);
        $cbal = $qbal['balance'];
        $bal = $cbal + $amount;
        // query system voucher head / insert
        $arrayHead = array('name' => 'Student Fees Collection', 'type' => 'income', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayHead);
        $query = $builder->get('voucher_head');
        if ($query->num_rows() > 0) {
            $voucher_headID = $query->row()->id;
        } else {
            $builder->insert('voucher_head', $arrayHead);
            $voucher_headID = $builder->insert_id();
        }
        // query system transactions / insert
        $arrayTransactions = array('account_id' => $accountID, 'voucher_head_id' => $voucher_headID, 'type' => 'deposit', 'system' => 1, 'date' => date("Y-m-d", strtotime($date)), 'branch_id' => $branchID);
        $builder->where($arrayTransactions);
        $query = $builder->get('transactions');
        if ($query->num_rows() == 1) {
            $transactionsID = $query->row()->id;
            $builder->set('amount', 'amount+' . $amount, false);
            $builder->set('cr', 'cr+' . $amount, false);
            $builder->set('bal', $bal);
            $builder->where('id', $transactionsID);
            $builder->update('transactions');
        } else {
            $arrayTransactions['ref'] = '';
            $arrayTransactions['amount'] = $amount;
            $arrayTransactions['dr'] = 0;
            $arrayTransactions['cr'] = $amount;
            $arrayTransactions['bal'] = $bal;
            $arrayTransactions['pay_via'] = 5;
            $arrayTransactions['description'] = date("d-M-Y", strtotime($date)) . " Total Fees Collection";
            $builder->insert('transactions', $arrayTransactions);
            $transactionsID = $builder->insert_id();
        }
        $builder->where('id', $accountID);
        $this->db->table('accounts', array('balance' => $bal))->update();
        // insert transactions links details in DB
        $arrayLinkDetails = array('payment_id' => $payment_historyID, 'transactions_id' => $transactionsID);
        $builder->insert('transactions_links_details', $arrayLinkDetails);
    }
    public function carryForwardDue($data = array())
    {
        $type_name = "Previous Session Balance";
        $group_name = "Due Record";
        $branchID = $data['branch_id'];
        $sessionID = $data['session_id'];
        $fee_type_id = 0;
        $fee_group_id = 0;
        $arrayType = array('name' => $type_name, 'branch_id' => $branchID, 'system' => 1);
        $fee_type_exists = $this->checkExistsData('fees_type', $arrayType);
        if (!$fee_type_exists) {
            $arrayType['fee_code'] = 'previous-balance';
            $builder->insert('fees_type', $arrayType);
            $fee_type_id = $builder->insert_id();
        } else {
            $fee_type_id = $fee_type_exists->id;
        }
        $arrayGroup = array('name' => $group_name, 'branch_id' => $branchID, 'session_id' => $sessionID, 'system' => 1);
        $fee_group_exists = $this->checkExistsData('fee_groups', $arrayGroup);
        if (!$fee_group_exists) {
            $builder->insert('fee_groups', $arrayGroup);
            $fee_group_id = $builder->insert_id();
        } else {
            $fee_group_id = $fee_group_exists->id;
        }
        $arrayGroupsDetails = array('fee_groups_id' => $fee_group_id, 'fee_type_id' => $fee_type_id);
        $fee_group_details_exists = $this->checkExistsData('fee_groups_details', $arrayGroupsDetails);
        if (!$fee_group_details_exists) {
            $arrayGroupsDetails['amount'] = 0;
            $arrayGroupsDetails['due_date'] = $data['due_date'];
            $builder->insert('fee_groups_details', $arrayGroupsDetails);
        }
        $arrayAllocation = array('student_id' => $data['student_id'], 'group_id' => $fee_group_id, 'branch_id' => $branchID, 'session_id' => $sessionID);
        $fee_allocation_exists = $this->checkExistsData('fee_allocation', $arrayAllocation);
        if (!$fee_allocation_exists) {
            $arrayAllocation['prev_due'] = $data['prev_due'];
            $builder->insert('fee_allocation', $arrayAllocation);
        } else {
            $arrayAllocation['prev_due'] = $data['prev_due'];
            $builder->where('id', $fee_allocation_exists->id);
            $builder->update('fee_allocation', $arrayAllocation);
        }
    }
    function checkExistsData($table = '', $data = array())
    {
        $builder->where($data);
        $query = $builder->get($table);
        if ($query->num_rows() > 0) {
            return $query->row();
        } else {
            return false;
        }
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/UserroleModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class UserroleModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    public function getTeachersList($branchID = '')
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != "6" and login_credential.role != "7"', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        if ($branchID != "") {
            $builder->where('staff.branch_id', $branchID);
        }
        $builder->where('login_credential.role', 3);
        $builder->where('login_credential.active', 1);
        $builder->order_by('staff.id', 'ASC');
        return $builder->get()->getResult();
    }
    // get route information by route id and vehicle id
    public function getRouteDetails($routeID, $vehicleID)
    {
        $builder->select('ta.route_id,ta.stoppage_id,ta.vehicle_id,r.name as route_name,r.start_place,r.stop_place,sp.stop_position,sp.stop_time,sp.route_fare,v.vehicle_no,v.driver_name,v.driver_phone');
        $builder->from('transport_assign as ta');
        $builder->join('transport_route as r', 'r.id = ta.route_id', 'left');
        $builder->join('transport_vehicle as v', 'v.id = ta.vehicle_id', 'left');
        $builder->join('transport_stoppage as sp', 'sp.id = ta.stoppage_id', 'left');
        $builder->where('ta.route_id', $routeID);
        $builder->where('ta.vehicle_id', $vehicleID);
        return $builder->get()->row_array();
    }
    public function getAssignList($branch_id = '')
    {
        $builder->select('ta.route_id,ta.stoppage_id,ta.branch_id,r.name,r.start_place,r.stop_place,sp.stop_position,sp.stop_time,sp.route_fare');
        $builder->from('transport_assign as ta');
        $builder->join('transport_route as r', 'r.id = ta.route_id', 'left');
        $builder->join('transport_stoppage as sp', 'sp.id = ta.stoppage_id', 'left');
        $this->db->group_by(array('ta.route_id', 'ta.stoppage_id', 'ta.branch_id'));
        if (!empty($branch_id)) {
            $builder->where('ta.branch_id', $branch_id);
        }
        return $builder->get()->result_array();
    }
    // get vehicle list by route_id
    public function getVehicleList($route_id)
    {
        $builder->select('ta.vehicle_id,v.vehicle_no');
        $builder->from('transport_assign as ta');
        $builder->join('transport_vehicle as v', 'v.id = ta.vehicle_id', 'left');
        $builder->where('ta.route_id', $route_id);
        $vehicles = $builder->get()->getResult();
        $name_list = '';
        foreach ($vehicles as $row) {
            $name_list .= '- ' . $row->vehicle_no . '<br>';
        }
        return $name_list;
    }
    // get hostel information by hostel id and room id
    public function getHostelDetails($hostelID, $roomID)
    {
        $builder->select('h.name as hostel_name,h.watchman,h.category_id,h.address,hc.name as hcategory_name,rc.name as rcategory_name,hr.name as room_name,hr.no_beds,hr.bed_fee');
        $builder->from('hostel as h');
        $builder->join('hostel_category as hc', 'hc.id = h.category_id', 'left');
        $builder->join('hostel_room as hr', 'hr.hostel_id = h.id', 'left');
        $builder->join('hostel_category as rc', 'rc.id = hr.category_id', 'left');
        $builder->where('hr.id', $roomID);
        $builder->where('h.id', $hostelID);
        return $builder->get()->row();
    }
    // check attendance by staff id and date
    public function get_attendance_by_date($enroll_id, $date)
    {
        $sql = "SELECT `student_attendance`.* FROM `student_attendance` WHERE `enroll_id` = " . $db->escape($enroll_id) . " AND `date` = " . $db->escape($date);
        return $db->query($sql)->row_array();
    }
    public function getStudentDetails()
    {
        $sessionID = get_session_id();
        if (is_student_loggedin()) {
            $enrollID = $this->session->userdata('enrollID');
        } elseif (is_parent_loggedin()) {
            $enrollID = $this->session->userdata('enrollID');
        }
        $builder->select('CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.email as student_email,s.register_no,e.branch_id,e.id as enroll_id,e.student_id,s.hostel_id,s.room_id,s.route_id,s.vehicle_id,e.class_id,e.section_id,c.name as class_name,se.name as section_name,b.school_name,b.email as school_email,b.mobileno as school_mobileno,b.address as school_address');
        $builder->from('enroll as e');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('branch as b', 'b.id = e.branch_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('e.session_id', $sessionID);
        return $builder->get()->row_array();
    }
    public function getHomeworkList($enrollID = '')
    {
        $builder->select('homework.*,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.register_no,e.student_id, e.roll,subject.name as subject_name,class.name as class_name,section.name as section_name,he.id as ev_id,he.status as ev_status,he.remark as ev_remarks,he.rank,hs.message,hs.enc_name,hs.file_name');
        $builder->from('homework');
        $builder->join('enroll as e', 'e.class_id=homework.class_id and e.section_id = homework.section_id and e.session_id = homework.session_id', 'inner');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('homework_evaluation as he', 'he.homework_id = homework.id and he.student_id = e.student_id', 'left');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('homework_submit as hs', 'hs.homework_id = homework.id and hs.student_id = e.student_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('homework.status', 0);
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->group_by('homework.id');
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    public function getUserDetails()
    {
        if (is_student_loggedin()) {
            $studentID = get_loggedin_user_id();
            $builder->select('*,CONCAT_WS(" ",first_name, last_name) as name, current_address as address');
            $builder->from('student');
        } elseif (is_parent_loggedin()) {
            $builder->select('*');
            $builder->from('parent');
        }
        $this->db->table('id', get_loggedin_user_id())->where();
        return $builder->get()->row_array();
    }
    public function examListDT($postData, $currency_symbol = '')
    {
        $response = array();
        $sessionID = get_session_id();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'DESC' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`online_exam`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`online_exam`.`title` like '%" . $searchValue . "%' OR `online_exam`.`exam_start` like '%" . $searchValue . "%' OR `online_exam`.`exam_end` like '%" . $searchValue . "%') ";
        }
        $enrollID = $this->session->userdata('enrollID');
        $enroll = $db->table('enroll')->get('enroll')->row();
        $branch_id = $db->escape(get_loggedin_branch_id());
        $search_arr[] = " `online_exam`.`branch_id` = {$branch_id} AND `online_exam`.`class_id` = " . $db->escape($enroll->class_id);
        // order
        $column_order[] = '`online_exam`.`title`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '';
        $column_order[] = '`questions_qty`';
        $column_order[] = '`online_exam`.`exam_start`';
        $column_order[] = '`online_exam`.`exam_end`';
        $column_order[] = '`online_exam`.`duration`';
        if (count($search_arr) > 0) {
            $searchQuery = implode(" AND ", $search_arr);
        }
        // Total number of records without filtering
        $totalRecords = 0;
        // Total number of record with filtering
        $sql = "SELECT `section_id` FROM `online_exam` WHERE `publish_status` = '1'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $count = 0;
        foreach ($records as $key => $value) {
            $array = json_decode($value->section_id, true);
            if (in_array($enroll->section_id, $array)) {
                $count++;
            }
        }
        $totalRecordwithFilter = $count;
        // Fetch records
        $studentID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, (SELECT COUNT(`id`) FROM `online_exam_payment` WHERE `online_exam_payment`.`exam_id`=`online_exam`.`id` AND `online_exam_payment`.`student_id`= {$studentID}) as `payment_status`,`branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `publish_status` = '1'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        foreach ($records as $record) {
            $array = json_decode($record->section_id, true);
            if (in_array($enroll->section_id, $array)) {
                $startTime = strtotime($record->exam_start);
                $endTime = strtotime($record->exam_end);
                $now = strtotime("now");
                $examSubmitted = $this->onlineexam_model->getStudentSubmitted($record->id);
                $status = '';
                $labelmode = '';
                $takeExam = 0;
                // exam status
                if ($record->publish_result == 1 && !empty($examSubmitted)) {
                    $status = translate('result_published');
                    $labelmode = 'label-success-custom';
                } else if (!empty($examSubmitted)) {
                    $status = '<i class="far fa-check fa-fw"></i> ' . translate('already_submitted');
                    $labelmode = 'label-success-custom';
                } elseif ($startTime <= $now && $now <= $endTime) {
                    $status = translate('live');
                    $labelmode = 'label-warning-custom';
                    $takeExam = 1;
                } elseif ($startTime >= $now && $now <= $endTime) {
                    $status = '<i class="far fa-clock"></i> ' . translate('waiting');
                    $labelmode = 'label-info-custom';
                } elseif ($now >= $endTime) {
                    $status = translate('closed');
                    $labelmode = 'label-danger-custom';
                }
                $row = array();
                $action = "";
                $paymentStatus = 0;
                if ($record->exam_type == 1 && $record->payment_status == 0) {
                    $paymentStatus = 1;
                }
                if ($takeExam == 1) {
                    $url = base_url('userrole/onlineexam_take/' . $record->id);
                    if ($paymentStatus == 1) {
                        $action .= '<a href="javascript:void(0);" onclick="paymentModal(' . $db->escape($record->id) . ')" class="btn btn-circle btn-default"> <i class="far fa-credit-card"></i> ' . translate('pay') . " & " . translate('take_exam') . '</a>';
                    } else {
                        $action .= '<a href="' . $url . '" class="btn btn-circle btn-default"> <i class="far fa-users-between-lines"></i> ' . translate('take_exam') . '</a>';
                    }
                } else if ($record->publish_result == 1 && !empty($examSubmitted)) {
                    $action .= '<a href="javascript:void(0);" onclick="getStudentResult(' . $db->escape($record->id) . ')" class="btn btn-circle btn-default"> <i class="far fa-users-viewfinder"></i> ' . translate('view') . " " . translate('result') . '</a>';
                } else {
                    $action .= '<a href="javascript:void(0);" disabled class="btn btn-circle btn-default"> <i class="far fa-users-between-lines"></i> ' . translate('take_exam') . '</a>';
                }
                $row[] = $count++;
                $row[] = $record->title;
                $row[] = $record->class_name . " (" . $this->onlineexam_model->getSectionDetails($record->section_id) . ")";
                $row[] = $this->onlineexam_model->getSubjectDetails($record->subject_id);
                $row[] = $record->questions_qty;
                $row[] = _d($record->exam_start) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_start)) . "</p>";
                $row[] = _d($record->exam_end) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_end)) . "</p>";
                $row[] = $record->duration;
                $row[] = $record->exam_type == 0 ? translate('free') : $currency_symbol . $record->fee;
                $row[] = "<span class='label " . $labelmode . " '>" . $status . "</span>";
                $row[] = $action;
                $data[] = $row;
            }
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getExamDetails($onlineexamID)
    {
        $student = $this->getStudentDetails();
        $classID = $student['class_id'];
        $sectionID = $student['section_id'];
        $onlineexamID = $db->escape($onlineexamID);
        $sessionID = $db->escape(get_session_id());
        $branchID = $db->escape(get_loggedin_branch_id());
        $studentID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`,(SELECT COUNT(`id`) FROM `online_exam_payment` WHERE `online_exam_payment`.`exam_id`=`online_exam`.`id` AND `online_exam_payment`.`student_id`={$studentID}) as `payment_status`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = {$sessionID} AND `online_exam`.`publish_status` = '1' AND `online_exam`.`id` = {$onlineexamID} AND `online_exam`.`branch_id` = {$branchID} AND `online_exam`.`class_id` = {$classID}";
        $records = $db->query($sql)->row();
        $sectionList = json_decode($records->section_id, true);
        if (in_array($sectionID, $sectionList)) {
            return $records;
        } else {
            return [];
        }
    }
    public function getOfflinePaymentsList($where = array(), $single = false)
    {
        $student = $this->getStudentDetails();
        $builder->select('op.*,CONCAT_WS(" ",student.first_name, student.last_name) as fullname,student.email,student.mobileno,student.register_no,class.name as class_name,section.name as section_name,branch.name as branchname');
        $builder->from('offline_fees_payments as op');
        $builder->join('enroll', 'enroll.id = op.student_enroll_id', 'left');
        $builder->join('branch', 'branch.id = enroll.branch_id', 'left');
        $builder->join('student', 'student.id = enroll.student_id', 'left');
        $builder->join('class', 'class.id = enroll.class_id', 'left');
        $builder->join('section', 'section.id = enroll.section_id', 'left');
        $builder->where('op.student_enroll_id', $student['enroll_id']);
        if (!empty($where)) {
            $builder->where($where);
        }
        if ($single == true) {
            $result = $builder->get()->row_array();
        } else {
            $builder->order_by('op.id', 'ASC');
            $result = $builder->get()->getResult();
        }
        return $result;
    }
    public function getOfflinePaymentsConfig()
    {
        $branchID = get_loggedin_branch_id();
        $row = $db->table('branch')->get('branch')->row()->offline_payments;
        return $row;
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class UserroleModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    public function getTeachersList($branchID = '')
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != "6" and login_credential.role != "7"', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        if ($branchID != "") {
            $builder->where('staff.branch_id', $branchID);
        }
        $builder->where('login_credential.role', 3);
        $builder->where('login_credential.active', 1);
        $builder->order_by('staff.id', 'ASC');
        return $builder->get()->getResult();
    }
    // get route information by route id and vehicle id
    public function getRouteDetails($routeID, $vehicleID)
    {
        $builder->select('ta.route_id,ta.stoppage_id,ta.vehicle_id,r.name as route_name,r.start_place,r.stop_place,sp.stop_position,sp.stop_time,sp.route_fare,v.vehicle_no,v.driver_name,v.driver_phone');
        $builder->from('transport_assign as ta');
        $builder->join('transport_route as r', 'r.id = ta.route_id', 'left');
        $builder->join('transport_vehicle as v', 'v.id = ta.vehicle_id', 'left');
        $builder->join('transport_stoppage as sp', 'sp.id = ta.stoppage_id', 'left');
        $builder->where('ta.route_id', $routeID);
        $builder->where('ta.vehicle_id', $vehicleID);
        return $builder->get()->row_array();
    }
    public function getAssignList($branch_id = '')
    {
        $builder->select('ta.route_id,ta.stoppage_id,ta.branch_id,r.name,r.start_place,r.stop_place,sp.stop_position,sp.stop_time,sp.route_fare');
        $builder->from('transport_assign as ta');
        $builder->join('transport_route as r', 'r.id = ta.route_id', 'left');
        $builder->join('transport_stoppage as sp', 'sp.id = ta.stoppage_id', 'left');
        $this->db->group_by(array('ta.route_id', 'ta.stoppage_id', 'ta.branch_id'));
        if (!empty($branch_id)) {
            $builder->where('ta.branch_id', $branch_id);
        }
        return $builder->get()->result_array();
    }
    // get vehicle list by route_id
    public function getVehicleList($route_id)
    {
        $builder->select('ta.vehicle_id,v.vehicle_no');
        $builder->from('transport_assign as ta');
        $builder->join('transport_vehicle as v', 'v.id = ta.vehicle_id', 'left');
        $builder->where('ta.route_id', $route_id);
        $vehicles = $builder->get()->getResult();
        $name_list = '';
        foreach ($vehicles as $row) {
            $name_list .= '- ' . $row->vehicle_no . '<br>';
        }
        return $name_list;
    }
    // get hostel information by hostel id and room id
    public function getHostelDetails($hostelID, $roomID)
    {
        $builder->select('h.name as hostel_name,h.watchman,h.category_id,h.address,hc.name as hcategory_name,rc.name as rcategory_name,hr.name as room_name,hr.no_beds,hr.bed_fee');
        $builder->from('hostel as h');
        $builder->join('hostel_category as hc', 'hc.id = h.category_id', 'left');
        $builder->join('hostel_room as hr', 'hr.hostel_id = h.id', 'left');
        $builder->join('hostel_category as rc', 'rc.id = hr.category_id', 'left');
        $builder->where('hr.id', $roomID);
        $builder->where('h.id', $hostelID);
        return $builder->get()->row();
    }
    // check attendance by staff id and date
    public function get_attendance_by_date($enroll_id, $date)
    {
        $sql = "SELECT `student_attendance`.* FROM `student_attendance` WHERE `enroll_id` = " . $db->escape($enroll_id) . " AND `date` = " . $db->escape($date);
        return $db->query($sql)->row_array();
    }
    public function getStudentDetails()
    {
        $sessionID = get_session_id();
        if (is_student_loggedin()) {
            $enrollID = $this->session->userdata('enrollID');
        } elseif (is_parent_loggedin()) {
            $enrollID = $this->session->userdata('enrollID');
        }
        $builder->select('CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.email as student_email,s.register_no,e.branch_id,e.id as enroll_id,e.student_id,s.hostel_id,s.room_id,s.route_id,s.vehicle_id,e.class_id,e.section_id,c.name as class_name,se.name as section_name,b.school_name,b.email as school_email,b.mobileno as school_mobileno,b.address as school_address');
        $builder->from('enroll as e');
        $builder->join('student as s', 's.id = e.student_id', 'inner');
        $builder->join('branch as b', 'b.id = e.branch_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->join('section as se', 'se.id = e.section_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('e.session_id', $sessionID);
        return $builder->get()->row_array();
    }
    public function getHomeworkList($enrollID = '')
    {
        $builder->select('homework.*,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.register_no,e.student_id, e.roll,subject.name as subject_name,class.name as class_name,section.name as section_name,he.id as ev_id,he.status as ev_status,he.remark as ev_remarks,he.rank,hs.message,hs.enc_name,hs.file_name');
        $builder->from('homework');
        $builder->join('enroll as e', 'e.class_id=homework.class_id and e.section_id = homework.section_id and e.session_id = homework.session_id', 'inner');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('homework_evaluation as he', 'he.homework_id = homework.id and he.student_id = e.student_id', 'left');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('homework_submit as hs', 'hs.homework_id = homework.id and hs.student_id = e.student_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->where('e.id', $enrollID);
        $builder->where('homework.status', 0);
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->group_by('homework.id');
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    public function getUserDetails()
    {
        if (is_student_loggedin()) {
            $studentID = get_loggedin_user_id();
            $builder->select('*,CONCAT_WS(" ",first_name, last_name) as name, current_address as address');
            $builder->from('student');
        } elseif (is_parent_loggedin()) {
            $builder->select('*');
            $builder->from('parent');
        }
        $this->db->table('id', get_loggedin_user_id())->where();
        return $builder->get()->row_array();
    }
    public function examListDT($postData, $currency_symbol = '')
    {
        $response = array();
        $sessionID = get_session_id();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'DESC' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`online_exam`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`online_exam`.`title` like '%" . $searchValue . "%' OR `online_exam`.`exam_start` like '%" . $searchValue . "%' OR `online_exam`.`exam_end` like '%" . $searchValue . "%') ";
        }
        $enrollID = $this->session->userdata('enrollID');
        $enroll = $db->table('enroll')->get('enroll')->row();
        $branch_id = $db->escape(get_loggedin_branch_id());
        $search_arr[] = " `online_exam`.`branch_id` = {$branch_id} AND `online_exam`.`class_id` = " . $db->escape($enroll->class_id);
        // order
        $column_order[] = '`online_exam`.`title`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '';
        $column_order[] = '`questions_qty`';
        $column_order[] = '`online_exam`.`exam_start`';
        $column_order[] = '`online_exam`.`exam_end`';
        $column_order[] = '`online_exam`.`duration`';
        if (count($search_arr) > 0) {
            $searchQuery = implode(" AND ", $search_arr);
        }
        // Total number of records without filtering
        $totalRecords = 0;
        // Total number of record with filtering
        $sql = "SELECT `section_id` FROM `online_exam` WHERE `publish_status` = '1'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $count = 0;
        foreach ($records as $key => $value) {
            $array = json_decode($value->section_id, true);
            if (in_array($enroll->section_id, $array)) {
                $count++;
            }
        }
        $totalRecordwithFilter = $count;
        // Fetch records
        $studentID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, (SELECT COUNT(`id`) FROM `online_exam_payment` WHERE `online_exam_payment`.`exam_id`=`online_exam`.`id` AND `online_exam_payment`.`student_id`= {$studentID}) as `payment_status`,`branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `publish_status` = '1'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        foreach ($records as $record) {
            $array = json_decode($record->section_id, true);
            if (in_array($enroll->section_id, $array)) {
                $startTime = strtotime($record->exam_start);
                $endTime = strtotime($record->exam_end);
                $now = strtotime("now");
                $examSubmitted = $this->onlineexamModel->getStudentSubmitted($record->id);
                $status = '';
                $labelmode = '';
                $takeExam = 0;
                // exam status
                if ($record->publish_result == 1 && !empty($examSubmitted)) {
                    $status = translate('result_published');
                    $labelmode = 'label-success-custom';
                } else if (!empty($examSubmitted)) {
                    $status = '<i class="far fa-check fa-fw"></i> ' . translate('already_submitted');
                    $labelmode = 'label-success-custom';
                } elseif ($startTime <= $now && $now <= $endTime) {
                    $status = translate('live');
                    $labelmode = 'label-warning-custom';
                    $takeExam = 1;
                } elseif ($startTime >= $now && $now <= $endTime) {
                    $status = '<i class="far fa-clock"></i> ' . translate('waiting');
                    $labelmode = 'label-info-custom';
                } elseif ($now >= $endTime) {
                    $status = translate('closed');
                    $labelmode = 'label-danger-custom';
                }
                $row = array();
                $action = "";
                $paymentStatus = 0;
                if ($record->exam_type == 1 && $record->payment_status == 0) {
                    $paymentStatus = 1;
                }
                if ($takeExam == 1) {
                    $url = base_url('userrole/onlineexam_take/' . $record->id);
                    if ($paymentStatus == 1) {
                        $action .= '<a href="javascript:void(0);" onclick="paymentModal(' . $db->escape($record->id) . ')" class="btn btn-circle btn-default"> <i class="far fa-credit-card"></i> ' . translate('pay') . " & " . translate('take_exam') . '</a>';
                    } else {
                        $action .= '<a href="' . $url . '" class="btn btn-circle btn-default"> <i class="far fa-users-between-lines"></i> ' . translate('take_exam') . '</a>';
                    }
                } else if ($record->publish_result == 1 && !empty($examSubmitted)) {
                    $action .= '<a href="javascript:void(0);" onclick="getStudentResult(' . $db->escape($record->id) . ')" class="btn btn-circle btn-default"> <i class="far fa-users-viewfinder"></i> ' . translate('view') . " " . translate('result') . '</a>';
                } else {
                    $action .= '<a href="javascript:void(0);" disabled class="btn btn-circle btn-default"> <i class="far fa-users-between-lines"></i> ' . translate('take_exam') . '</a>';
                }
                $row[] = $count++;
                $row[] = $record->title;
                $row[] = $record->class_name . " (" . $this->onlineexamModel->getSectionDetails($record->section_id) . ")";
                $row[] = $this->onlineexamModel->getSubjectDetails($record->subject_id);
                $row[] = $record->questions_qty;
                $row[] = _d($record->exam_start) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_start)) . "</p>";
                $row[] = _d($record->exam_end) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_end)) . "</p>";
                $row[] = $record->duration;
                $row[] = $record->exam_type == 0 ? translate('free') : $currency_symbol . $record->fee;
                $row[] = "<span class='label " . $labelmode . " '>" . $status . "</span>";
                $row[] = $action;
                $data[] = $row;
            }
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getExamDetails($onlineexamID)
    {
        $student = $this->getStudentDetails();
        $classID = $student['class_id'];
        $sectionID = $student['section_id'];
        $onlineexamID = $db->escape($onlineexamID);
        $sessionID = $db->escape(get_session_id());
        $branchID = $db->escape(get_loggedin_branch_id());
        $studentID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`,(SELECT COUNT(`id`) FROM `online_exam_payment` WHERE `online_exam_payment`.`exam_id`=`online_exam`.`id` AND `online_exam_payment`.`student_id`={$studentID}) as `payment_status`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = {$sessionID} AND `online_exam`.`publish_status` = '1' AND `online_exam`.`id` = {$onlineexamID} AND `online_exam`.`branch_id` = {$branchID} AND `online_exam`.`class_id` = {$classID}";
        $records = $db->query($sql)->row();
        $sectionList = json_decode($records->section_id, true);
        if (in_array($sectionID, $sectionList)) {
            return $records;
        } else {
            return [];
        }
    }
    public function getOfflinePaymentsList($where = array(), $single = false)
    {
        $student = $this->getStudentDetails();
        $builder->select('op.*,CONCAT_WS(" ",student.first_name, student.last_name) as fullname,student.email,student.mobileno,student.register_no,class.name as class_name,section.name as section_name,branch.name as branchname');
        $builder->from('offline_fees_payments as op');
        $builder->join('enroll', 'enroll.id = op.student_enroll_id', 'left');
        $builder->join('branch', 'branch.id = enroll.branch_id', 'left');
        $builder->join('student', 'student.id = enroll.student_id', 'left');
        $builder->join('class', 'class.id = enroll.class_id', 'left');
        $builder->join('section', 'section.id = enroll.section_id', 'left');
        $builder->where('op.student_enroll_id', $student['enroll_id']);
        if (!empty($where)) {
            $builder->where($where);
        }
        if ($single == true) {
            $result = $builder->get()->row_array();
        } else {
            $builder->order_by('op.id', 'ASC');
            $result = $builder->get()->getResult();
        }
        return $result;
    }
    public function getOfflinePaymentsConfig()
    {
        $branchID = get_loggedin_branch_id();
        $row = $db->table('branch')->get('branch')->row()->offline_payments;
        return $row;
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/HomeworkModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class HomeworkModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    public function getList($classID, $sectionID, $subjectID, $branchID)
    {
        $builder->select('homework.*,subject.name as subject_name,class.name as class_name,section.name as section_name,staff.name as creator_name');
        $builder->from('homework');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->join('staff', 'staff.id = homework.created_by', 'left');
        $builder->where('homework.class_id', $classID);
        $builder->where('homework.section_id', $sectionID);
        $builder->where('homework.subject_id', $subjectID);
        $builder->where('homework.branch_id', $branchID);
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    public function evaluationCounter($classID, $sectionID, $homeworkID)
    {
        $countStu = $db->table('enroll')->get('enroll')->num_rows();
        $countEva = $db->table('homework_evaluation')->get('homework_evaluation')->num_rows();
        $incomplete = $countStu - $countEva;
        return array('total' => $countStu, 'complete' => $countEva, 'incomplete' => $incomplete);
    }
    public function getEvaluate($homeworkID)
    {
        $builder->select('homework.*,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.register_no,e.student_id, e.roll,subject.name as subject_name,class.name as class_name,section.name as section_name,he.id as ev_id,he.status as ev_status,he.remark as ev_remarks,he.rank,hs.message,hs.enc_name');
        $builder->from('homework');
        $builder->join('enroll as e', 'e.class_id=homework.class_id and e.section_id = homework.section_id and e.session_id = homework.session_id', 'inner');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('homework_evaluation as he', 'he.homework_id = homework.id and he.student_id = e.student_id', 'left');
        $builder->join('homework_submit as hs', 'hs.homework_id = homework.id and hs.student_id = e.student_id', 'left');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->where('homework.id', $homeworkID);
        if (!is_superadmin_loggedin()) {
            $this->db->table('homework.branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    // save student homework in DB
    public function save($data)
    {
        $status = isset($data['published_later']) ? TRUE : FALSE;
        $sms_notification = isset($data['notification_sms']) ? TRUE : FALSE;
        $arrayHomework = array('branch_id' => $this->applicationModel->get_branch_id(), 'class_id' => $data['class_id'], 'section_id' => $data['section_id'], 'session_id' => get_session_id(), 'subject_id' => $data['subject_id'], 'date_of_homework' => date("Y-m-d", strtotime($data['date_of_homework'])), 'date_of_submission' => date("Y-m-d", strtotime($data['date_of_submission'])), 'description' => $data['homework'], 'created_by' => get_loggedin_user_id(), 'create_date' => date("Y-m-d"), 'status' => $status, 'sms_notification' => $sms_notification);
        if ($status == TRUE) {
            $arrayHomework['schedule_date'] = date("Y-m-d", strtotime($data['schedule_date']));
        } else {
            $arrayHomework['schedule_date'] = null;
        }
        if (isset($data['homework_id'])) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $builder->where('id', $data['homework_id']);
            $builder->update('homework', $arrayHomework);
            $insert_id = $data['homework_id'];
        } else {
            $builder->insert('homework', $arrayHomework);
            $insert_id = $builder->insert_id();
        }
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $uploaddir = './uploads/attachments/homework/';
            if (!is_dir($uploaddir) && !mkdir($uploaddir)) {
                die("Error creating folder {$uploaddir}");
            }
            $fileInfo = pathinfo($_FILES["attachment_file"]["name"]);
            $document = basename($_FILES['attachment_file']['name']);
            $file_name = $insert_id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["attachment_file"]["tmp_name"], $uploaddir . $file_name);
        } else if (isset($data['old_document'])) {
            $document = $data['old_document'];
        } else {
            $document = "";
        }
        $builder->where('id', $insert_id);
        $this->db->table('homework', array('document' => $document))->update();
        //send homework sms notification
        if (isset($data['notification_sms'])) {
            $stuList = $this->applicationModel->getStudentListByClassSection($arrayHomework['class_id'], $arrayHomework['section_id'], $arrayHomework['branch_id']);
            foreach ($stuList as $row) {
                $row['date_of_homework'] = $arrayHomework['date_of_homework'];
                $row['date_of_submission'] = $arrayHomework['date_of_submission'];
                $row['subject_id'] = $arrayHomework['subject_id'];
                $this->sms_model->sendHomework($row);
            }
        }
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class HomeworkModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    public function getList($classID, $sectionID, $subjectID, $branchID)
    {
        $builder->select('homework.*,subject.name as subject_name,class.name as class_name,section.name as section_name,staff.name as creator_name');
        $builder->from('homework');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->join('staff', 'staff.id = homework.created_by', 'left');
        $builder->where('homework.class_id', $classID);
        $builder->where('homework.section_id', $sectionID);
        $builder->where('homework.subject_id', $subjectID);
        $builder->where('homework.branch_id', $branchID);
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    public function evaluationCounter($classID, $sectionID, $homeworkID)
    {
        $countStu = $db->table('enroll')->get('enroll')->num_rows();
        $countEva = $db->table('homework_evaluation')->get('homework_evaluation')->num_rows();
        $incomplete = $countStu - $countEva;
        return array('total' => $countStu, 'complete' => $countEva, 'incomplete' => $incomplete);
    }
    public function getEvaluate($homeworkID)
    {
        $builder->select('homework.*,CONCAT_WS(" ",s.first_name, s.last_name) as fullname,s.register_no,e.student_id, e.roll,subject.name as subject_name,class.name as class_name,section.name as section_name,he.id as ev_id,he.status as ev_status,he.remark as ev_remarks,he.rank,hs.message,hs.enc_name');
        $builder->from('homework');
        $builder->join('enroll as e', 'e.class_id=homework.class_id and e.section_id = homework.section_id and e.session_id = homework.session_id', 'inner');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('homework_evaluation as he', 'he.homework_id = homework.id and he.student_id = e.student_id', 'left');
        $builder->join('homework_submit as hs', 'hs.homework_id = homework.id and hs.student_id = e.student_id', 'left');
        $builder->join('subject', 'subject.id = homework.subject_id', 'left');
        $builder->join('class', 'class.id = homework.class_id', 'left');
        $builder->join('section', 'section.id = homework.section_id', 'left');
        $builder->where('homework.id', $homeworkID);
        if (!is_superadmin_loggedin()) {
            $this->db->table('homework.branch_id', get_loggedin_branch_id())->where();
        }
        $this->db->table('homework.session_id', get_session_id())->where();
        $builder->order_by('homework.id', 'desc');
        return $builder->get()->result_array();
    }
    // save student homework in DB
    public function save($data)
    {
        $status = isset($data['published_later']) ? TRUE : FALSE;
        $sms_notification = isset($data['notification_sms']) ? TRUE : FALSE;
        $arrayHomework = array('branch_id' => $this->applicationModel->get_branch_id(), 'class_id' => $data['class_id'], 'section_id' => $data['section_id'], 'session_id' => get_session_id(), 'subject_id' => $data['subject_id'], 'date_of_homework' => date("Y-m-d", strtotime($data['date_of_homework'])), 'date_of_submission' => date("Y-m-d", strtotime($data['date_of_submission'])), 'description' => $data['homework'], 'created_by' => get_loggedin_user_id(), 'create_date' => date("Y-m-d"), 'status' => $status, 'sms_notification' => $sms_notification);
        if ($status == TRUE) {
            $arrayHomework['schedule_date'] = date("Y-m-d", strtotime($data['schedule_date']));
        } else {
            $arrayHomework['schedule_date'] = null;
        }
        if (isset($data['homework_id'])) {
            if (!is_superadmin_loggedin()) {
                $this->db->table('branch_id', get_loggedin_branch_id())->where();
            }
            $builder->where('id', $data['homework_id']);
            $builder->update('homework', $arrayHomework);
            $insert_id = $data['homework_id'];
        } else {
            $builder->insert('homework', $arrayHomework);
            $insert_id = $builder->insert_id();
        }
        if (isset($_FILES["attachment_file"]) && !empty($_FILES['attachment_file']['name'])) {
            $uploaddir = './uploads/attachments/homework/';
            if (!is_dir($uploaddir) && !mkdir($uploaddir)) {
                die("Error creating folder {$uploaddir}");
            }
            $fileInfo = pathinfo($_FILES["attachment_file"]["name"]);
            $document = basename($_FILES['attachment_file']['name']);
            $file_name = $insert_id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["attachment_file"]["tmp_name"], $uploaddir . $file_name);
        } else if (isset($data['old_document'])) {
            $document = $data['old_document'];
        } else {
            $document = "";
        }
        $builder->where('id', $insert_id);
        $this->db->table('homework', array('document' => $document))->update();
        //send homework sms notification
        if (isset($data['notification_sms'])) {
            $stuList = $this->applicationModel->getStudentListByClassSection($arrayHomework['class_id'], $arrayHomework['section_id'], $arrayHomework['branch_id']);
            foreach ($stuList as $row) {
                $row['date_of_homework'] = $arrayHomework['date_of_homework'];
                $row['date_of_submission'] = $arrayHomework['date_of_submission'];
                $row['subject_id'] = $arrayHomework['subject_id'];
                $this->smsModel->sendHomework($row);
            }
        }
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/CommunicationModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class CommunicationModel extends MYModel
{
    public function __construct()
    {
        parent::__construct();
    }
    // mailbox compose
    public function mailbox_compose($data)
    {
        $id = '';
        $branchID = $this->applicationModel->get_branch_id();
        $sender = loggedin_role_id() . '-' . get_loggedin_user_id();
        $reciever = $data['role_id'] . '-' . $data['receiver_id'];
        $arrayMsg = array('body' => $data['message_body'], 'subject' => $data['subject'], 'sender' => $sender, 'reciever' => $reciever, 'created_at' => date('Y-m-d H:i:s'));
        if ($_FILES["attachment_file"]['name'] != "") {
            // uploading file using codeigniter upload library
            $config['upload_path'] = 'uploads/attachments/';
            $config['encrypt_name'] = true;
            $config['allowed_types'] = '*';
            $this->upload->initialize($config);
            if ($this->upload->do_upload("attachment_file")) {
                $arrayMsg['file_name'] = $this->upload->data('orig_name');
                $arrayMsg['enc_name'] = $this->upload->data('file_name');
            }
        }
        $builder->insert('message', $arrayMsg);
        $id = $builder->insert_id();
        // send new message received email
        $this->db->table(array('branch_id' => $branchID, 'template_id' => 4))->where();
        $getTemplate = $builder->get('email_templates_details')->row_array();
        if ($getTemplate['notified'] == 1) {
            $user = $this->applicationModel->getUserNameByRoleID($data['role_id'], $data['receiver_id']);
            $message = $getTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{recipient}", $user['name'], $message);
            $message = str_replace("{message}", $data['message_body'], $message);
            $message = str_replace("{message_url}", base_url('communication/mailbox/read?type=inbox&id=' . $id), $message);
            $msg_data['recipient'] = $user['email'];
            $msg_data['subject'] = $getTemplate['subject'];
            $msg_data['message'] = $message;
            $this->model("email_model");
            $this->email_model->sendEmail($msg_data);
        }
        return $id;
    }
    public function mark_messages_read($message_id)
    {
        $activeUser = loggedin_role_id() . '-' . get_loggedin_user_id();
        $builder->where('reciever', $activeUser);
        $builder->where('id', $message_id);
        $this->db->table('message', array('read_status' => 1, 'updated_at' => date('Y-m-d H:i:s')))->update();
        $builder->where('sender', $activeUser);
        $builder->where('id', $message_id);
        $this->db->table('message', array('reply_status' => 0, 'updated_at' => date('Y-m-d H:i:s')))->update();
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class CommunicationModel extends MYModel
{
    public function __construct()
    {
        parent::__construct();
    }
    // mailbox compose
    public function mailbox_compose($data)
    {
        $id = '';
        $branchID = $this->applicationModel->get_branch_id();
        $sender = loggedin_role_id() . '-' . get_loggedin_user_id();
        $reciever = $data['role_id'] . '-' . $data['receiver_id'];
        $arrayMsg = array('body' => $data['message_body'], 'subject' => $data['subject'], 'sender' => $sender, 'reciever' => $reciever, 'created_at' => date('Y-m-d H:i:s'));
        if ($_FILES["attachment_file"]['name'] != "") {
            // uploading file using codeigniter upload library
            $config['upload_path'] = 'uploads/attachments/';
            $config['encrypt_name'] = true;
            $config['allowed_types'] = '*';
            $this->upload->initialize($config);
            if ($this->upload->do_upload("attachment_file")) {
                $arrayMsg['file_name'] = $this->upload->data('orig_name');
                $arrayMsg['enc_name'] = $this->upload->data('file_name');
            }
        }
        $builder->insert('message', $arrayMsg);
        $id = $builder->insert_id();
        // send new message received email
        $this->db->table(array('branch_id' => $branchID, 'template_id' => 4))->where();
        $getTemplate = $builder->get('email_templates_details')->row_array();
        if ($getTemplate['notified'] == 1) {
            $user = $this->applicationModel->getUserNameByRoleID($data['role_id'], $data['receiver_id']);
            $message = $getTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{recipient}", $user['name'], $message);
            $message = str_replace("{message}", $data['message_body'], $message);
            $message = str_replace("{message_url}", base_url('communication/mailbox/read?type=inbox&id=' . $id), $message);
            $msg_data['recipient'] = $user['email'];
            $msg_data['subject'] = $getTemplate['subject'];
            $msg_data['message'] = $message;
            $this->model("email_model");
            $this->emailModel->sendEmail($msg_data);
        }
        return $id;
    }
    public function mark_messages_read($message_id)
    {
        $activeUser = loggedin_role_id() . '-' . get_loggedin_user_id();
        $builder->where('reciever', $activeUser);
        $builder->where('id', $message_id);
        $this->db->table('message', array('read_status' => 1, 'updated_at' => date('Y-m-d H:i:s')))->update();
        $builder->where('sender', $activeUser);
        $builder->where('id', $message_id);
        $this->db->table('message', array('reply_status' => 0, 'updated_at' => date('Y-m-d H:i:s')))->update();
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/SaasEmailModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class SaasEmailModel extends Model
{
    protected $db;
    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
        $this->mailer = service('mailer');
    }
    public function sentSchoolRegister($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{login_username}", $data['username'], $message);
            $message = str_replace("{password}", $data['password'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $data['plan_name'], $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{payment_url}", $data['payment_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{date}", $data['date'], $message);
            $message = str_replace("{fees_amount}", $data['fees_amount'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSchoolSubscriptionPaymentConfirmation($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $data['name'], $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{date}", $data['date'], $message);
            $message = str_replace("{paid_amount}", $data['paid_amount'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSubscriptionApprovalConfirmation($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $getPlanDetails = $this->saas_model->getPackageDetails($data['package_id']);
            $getPlanExpiryDate = $this->saas_model->getPlanExpiryDate($data['package_id']);
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{login_username}", $data['login_username'], $message);
            $message = str_replace("{password}", $data['password'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $getPlanDetails->name, $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{subscription_start_date}", $data['subscription_start_date'], $message);
            $message = str_replace("{subscription_expiry_date}", $getPlanExpiryDate, $message);
            $message = str_replace("{paid_amount}", number_format($getPlanDetails->price - $getPlanDetails->discount, 2, '.', ''), $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSchoolSubscriptionReject($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{reject_reason}", $data['reject_reason'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sendEmail($data)
    {
        if ($this->mailer->send($data)) {
            return true;
        } else {
            return false;
        }
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class SaasEmailModel extends Model
{
    protected $db;
    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
        $this->mailer = service('mailer');
    }
    public function sentSchoolRegister($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{login_username}", $data['username'], $message);
            $message = str_replace("{password}", $data['password'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $data['plan_name'], $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{payment_url}", $data['payment_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{date}", $data['date'], $message);
            $message = str_replace("{fees_amount}", $data['fees_amount'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSchoolSubscriptionPaymentConfirmation($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $data['name'], $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{date}", $data['date'], $message);
            $message = str_replace("{paid_amount}", $data['paid_amount'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSubscriptionApprovalConfirmation($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $getPlanDetails = $this->saasModel->getPackageDetails($data['package_id']);
            $getPlanExpiryDate = $this->saasModel->getPlanExpiryDate($data['package_id']);
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{login_username}", $data['login_username'], $message);
            $message = str_replace("{password}", $data['password'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{plan_name}", $getPlanDetails->name, $message);
            $message = str_replace("{invoice_url}", $data['invoice_url'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{subscription_start_date}", $data['subscription_start_date'], $message);
            $message = str_replace("{subscription_expiry_date}", $getPlanExpiryDate, $message);
            $message = str_replace("{paid_amount}", number_format($getPlanDetails->price - $getPlanDetails->discount, 2, '.', ''), $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sentSchoolSubscriptionReject($data)
    {
        $emailTemplate = $db->table('saas_email_templates')->get('saas_email_templates')->row_array();
        if ($emailTemplate['notified'] == 1 && !empty($data['email'])) {
            $message = $emailTemplate['template_body'];
            $message = str_replace("{institute_name}", get_global_setting('institute_name'), $message);
            $message = str_replace("{admin_name}", $data['admin_name'], $message);
            $message = str_replace("{school_name}", $data['school_name'], $message);
            $message = str_replace("{reference_no}", $data['reference_no'], $message);
            $message = str_replace("{reject_reason}", $data['reject_reason'], $message);
            $msgData['branch_id'] = 9999;
            $msgData['recipient'] = $data['email'];
            $msgData['subject'] = $emailTemplate['subject'];
            $msgData['message'] = $message;
            $this->sendEmail($msgData);
        }
    }
    public function sendEmail($data)
    {
        if ($this->mailer->send($data)) {
            return true;
        } else {
            return false;
        }
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/AuthenticationModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class AuthenticationModel extends MYModel
{
    public function __construct()
    {
        $this->db = \Config\Database::connect();
    }

    protected $db;

    // checking login credential
    public function login_credential($username, $password)
    {

        $builder->select('*');
        $builder->from('login_credential');
        $builder->where('username', $username);
        $builder->limit(1);
        $query = $builder->get();
        if ($query->num_rows() == 1) {
            $verify_password = $this->app_lib->verify_password($password, $query->row()->password);
            if ($verify_password) {
                return $query->row();
            }
        }
        return false;
    }
    // password forgotten
    public function lose_password($username)
    {
        if (!empty($username)) {
            $builder->select('*');
            $builder->from('login_credential');
            $builder->where('username', $username);
            $builder->limit(1);
            $query = $builder->get();
            if ($query->num_rows() > 0) {
                $login_credential = $query->row();
                $getUser = $this->applicationModel->getUserNameByRoleID($login_credential->role, $login_credential->user_id);
                $key = hash('sha512', $login_credential->role . $login_credential->username . app_generate_hash());
                $query = $builder->getWhere('reset_password', array('login_credential_id' => $login_credential->id));
                if ($query->num_rows() > 0) {
                    $builder->where('login_credential_id', $login_credential->id);
                    $builder->delete('reset_password');
                }
                $arrayReset = array('key' => $key, 'login_credential_id' => $login_credential->id, 'username' => $login_credential->username);
                $builder->insert('reset_password', $arrayReset);
                // send email for forgot password
                $this->model('email_model');
                $arrayData = array('role' => $login_credential->role, 'branch_id' => $getUser['branch_id'], 'username' => $login_credential->username, 'name' => $getUser['name'], 'reset_url' => base_url('authentication/pwreset?key=' . $key), 'email' => $getUser['email']);
                $this->email_model->sentForgotPassword($arrayData);
                return true;
            }
        }
        return false;
    }
    public function urlaliasToBranch($url_alias)
    {
        $saasExisting = $this->app_lib->isExistingAddon('saas');
        if ($saasExisting && $this->db->table_exists("custom_domain")) {
            $getDomain = $this->getCurrentDomain();
            if (!empty($getDomain)) {
                return $getDomain->school_id;
            }
        }
        $get = $db->table('front_cms_setting')->get('front_cms_setting')->row_array();
        if (empty($url_alias) || empty($get)) {
            return null;
        } else {
            return $get['branch_id'];
        }
    }
    public function getSegment($id = '')
    {
        $segment = $this->uri->segment($id);
        if (empty($segment)) {
            return '';
        } else {
            return $segment . '/';
        }
    }
    public function getCurrentDomain()
    {
        $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}";
        $url = rtrim($url, '/');
        $domain = parse_url($url, PHP_URL_HOST);
        if (substr($domain, 0, 4) == 'www.') {
            $domain = str_replace('www.', '', $domain);
        }
        $getDomain = $builder->select('school_id')->get_where('custom_domain', array('status' => 1, 'url' => $domain))->row();
        return $getDomain;
    }
    public function getSchoolDeatls($url_alias = '')
    {
        if (!empty($url_alias)) {
            $builder->select('fs.facebook_url,fs.twitter_url,fs.linkedin_url,fs.youtube_url,branch.address,branch.school_name');
            $builder->from('front_cms_setting as fs');
            $builder->join('branch', 'branch.id = fs.branch_id', 'left');
            $builder->where('fs.url_alias', $url_alias);
            $get = $builder->get()->row();
            if (empty($get)) {
                return '';
            } else {
                return $get;
            }
        } else {
            return '';
        }
    }
    public function getStudentLoginStatus($id = '')
    {
        $get = $db->table('branch')->get('branch')->row()->login;
        return $get;
    }
    public function getParentLoginStatus($id = '')
    {
        $get = $db->table('branch')->get('branch')->row()->login;
        return $get;
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class AuthenticationModel extends MYModel
{
    public function __construct()
    {
        $this->db = \Config\Database::connect();
    }

    protected $db;

    // checking login credential
    public function login_credential($username, $password)
    {

        $builder->select('*');
        $builder->from('login_credential');
        $builder->where('username', $username);
        $builder->limit(1);
        $query = $builder->get();
        if ($query->num_rows() == 1) {
            $verify_password = $this->app_lib->verify_password($password, $query->row()->password);
            if ($verify_password) {
                return $query->row();
            }
        }
        return false;
    }
    // password forgotten
    public function lose_password($username)
    {
        if (!empty($username)) {
            $builder->select('*');
            $builder->from('login_credential');
            $builder->where('username', $username);
            $builder->limit(1);
            $query = $builder->get();
            if ($query->num_rows() > 0) {
                $login_credential = $query->row();
                $getUser = $this->applicationModel->getUserNameByRoleID($login_credential->role, $login_credential->user_id);
                $key = hash('sha512', $login_credential->role . $login_credential->username . app_generate_hash());
                $query = $builder->getWhere('reset_password', array('login_credential_id' => $login_credential->id));
                if ($query->num_rows() > 0) {
                    $builder->where('login_credential_id', $login_credential->id);
                    $builder->delete('reset_password');
                }
                $arrayReset = array('key' => $key, 'login_credential_id' => $login_credential->id, 'username' => $login_credential->username);
                $builder->insert('reset_password', $arrayReset);
                // send email for forgot password
                $this->model('email_model');
                $arrayData = array('role' => $login_credential->role, 'branch_id' => $getUser['branch_id'], 'username' => $login_credential->username, 'name' => $getUser['name'], 'reset_url' => base_url('authentication/pwreset?key=' . $key), 'email' => $getUser['email']);
                $this->emailModel->sentForgotPassword($arrayData);
                return true;
            }
        }
        return false;
    }
    public function urlaliasToBranch($url_alias)
    {
        $saasExisting = $this->app_lib->isExistingAddon('saas');
        if ($saasExisting && $this->db->table_exists("custom_domain")) {
            $getDomain = $this->getCurrentDomain();
            if (!empty($getDomain)) {
                return $getDomain->school_id;
            }
        }
        $get = $db->table('front_cms_setting')->get('front_cms_setting')->row_array();
        if (empty($url_alias) || empty($get)) {
            return null;
        } else {
            return $get['branch_id'];
        }
    }
    public function getSegment($id = '')
    {
        $segment = $this->uri->segment($id);
        if (empty($segment)) {
            return '';
        } else {
            return $segment . '/';
        }
    }
    public function getCurrentDomain()
    {
        $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}";
        $url = rtrim($url, '/');
        $domain = parse_url($url, PHP_URL_HOST);
        if (substr($domain, 0, 4) == 'www.') {
            $domain = str_replace('www.', '', $domain);
        }
        $getDomain = $builder->select('school_id')->get_where('custom_domain', array('status' => 1, 'url' => $domain))->row();
        return $getDomain;
    }
    public function getSchoolDeatls($url_alias = '')
    {
        if (!empty($url_alias)) {
            $builder->select('fs.facebook_url,fs.twitter_url,fs.linkedin_url,fs.youtube_url,branch.address,branch.school_name');
            $builder->from('front_cms_setting as fs');
            $builder->join('branch', 'branch.id = fs.branch_id', 'left');
            $builder->where('fs.url_alias', $url_alias);
            $get = $builder->get()->row();
            if (empty($get)) {
                return '';
            } else {
                return $get;
            }
        } else {
            return '';
        }
    }
    public function getStudentLoginStatus($id = '')
    {
        $get = $db->table('branch')->get('branch')->row()->login;
        return $get;
    }
    public function getParentLoginStatus($id = '')
    {
        $get = $db->table('branch')->get('branch')->row()->login;
        return $get;
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/PayrollModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class PayrollModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // employee basic salary validation by salary template
    public function get_basic_salary($staff_id, $amount = 0)
    {
        $q = $builder->getWhere('staff', array('id' => $staff_id))->row_array();
        if (empty($q['salary_template_id']) || $q['salary_template_id'] == 0) {
            return 1;
        } else {
            $basic_salary = $builder->getWhere("salary_template", array('id' => $q['salary_template_id']))->row()->basic_salary;
            if ($amount > $basic_salary) {
                return 2;
            }
        }
        return 3;
    }
    // employee advance salary validation by month
    public function get_advance_valid_month($staff_id, $month)
    {
        $get_advance_month = $builder->getWhere("advance_salary", array("staff_id" => $staff_id, "deduct_month" => date("m", strtotime($month)), "year" => date("Y", strtotime($month)), "status" => 2))->num_rows();
        $get_salary_month = $builder->getWhere("payslip", array("staff_id" => $staff_id, "month" => date("m", strtotime($month)), "year" => date("Y", strtotime($month))))->num_rows();
        if ($get_advance_month == 0 && $get_salary_month == 0) {
            return true;
        } else {
            return false;
        }
    }
    // payslip save and update function
    public function save_payslip($data)
    {
        $staff_id = $data['staff_id'];
        $month = $data['month'];
        $year = $data['year'];
        $total_allowance = $data['total_allowance'];
        $total_deduction = $data['total_deduction'];
        $net_salary = $data['net_salary'];
        $overtime_hour = $data['overtime_total_hour'];
        $overtime_amount = $data['overtime_amount'];
        $salary_template_id = $data['salary_template_id'];
        $branchID = $this->applicationModel->get_branch_id();
        $ad_salary = $db->table('advance_salary')->get('advance_salary')->row_array();
        $exist_verify = $db->table('payslip')->get('payslip')->num_rows();
        if ($exist_verify == 0) {
            $arrayPayslip = array('staff_id' => $staff_id, 'month' => $month, 'year' => $year, 'basic_salary' => $data['basic_salary'], 'total_allowance' => $total_allowance, 'total_deduction' => $total_deduction, 'net_salary' => $net_salary, 'bill_no' => $this->app_lib->get_bill_no('payslip'), 'remarks' => $data['remarks'], 'hash' => app_generate_hash(), 'pay_via' => $data['pay_via'], 'branch_id' => $branchID, 'paid_by' => get_loggedin_user_id());
            $builder->insert('payslip', $arrayPayslip);
            $payslip_id = $builder->insert_id();
            $payslipData = array();
            $getTemplate = $this->get("salary_template_details", array('salary_template_id' => $salary_template_id));
            foreach ($getTemplate as $row) {
                if ($row['type'] == 1) {
                    $payslipData[] = array('payslip_id' => $payslip_id, 'name' => $row['name'], 'amount' => $row['amount'], 'type' => 1);
                } else {
                    $payslipData[] = array('payslip_id' => $payslip_id, 'name' => $row['name'], 'amount' => $row['amount'], 'type' => 2);
                }
            }
            if (!empty($overtime_hour) && $overtime_hour != 0) {
                $payslipData[] = array('payslip_id' => $payslip_id, 'name' => "Overtime Salary (" . $overtime_hour . " Hour)", 'amount' => $overtime_amount, 'type' => 1);
            }
            if (!empty($ad_salary)) {
                $payslipData[] = array('payslip_id' => $payslip_id, 'name' => "Advance Salary", 'amount' => $ad_salary['amount'], 'type' => 2);
            }
            $builder->insert_batch('payslip_details', $payslipData);
            // voucher transaction save function
            if (isset($data['account_id'])) {
                $arrayTransaction = array('account_id' => $data['account_id'], 'date' => $data['account_id'], 'amount' => $net_salary, 'month' => $month, 'year' => $year);
                $this->saveTransaction($arrayTransaction);
            }
            $payslip_url = base_url('payroll/invoice/' . $payslip_id . '/' . $arrayPayslip['hash']);
            // pay-slip confirmation email
            $arrayEmail = array('branch_id' => $branchID, 'name' => get_type_name_by_id('staff', $staff_id), 'month_year' => date('F', strtotime($year . '-' . $month)), 'payslip_no' => $arrayPayslip['bill_no'], 'payslip_url' => $payslip_url, 'recipient' => get_type_name_by_id('staff', $staff_id, 'email'));
            $this->email_model->sentStaffSalaryPay($arrayEmail);
            return ['status' => 'success', 'uri' => $payslip_url];
        } else {
            return ['status' => 'failed'];
        }
    }
    // voucher transaction save function
    public function saveTransaction($data)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $accountID = $data['account_id'];
        $amount = $data['amount'];
        $month = $data['month'];
        $year = $data['year'];
        $description = date("M-Y", strtotime($year . '-' . $month)) . " Paying Employees Salaries";
        // get the current balance of the selected account
        $qbal = $this->app_lib->get_table('accounts', $accountID, true);
        $cbal = $qbal['balance'];
        $bal = $cbal - $amount;
        // query system voucher head / insert
        $arrayHead = array('name' => 'Employees Salary Payment', 'type' => 'expense', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayHead);
        $query = $builder->get('voucher_head');
        if ($query->num_rows() == 1) {
            $voucher_headID = $query->row()->id;
        } else {
            $builder->insert('voucher_head', $arrayHead);
            $voucher_headID = $builder->insert_id();
        }
        // query system transactions / insert
        $arrayTransactions = array('account_id' => $accountID, 'voucher_head_id' => $voucher_headID, 'type' => 'expense', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayTransactions);
        $builder->where('description', $description);
        $query = $builder->get('transactions');
        if ($query->num_rows() > 0) {
            $builder->set('amount', 'amount+' . $amount, FALSE);
            $builder->set('dr', 'dr+' . $amount, FALSE);
            $builder->set('bal', $bal);
            $this->db->table('id', $query->row()->id)->where();
            $builder->update('transactions');
        } else {
            $arrayTransactions['date'] = date("Y-m-d");
            $arrayTransactions['ref'] = '';
            $arrayTransactions['amount'] = $amount;
            $arrayTransactions['dr'] = $amount;
            $arrayTransactions['cr'] = 0;
            $arrayTransactions['bal'] = $bal;
            $arrayTransactions['pay_via'] = 5;
            $arrayTransactions['description'] = $description;
            $builder->insert('transactions', $arrayTransactions);
        }
        $builder->where('id', $accountID);
        $this->db->table('accounts', array('balance' => $bal))->update();
    }
    public function getInvoice($id)
    {
        $builder->select('payslip.*,staff.name as staff_name,staff.mobileno,IFNULL(staff_designation.name, "N/A") as designation_name,IFNULL(staff_department.name, "N/A") as department_name,branch.school_name,branch.email as school_email,branch.mobileno as school_mobileno,branch.address as school_address');
        $builder->from('payslip');
        $builder->join('staff', 'staff.id = payslip.staff_id', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('branch', 'branch.id = staff.branch_id', 'left');
        $builder->where('payslip.id', $id);
        return $builder->get()->row_array();
    }
    // get staff all details
    public function getEmployeeList($branch_id, $role_id, $designation)
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != 6 and login_credential.role != 7', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->where('login_credential.role', $role_id);
        $builder->where('login_credential.active', 1);
        $builder->where('staff.branch_id', $branch_id);
        $builder->where('staff.designation', $designation);
        return $builder->get()->getResult();
    }
    // get employee payment list
    public function getEmployeePaymentList($branch_id = '', $role_id, $month, $year)
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role, IFNULL(payslip.id, 0) as salary_id, payslip.hash as salary_hash,salary_template.name as template_name, salary_template.basic_salary');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('payslip', 'payslip.staff_id = staff.id and payslip.month = ' . $db->escape($month) . ' and payslip.year = ' . $db->escape($year), 'left');
        $builder->join('salary_template', 'salary_template.id = staff.salary_template_id', 'left');
        $builder->where('staff.branch_id', $branch_id);
        $builder->where('login_credential.role', $role_id);
        $builder->where('login_credential.active', 1);
        $builder->where('staff.salary_template_id !=', 0);
        return $builder->get()->getResult();
    }
    // get employee payment list
    public function getEmployeePayment($staff_id, $month, $year)
    {
        $sql = "SELECT `staff`.*, `staff_designation`.`name` as `designation_name`, `staff_department`.`name` as `department_name`, `login_credential`.`role` as `role_id`, `roles`.`name` as `role`,\r\n        `salary_template`.`name` as `template_name`, `salary_template`.`basic_salary`, `salary_template`.`overtime_salary`, `advance_salary`.`amount` as `advance_amount` FROM `staff` INNER JOIN\r\n        `login_credential` ON `login_credential`.`user_id` = `staff`.`id` LEFT JOIN `roles` ON `roles`.`id` = `login_credential`.`role` LEFT JOIN `staff_designation` ON\r\n        `staff_designation`.`id` = `staff`.`designation` LEFT JOIN `staff_department` ON `staff_department`.`id` = `staff`.`department` LEFT JOIN `salary_template` ON\r\n        `salary_template`.`id` = `staff`.`salary_template_id` LEFT JOIN `advance_salary` ON `advance_salary`.`staff_id` = `staff`.`id` AND \r\n        `advance_salary`.`deduct_month` = " . $db->escape($month) . " AND `advance_salary`.`year` = " . $db->escape($year) . " WHERE\r\n        `staff`.`id` = " . $db->escape($staff_id);
        return $db->query($sql)->row_array();
    }
    public function getAdvanceSalaryList($month = '', $year = '', $branch_id = '')
    {
        $builder->select('advance_salary.*,staff.name,staff.photo,login_credential.role as role_id,roles.name as role');
        $builder->from('advance_salary');
        $builder->join('staff', 'staff.id = advance_salary.staff_id', 'inner');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != 6 and login_credential.role != 7', 'left');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        if (!empty($month)) {
            $builder->where('advance_salary.deduct_month', $month);
            $builder->where('advance_salary.year', $year);
        }
        if (!empty($branch_id)) {
            $builder->where('advance_salary.branch_id', $branch_id);
        }
        return $builder->get()->result_array();
    }
    // get summary report function
    public function get_summary($branch_id = '', $month = '', $year = '', $staffID)
    {
        $builder->select('payslip.*,staff.name as staff_name,staff.mobileno,IFNULL(staff_designation.name, "N/A") as designation_name,IFNULL(staff_department.name, "N/A") as department_name,payment_types.name as payvia');
        $builder->from('payslip');
        $builder->join('staff', 'staff.id = payslip.staff_id', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('payment_types', 'payment_types.id = payslip.pay_via', 'left');
        if (!empty($staffID)) {
            $this->db->table('payslip.staff_id', get_loggedin_user_id())->where();
        }
        $builder->where('payslip.branch_id', $branch_id);
        $builder->where('payslip.month', $month);
        $builder->where('payslip.year', $year);
        return $builder->get()->result_array();
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class PayrollModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // employee basic salary validation by salary template
    public function get_basic_salary($staff_id, $amount = 0)
    {
        $q = $builder->getWhere('staff', array('id' => $staff_id))->row_array();
        if (empty($q['salary_template_id']) || $q['salary_template_id'] == 0) {
            return 1;
        } else {
            $basic_salary = $builder->getWhere("salary_template", array('id' => $q['salary_template_id']))->row()->basic_salary;
            if ($amount > $basic_salary) {
                return 2;
            }
        }
        return 3;
    }
    // employee advance salary validation by month
    public function get_advance_valid_month($staff_id, $month)
    {
        $get_advance_month = $builder->getWhere("advance_salary", array("staff_id" => $staff_id, "deduct_month" => date("m", strtotime($month)), "year" => date("Y", strtotime($month)), "status" => 2))->num_rows();
        $get_salary_month = $builder->getWhere("payslip", array("staff_id" => $staff_id, "month" => date("m", strtotime($month)), "year" => date("Y", strtotime($month))))->num_rows();
        if ($get_advance_month == 0 && $get_salary_month == 0) {
            return true;
        } else {
            return false;
        }
    }
    // payslip save and update function
    public function save_payslip($data)
    {
        $staff_id = $data['staff_id'];
        $month = $data['month'];
        $year = $data['year'];
        $total_allowance = $data['total_allowance'];
        $total_deduction = $data['total_deduction'];
        $net_salary = $data['net_salary'];
        $overtime_hour = $data['overtime_total_hour'];
        $overtime_amount = $data['overtime_amount'];
        $salary_template_id = $data['salary_template_id'];
        $branchID = $this->applicationModel->get_branch_id();
        $ad_salary = $db->table('advance_salary')->get('advance_salary')->row_array();
        $exist_verify = $db->table('payslip')->get('payslip')->num_rows();
        if ($exist_verify == 0) {
            $arrayPayslip = array('staff_id' => $staff_id, 'month' => $month, 'year' => $year, 'basic_salary' => $data['basic_salary'], 'total_allowance' => $total_allowance, 'total_deduction' => $total_deduction, 'net_salary' => $net_salary, 'bill_no' => $this->app_lib->get_bill_no('payslip'), 'remarks' => $data['remarks'], 'hash' => app_generate_hash(), 'pay_via' => $data['pay_via'], 'branch_id' => $branchID, 'paid_by' => get_loggedin_user_id());
            $builder->insert('payslip', $arrayPayslip);
            $payslip_id = $builder->insert_id();
            $payslipData = array();
            $getTemplate = $this->get("salary_template_details", array('salary_template_id' => $salary_template_id));
            foreach ($getTemplate as $row) {
                if ($row['type'] == 1) {
                    $payslipData[] = array('payslip_id' => $payslip_id, 'name' => $row['name'], 'amount' => $row['amount'], 'type' => 1);
                } else {
                    $payslipData[] = array('payslip_id' => $payslip_id, 'name' => $row['name'], 'amount' => $row['amount'], 'type' => 2);
                }
            }
            if (!empty($overtime_hour) && $overtime_hour != 0) {
                $payslipData[] = array('payslip_id' => $payslip_id, 'name' => "Overtime Salary (" . $overtime_hour . " Hour)", 'amount' => $overtime_amount, 'type' => 1);
            }
            if (!empty($ad_salary)) {
                $payslipData[] = array('payslip_id' => $payslip_id, 'name' => "Advance Salary", 'amount' => $ad_salary['amount'], 'type' => 2);
            }
            $builder->insert_batch('payslip_details', $payslipData);
            // voucher transaction save function
            if (isset($data['account_id'])) {
                $arrayTransaction = array('account_id' => $data['account_id'], 'date' => $data['account_id'], 'amount' => $net_salary, 'month' => $month, 'year' => $year);
                $this->saveTransaction($arrayTransaction);
            }
            $payslip_url = base_url('payroll/invoice/' . $payslip_id . '/' . $arrayPayslip['hash']);
            // pay-slip confirmation email
            $arrayEmail = array('branch_id' => $branchID, 'name' => get_type_name_by_id('staff', $staff_id), 'month_year' => date('F', strtotime($year . '-' . $month)), 'payslip_no' => $arrayPayslip['bill_no'], 'payslip_url' => $payslip_url, 'recipient' => get_type_name_by_id('staff', $staff_id, 'email'));
            $this->emailModel->sentStaffSalaryPay($arrayEmail);
            return ['status' => 'success', 'uri' => $payslip_url];
        } else {
            return ['status' => 'failed'];
        }
    }
    // voucher transaction save function
    public function saveTransaction($data)
    {
        $branchID = $this->applicationModel->get_branch_id();
        $accountID = $data['account_id'];
        $amount = $data['amount'];
        $month = $data['month'];
        $year = $data['year'];
        $description = date("M-Y", strtotime($year . '-' . $month)) . " Paying Employees Salaries";
        // get the current balance of the selected account
        $qbal = $this->app_lib->get_table('accounts', $accountID, true);
        $cbal = $qbal['balance'];
        $bal = $cbal - $amount;
        // query system voucher head / insert
        $arrayHead = array('name' => 'Employees Salary Payment', 'type' => 'expense', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayHead);
        $query = $builder->get('voucher_head');
        if ($query->num_rows() == 1) {
            $voucher_headID = $query->row()->id;
        } else {
            $builder->insert('voucher_head', $arrayHead);
            $voucher_headID = $builder->insert_id();
        }
        // query system transactions / insert
        $arrayTransactions = array('account_id' => $accountID, 'voucher_head_id' => $voucher_headID, 'type' => 'expense', 'system' => 1, 'branch_id' => $branchID);
        $builder->where($arrayTransactions);
        $builder->where('description', $description);
        $query = $builder->get('transactions');
        if ($query->num_rows() > 0) {
            $builder->set('amount', 'amount+' . $amount, FALSE);
            $builder->set('dr', 'dr+' . $amount, FALSE);
            $builder->set('bal', $bal);
            $this->db->table('id', $query->row()->id)->where();
            $builder->update('transactions');
        } else {
            $arrayTransactions['date'] = date("Y-m-d");
            $arrayTransactions['ref'] = '';
            $arrayTransactions['amount'] = $amount;
            $arrayTransactions['dr'] = $amount;
            $arrayTransactions['cr'] = 0;
            $arrayTransactions['bal'] = $bal;
            $arrayTransactions['pay_via'] = 5;
            $arrayTransactions['description'] = $description;
            $builder->insert('transactions', $arrayTransactions);
        }
        $builder->where('id', $accountID);
        $this->db->table('accounts', array('balance' => $bal))->update();
    }
    public function getInvoice($id)
    {
        $builder->select('payslip.*,staff.name as staff_name,staff.mobileno,IFNULL(staff_designation.name, "N/A") as designation_name,IFNULL(staff_department.name, "N/A") as department_name,branch.school_name,branch.email as school_email,branch.mobileno as school_mobileno,branch.address as school_address');
        $builder->from('payslip');
        $builder->join('staff', 'staff.id = payslip.staff_id', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('branch', 'branch.id = staff.branch_id', 'left');
        $builder->where('payslip.id', $id);
        return $builder->get()->row_array();
    }
    // get staff all details
    public function getEmployeeList($branch_id, $role_id, $designation)
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != 6 and login_credential.role != 7', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->where('login_credential.role', $role_id);
        $builder->where('login_credential.active', 1);
        $builder->where('staff.branch_id', $branch_id);
        $builder->where('staff.designation', $designation);
        return $builder->get()->getResult();
    }
    // get employee payment list
    public function getEmployeePaymentList($branch_id = '', $role_id, $month, $year)
    {
        $builder->select('staff.*,staff_designation.name as designation_name,staff_department.name as department_name,login_credential.role as role_id, roles.name as role, IFNULL(payslip.id, 0) as salary_id, payslip.hash as salary_hash,salary_template.name as template_name, salary_template.basic_salary');
        $builder->from('staff');
        $builder->join('login_credential', 'login_credential.user_id = staff.id', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('payslip', 'payslip.staff_id = staff.id and payslip.month = ' . $db->escape($month) . ' and payslip.year = ' . $db->escape($year), 'left');
        $builder->join('salary_template', 'salary_template.id = staff.salary_template_id', 'left');
        $builder->where('staff.branch_id', $branch_id);
        $builder->where('login_credential.role', $role_id);
        $builder->where('login_credential.active', 1);
        $builder->where('staff.salary_template_id !=', 0);
        return $builder->get()->getResult();
    }
    // get employee payment list
    public function getEmployeePayment($staff_id, $month, $year)
    {
        $sql = "SELECT `staff`.*, `staff_designation`.`name` as `designation_name`, `staff_department`.`name` as `department_name`, `login_credential`.`role` as `role_id`, `roles`.`name` as `role`,\r\n        `salary_template`.`name` as `template_name`, `salary_template`.`basic_salary`, `salary_template`.`overtime_salary`, `advance_salary`.`amount` as `advance_amount` FROM `staff` INNER JOIN\r\n        `login_credential` ON `login_credential`.`user_id` = `staff`.`id` LEFT JOIN `roles` ON `roles`.`id` = `login_credential`.`role` LEFT JOIN `staff_designation` ON\r\n        `staff_designation`.`id` = `staff`.`designation` LEFT JOIN `staff_department` ON `staff_department`.`id` = `staff`.`department` LEFT JOIN `salary_template` ON\r\n        `salary_template`.`id` = `staff`.`salary_template_id` LEFT JOIN `advance_salary` ON `advance_salary`.`staff_id` = `staff`.`id` AND \r\n        `advance_salary`.`deduct_month` = " . $db->escape($month) . " AND `advance_salary`.`year` = " . $db->escape($year) . " WHERE\r\n        `staff`.`id` = " . $db->escape($staff_id);
        return $db->query($sql)->row_array();
    }
    public function getAdvanceSalaryList($month = '', $year = '', $branch_id = '')
    {
        $builder->select('advance_salary.*,staff.name,staff.photo,login_credential.role as role_id,roles.name as role');
        $builder->from('advance_salary');
        $builder->join('staff', 'staff.id = advance_salary.staff_id', 'inner');
        $builder->join('login_credential', 'login_credential.user_id = staff.id and login_credential.role != 6 and login_credential.role != 7', 'left');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        if (!empty($month)) {
            $builder->where('advance_salary.deduct_month', $month);
            $builder->where('advance_salary.year', $year);
        }
        if (!empty($branch_id)) {
            $builder->where('advance_salary.branch_id', $branch_id);
        }
        return $builder->get()->result_array();
    }
    // get summary report function
    public function get_summary($branch_id = '', $month = '', $year = '', $staffID)
    {
        $builder->select('payslip.*,staff.name as staff_name,staff.mobileno,IFNULL(staff_designation.name, "N/A") as designation_name,IFNULL(staff_department.name, "N/A") as department_name,payment_types.name as payvia');
        $builder->from('payslip');
        $builder->join('staff', 'staff.id = payslip.staff_id', 'left');
        $builder->join('staff_designation', 'staff_designation.id = staff.designation', 'left');
        $builder->join('staff_department', 'staff_department.id = staff.department', 'left');
        $builder->join('payment_types', 'payment_types.id = payslip.pay_via', 'left');
        if (!empty($staffID)) {
            $this->db->table('payslip.staff_id', get_loggedin_user_id())->where();
        }
        $builder->where('payslip.branch_id', $branch_id);
        $builder->where('payslip.month', $month);
        $builder->where('payslip.year', $year);
        return $builder->get()->result_array();
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/ParentsModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class ParentsModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    // moderator parents all information
    public function save($data, $getBranch = array())
    {
        $inser_data1 = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['name'], 'relation' => $data['relation'], 'father_name' => $data['father_name'], 'mother_name' => $data['mother_name'], 'occupation' => $data['occupation'], 'income' => $data['income'], 'education' => $data['education'], 'email' => $data['email'], 'mobileno' => $data['mobileno'], 'address' => $data['address'], 'city' => $data['city'], 'state' => $data['state'], 'photo' => $this->uploadImage('parent'), 'facebook_url' => $data['facebook'], 'linkedin_url' => $data['linkedin'], 'twitter_url' => $data['twitter']);
        if (!isset($data['parent_id']) && empty($data['parent_id'])) {
            // save employee information in the database
            $builder->insert('parent', $inser_data1);
            $parent_id = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getBranch['grd_generate'] == 1) {
                $username = $getBranch['grd_username_prefix'] . $parent_id;
                $password = $getBranch['grd_default_password'];
            } else {
                $username = $data['username'];
                $password = $data['password'];
            }
            $inser_data2 = array('username' => $username, 'role' => 6, 'active' => 1, 'user_id' => $parent_id, 'password' => $this->app_lib->pass_hashed($password));
            $builder->insert('login_credential', $inser_data2);
            // send account activate email
            $emailData = array('name' => $data['name'], 'username' => $username, 'password' => $password, 'user_role' => 6, 'email' => $data['email']);
            $this->email_model->sentStaffRegisteredAccount($emailData);
            return $parent_id;
        } else {
            $builder->where('id', $data['parent_id']);
            $builder->update('parent', $inser_data1);
            // update login credential information in the database
            $this->db->table(array('role' => 6, 'user_id' => $data['parent_id']))->where();
            $this->db->table('login_credential', array('username' => $data['username']))->update();
        }
        if ($db->affectedRows() > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function getSingleParent($id)
    {
        $builder->select('parent.*,login_credential.role as role_id,login_credential.active,login_credential.username,login_credential.id as login_id, roles.name as role');
        $builder->from('parent');
        $builder->join('login_credential', 'login_credential.user_id = parent.id and login_credential.role = "6"', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->where('parent.id', $id);
        if (!is_superadmin_loggedin()) {
            $this->db->table('parent.branch_id', get_loggedin_branch_id())->where();
        }
        $query = $builder->get();
        if ($query->num_rows() == 0) {
            show_404();
        }
        return $query->row_array();
    }
    public function childsResult($parent_id)
    {
        $builder->select('s.id,s.photo, CONCAT_WS(" ",s.first_name, s.last_name) as fullname,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        $builder->where('s.parent_id', $parent_id);
        $builder->where('l.active', 1);
        $this->db->table('e.session_id', get_session_id())->where();
        return $builder->get()->result_array();
    }
    // get parent all details
    public function getParentList($branchID = null, $active = 1)
    {
        $builder->select('parent.*,login_credential.active as active');
        $builder->from('parent');
        $builder->join('login_credential', 'login_credential.user_id = parent.id and login_credential.role = "6"', 'inner');
        $builder->where('login_credential.active', $active);
        if (!empty($branchID)) {
            $builder->where('parent.branch_id', $branchID);
        }
        $builder->order_by('parent.id', 'ASC');
        return $builder->get()->getResult();
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class ParentsModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    // moderator parents all information
    public function save($data, $getBranch = array())
    {
        $inser_data1 = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['name'], 'relation' => $data['relation'], 'father_name' => $data['father_name'], 'mother_name' => $data['mother_name'], 'occupation' => $data['occupation'], 'income' => $data['income'], 'education' => $data['education'], 'email' => $data['email'], 'mobileno' => $data['mobileno'], 'address' => $data['address'], 'city' => $data['city'], 'state' => $data['state'], 'photo' => $this->uploadImage('parent'), 'facebook_url' => $data['facebook'], 'linkedin_url' => $data['linkedin'], 'twitter_url' => $data['twitter']);
        if (!isset($data['parent_id']) && empty($data['parent_id'])) {
            // save employee information in the database
            $builder->insert('parent', $inser_data1);
            $parent_id = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getBranch['grd_generate'] == 1) {
                $username = $getBranch['grd_username_prefix'] . $parent_id;
                $password = $getBranch['grd_default_password'];
            } else {
                $username = $data['username'];
                $password = $data['password'];
            }
            $inser_data2 = array('username' => $username, 'role' => 6, 'active' => 1, 'user_id' => $parent_id, 'password' => $this->app_lib->pass_hashed($password));
            $builder->insert('login_credential', $inser_data2);
            // send account activate email
            $emailData = array('name' => $data['name'], 'username' => $username, 'password' => $password, 'user_role' => 6, 'email' => $data['email']);
            $this->emailModel->sentStaffRegisteredAccount($emailData);
            return $parent_id;
        } else {
            $builder->where('id', $data['parent_id']);
            $builder->update('parent', $inser_data1);
            // update login credential information in the database
            $this->db->table(array('role' => 6, 'user_id' => $data['parent_id']))->where();
            $this->db->table('login_credential', array('username' => $data['username']))->update();
        }
        if ($db->affectedRows() > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function getSingleParent($id)
    {
        $builder->select('parent.*,login_credential.role as role_id,login_credential.active,login_credential.username,login_credential.id as login_id, roles.name as role');
        $builder->from('parent');
        $builder->join('login_credential', 'login_credential.user_id = parent.id and login_credential.role = "6"', 'inner');
        $builder->join('roles', 'roles.id = login_credential.role', 'left');
        $builder->where('parent.id', $id);
        if (!is_superadmin_loggedin()) {
            $this->db->table('parent.branch_id', get_loggedin_branch_id())->where();
        }
        $query = $builder->get();
        if ($query->num_rows() == 0) {
            show_404();
        }
        return $query->row_array();
    }
    public function childsResult($parent_id)
    {
        $builder->select('s.id,s.photo, CONCAT_WS(" ",s.first_name, s.last_name) as fullname,c.name as class_name,se.name as section_name');
        $builder->from('enroll as e');
        $builder->join('student as s', 'e.student_id = s.id', 'inner');
        $builder->join('login_credential as l', 'l.user_id = s.id and l.role = 7', 'inner');
        $builder->join('class as c', 'e.class_id = c.id', 'left');
        $builder->join('section as se', 'e.section_id=se.id', 'left');
        $builder->where('s.parent_id', $parent_id);
        $builder->where('l.active', 1);
        $this->db->table('e.session_id', get_session_id())->where();
        return $builder->get()->result_array();
    }
    // get parent all details
    public function getParentList($branchID = null, $active = 1)
    {
        $builder->select('parent.*,login_credential.active as active');
        $builder->from('parent');
        $builder->join('login_credential', 'login_credential.user_id = parent.id and login_credential.role = "6"', 'inner');
        $builder->where('login_credential.active', $active);
        if (!empty($branchID)) {
            $builder->where('parent.branch_id', $branchID);
        }
        $builder->order_by('parent.id', 'ASC');
        return $builder->get()->getResult();
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/FeespaymentModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class FeespaymentModel extends Model
{
    public function __construct()
    {
        parent::__construct();
        $this->model('sms_model');
    }
    public function get_student_invoice($student_id = '')
    {
        $builder->select('fi.*,e.student_id,e.roll,s.first_name,s.last_name,s.register_no');
        $builder->from('fee_invoice as fi');
        $builder->join('enroll as e', 'e.student_id = fi.student_id', 'left');
        $builder->join('student as s', 's.id = fi.student_id', 'left');
        $builder->where('fi.student_id', $student_id);
        $builder->order_by('fi.id', 'desc');
        return $builder->get();
    }
    public function get_invoice_single($id = '')
    {
        $builder->select('fi.*,e.student_id,e.roll,e.class_id,s.first_name,s.last_name,s.email,s.current_address,c.name as class_name');
        $builder->from('fee_invoice as fi');
        $builder->join('enroll as e', 'e.student_id = fi.student_id', 'left');
        $builder->join('student as s', 's.id = fi.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->where('fi.id', $id);
        return $builder->get()->row();
    }
    public function save_online_pay($data = array())
    {
        $arrayHistory = array('fee_invoice_id' => $data['invoice_id'], 'collect_by' => 'online', 'remarks' => $data['remarks'], 'method' => $data['method'], 'amount' => $data['payment_amount'], 'date' => date("Y-m-d"), 'session_id' => get_session_id());
        $builder->insert('payment_history', $arrayHistory);
        if ($data['total_due'] <= $data['payment_amount']) {
            $builder->where('id', $data['invoice_id']);
            $this->db->table('fee_invoice', array('status' => 2))->update();
        } else {
            $builder->where('id', $data['invoice_id']);
            $this->db->table('fee_invoice', array('status' => 1))->update();
        }
        $builder->where('id', $data['invoice_id']);
        $builder->set('total_paid', 'total_paid + ' . $data['payment_amount'], false);
        $builder->set('total_due', 'total_due - ' . $data['payment_amount'], false);
        $builder->update('fee_invoice');
        // send payment confirmation sms
        $arrayHistory['student_id'] = $data['student_id'];
        $this->sms_model->send_sms($arrayHistory, 2);
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class FeespaymentModel extends Model
{
    public function __construct()
    {
        parent::__construct();
        $this->model('sms_model');
    }
    public function get_student_invoice($student_id = '')
    {
        $builder->select('fi.*,e.student_id,e.roll,s.first_name,s.last_name,s.register_no');
        $builder->from('fee_invoice as fi');
        $builder->join('enroll as e', 'e.student_id = fi.student_id', 'left');
        $builder->join('student as s', 's.id = fi.student_id', 'left');
        $builder->where('fi.student_id', $student_id);
        $builder->order_by('fi.id', 'desc');
        return $builder->get();
    }
    public function get_invoice_single($id = '')
    {
        $builder->select('fi.*,e.student_id,e.roll,e.class_id,s.first_name,s.last_name,s.email,s.current_address,c.name as class_name');
        $builder->from('fee_invoice as fi');
        $builder->join('enroll as e', 'e.student_id = fi.student_id', 'left');
        $builder->join('student as s', 's.id = fi.student_id', 'left');
        $builder->join('class as c', 'c.id = e.class_id', 'left');
        $builder->where('fi.id', $id);
        return $builder->get()->row();
    }
    public function save_online_pay($data = array())
    {
        $arrayHistory = array('fee_invoice_id' => $data['invoice_id'], 'collect_by' => 'online', 'remarks' => $data['remarks'], 'method' => $data['method'], 'amount' => $data['payment_amount'], 'date' => date("Y-m-d"), 'session_id' => get_session_id());
        $builder->insert('payment_history', $arrayHistory);
        if ($data['total_due'] <= $data['payment_amount']) {
            $builder->where('id', $data['invoice_id']);
            $this->db->table('fee_invoice', array('status' => 2))->update();
        } else {
            $builder->where('id', $data['invoice_id']);
            $this->db->table('fee_invoice', array('status' => 1))->update();
        }
        $builder->where('id', $data['invoice_id']);
        $builder->set('total_paid', 'total_paid + ' . $data['payment_amount'], false);
        $builder->set('total_due', 'total_due - ' . $data['payment_amount'], false);
        $builder->update('fee_invoice');
        // send payment confirmation sms
        $arrayHistory['student_id'] = $data['student_id'];
        $this->smsModel->send_sms($arrayHistory, 2);
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/SaasModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class SaasModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // get package list
    public function getPackageList()
    {
        $get = $builder->get('saas_package')->getResult();
        return $get;
    }
    // plan package save and update function
    public function packageSave($data)
    {
        $module = $this->request->getPost('modules');
        $period_type = $data['period_type'];
        $insertData = array('name' => $data['name'], 'price' => empty($data['price']) ? 0 : $data['price'], 'recommended' => empty($data['recommended']) ? 0 : 1, 'discount' => empty($data['discount']) ? 0 : $data['discount'], 'student_limit' => $data['student_limit'], 'staff_limit' => $data['staff_limit'], 'teacher_limit' => $data['teacher_limit'], 'parents_limit' => $data['parents_limit'], 'free_trial' => empty($data['free_trial']) ? 0 : 1, 'show_onwebsite' => isset($data['show_website']) ? 1 : 0, 'status' => isset($data['package_status']) ? 1 : 0, 'period_type' => $period_type, 'period_value' => $period_type == 1 ? 0 : $data['period_value'], 'permission' => json_encode($module));
        $id = $this->request->getPost('id');
        if (empty($id)) {
            $insertData['created_at'] = date('Y-m-d H:i:s');
            $builder->insert('saas_package', $insertData);
        } else {
            $insertData['updated_at'] = date('Y-m-d H:i:s');
            $builder->where('id', $id);
            $builder->update('saas_package', $insertData);
        }
        if ($db->affectedRows() > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function getPeriodType()
    {
        $arrayPeriod = array('' => translate('select'), '2' => translate('days'), '3' => translate('monthly'), '4' => translate('yearly'), '1' => translate('lifetime'));
        return $arrayPeriod;
    }
    public function getPeriodTypeWebsite()
    {
        $arrayPeriod = array('2' => translate('days'), '3' => translate('months'), '4' => translate('years'), '1' => translate('lifetime'));
        return $arrayPeriod;
    }
    public function getSaasPackage()
    {
        $arrayData = array("" => translate('select'));
        $builder->where('status', 1);
        $result = $builder->get('saas_package')->getResult();
        foreach ($result as $row) {
            $arrayData[$row->id] = $row->name;
        }
        return $arrayData;
    }
    public function getSubscriptionsExpiredNotification()
    {
        $message = "";
        $sql = "SELECT `expired_alert`,`expired_alert_days`,`expired_alert_message`,`expired_message` FROM `saas_settings` WHERE `id` = '1'";
        $settings = $db->query($sql)->row();
        if (!empty($settings)) {
            if ($settings->expired_alert == 1) {
                $days = $settings->expired_alert_days;
                $date = date('Y-m-d', strtotime("+ {$days} days"));
                $school_id = get_loggedin_branch_id();
                $sql = "SELECT `expire_date` FROM `saas_subscriptions` WHERE date(`expire_date`) <= " . $db->escape($date) . " AND `school_id` = " . $db->escape($school_id);
                $subscriptions = $db->query($sql)->row();
                if (!empty($subscriptions)) {
                    if (date("Y-m-d", strtotime($subscriptions->expire_date)) < date("Y-m-d")) {
                        return $settings->expired_message;
                    }
                    $date1 = new DateTime(date("Y-m-d"));
                    $date2 = new DateTime($subscriptions->expire_date);
                    $diff = $date2->diff($date1)->format("%a");
                    $days = intval($diff);
                    $message = $settings->expired_alert_message;
                    $message = str_replace('{days}', $days, $message);
                }
            }
        }
        return $message;
    }
    public function getSchool($id)
    {
        $builder->select('branch.*,saas_subscriptions.package_id,saas_subscriptions.expire_date,saas_subscriptions.id as subscriptions_id,saas_subscriptions.upgrade_lasttime');
        $builder->from('branch');
        $builder->join('saas_subscriptions', 'saas_subscriptions.school_id = branch.id', 'inner');
        $builder->where('branch.id', $id);
        $school = $builder->get()->row();
        return $school;
    }
    public function getSubscriptionList($type = '')
    {
        $builder->select('branch.id as bid,branch.name as branch_name,branch.status,upgrade_lasttime,email,mobileno,saas_subscriptions.expire_date,sp.name as package_name,sp.period_type,saas_subscriptions.created_at,sp.price,free_trial,sp.discount');
        $builder->from('branch');
        $builder->join('saas_subscriptions', 'saas_subscriptions.school_id = branch.id', 'inner');
        $builder->join('saas_package as sp', 'sp.id = saas_subscriptions.package_id', 'left');
        if (preg_match('/^[1-9][0-9]*$/', $type)) {
            if ($type == 1) {
                $builder->where('branch.status', 1);
                $this->db->table("date(saas_subscriptions.expire_date) >", date("Y-m-d"))->where();
            }
            if ($type == 2) {
                $builder->where('branch.status', 0);
            }
            if ($type == 3) {
                $this->db->table("date(saas_subscriptions.expire_date) <", date("Y-m-d"))->where();
            }
        }
        return $builder->get()->getResult();
    }
    public function getPendingRequest($start = '', $end = '')
    {
        $builder->select('saas_school_register.*,sp.name as package_name,IFNULL(sp.price-sp.discount, 0) as plan_price');
        $builder->from('saas_school_register');
        $builder->join('saas_package as sp', 'sp.id = saas_school_register.package_id', 'left');
        if (!empty($start) && !empty($end)) {
            $this->db->table('date(saas_school_register.created_at)  >=', $start)->where();
            $this->db->table('date(saas_school_register.created_at) <=', $end)->where();
        }
        return $builder->get()->getResult();
    }
    public function checkSubscriptionValidity($school_id = "")
    {
        if (!is_superadmin_loggedin()) {
            if (empty($school_id)) {
                $school_id = get_loggedin_branch_id();
            }
            $sql = "SELECT `id`,`expire_date` FROM `saas_subscriptions` WHERE `school_id` = " . $db->escape($school_id);
            $subscriptions = $db->query($sql)->row();
            if (empty($subscriptions)) {
                return true;
            }
            if ($subscriptions->expire_date == "") {
                return true;
            }
            if (date("Y-m-d", strtotime($subscriptions->expire_date)) < date("Y-m-d")) {
                set_alert('error', translate('subscription_expired'));
                return false;
            }
        }
        return true;
    }
    public function schoolSave($data)
    {
        $arrayBranch = array('name' => $data['branch_name'], 'school_name' => $data['school_name'], 'email' => $data['email'], 'mobileno' => $data['mobileno'], 'currency' => $data['currency'], 'symbol' => $data['currency_symbol'], 'country' => $data['country'], 'city' => $data['city'], 'state' => $data['state'], 'address' => $data['address'], 'status' => $data['state_id']);
        if (!isset($data['branch_id'])) {
            $builder->insert('branch', $arrayBranch);
            $id = $builder->insert_id();
        } else {
            $id = $data['branch_id'];
            $builder->where('id', $data['branch_id']);
            $builder->update('branch', $arrayBranch);
        }
        $file_upload = false;
        if (isset($_FILES["logo_file"]) && !empty($_FILES['logo_file']['name'])) {
            $fileInfo = pathinfo($_FILES["logo_file"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["logo_file"]["tmp_name"], "uploads/app_image/logo-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["text_logo"]) && !empty($_FILES['text_logo']['name'])) {
            $fileInfo = pathinfo($_FILES["text_logo"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["text_logo"]["tmp_name"], "uploads/app_image/logo-small-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["print_file"]) && !empty($_FILES['print_file']['name'])) {
            $fileInfo = pathinfo($_FILES["print_file"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["print_file"]["tmp_name"], "uploads/app_image/printing-logo-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["report_card"]) && !empty($_FILES['report_card']['name'])) {
            $fileInfo = pathinfo($_FILES["report_card"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["report_card"]["tmp_name"], "uploads/app_image/report-card-logo-" . $img_name);
            $file_upload = true;
        }
        return $id;
    }
    public function saveSchoolSaasData($package_id = '', $schooolID = '', $paymentData = [])
    {
        // Fetch currency from GLOBAL_SETTINGS
        $globalSettings = $builder->get('global_settings')->row();
        $currency = $globalSettings ? $globalSettings->currency : 'USD';
        // Default to 'USD' if not set
        //get saas package information
        $saasPackage = $db->table('saas_package')->get('saas_package')->row();
        $periodValue = $saasPackage->period_value;
        $dateAdd = '';
        if ($saasPackage->period_type == 2) {
            $dateAdd = "+{$periodValue} days";
        }
        if ($saasPackage->period_type == 3) {
            $dateAdd = "+{$periodValue} month";
        }
        if ($saasPackage->period_type == 4) {
            $dateAdd = "+{$periodValue} year";
        }
        if (!empty($dateAdd)) {
            $dateAdd = date('Y-m-d', strtotime($dateAdd));
        }
        //add subscriptions data stored in the database
        $arraySubscriptions = array('package_id' => $package_id, 'school_id' => $schooolID, 'expire_date' => $dateAdd);
        $builder->insert('saas_subscriptions', $arraySubscriptions);
        $subscriptionsID = $builder->insert_id();
        //add subscriptions transactions data stored in the database
        $arraySubscriptionsTransactions = array('subscriptions_id' => $subscriptionsID, 'package_id' => $package_id, 'payment_id' => empty($paymentData['txn_id']) ? substr(app_generate_hash(), 3, 8) : $paymentData['txn_id'], 'amount' => $saasPackage->price, 'discount' => $saasPackage->discount, 'payment_method' => empty($paymentData['payment_method']) ? 1 : $paymentData['payment_method'], 'purchase_date' => date("Y-m-d"), 'expire_date' => $dateAdd, 'currency' => $currency);
        $builder->insert('saas_subscriptions_transactions', $arraySubscriptionsTransactions);
        //manage modules permission
        $permission = json_decode($saasPackage->permission, true);
        $modules_manage = array();
        $getPermissions = $db->table('permission_modules')->get('permission_modules')->getResult();
        foreach ($getPermissions as $key => $value) {
            if (in_array($value->id, $permission)) {
                $modules_manage[] = ['modules_id' => $value->id, 'isEnabled' => 1, 'branch_id' => $schooolID];
            } else {
                $modules_manage[] = ['modules_id' => $value->id, 'isEnabled' => 0, 'branch_id' => $schooolID];
            }
        }
        $builder->insert_batch('modules_manage', $modules_manage);
    }
    public function getPackageListWebsite($website = true)
    {
        if ($website == true) {
            $builder->where('show_onwebsite', 1);
        }
        $builder->where('status', 1);
        $builder->order_by("free_trial desc, id asc");
        $get = $builder->get('saas_package')->getResult();
        return $get;
    }
    public function getFAQList()
    {
        $builder->order_by("id", "asc");
        $get = $builder->get('saas_cms_faq_list')->getResult();
        return $get;
    }
    public function getFeaturesList()
    {
        $get = $builder->get('saas_cms_features')->getResult();
        return $get;
    }
    public function getSettings($sel = "*")
    {
        $builder->select($sel);
        $builder->where('id', 1);
        $get = $builder->get('saas_settings')->row();
        return $get;
    }
    public function getPackageDetails($plan_id = '')
    {
        $builder->select('period_value,period_type,name,price,discount,free_trial');
        $builder->where('status', 1);
        $builder->where("id", $plan_id);
        $get = $builder->get('saas_package')->row();
        return $get;
    }
    public function getSchoolRegDetails($reference_no = '')
    {
        $builder->select('saas_school_register.*,saas_package.period_value,saas_package.period_type,saas_package.name,saas_package.price,saas_package.discount,saas_package.free_trial');
        $builder->from('saas_school_register');
        $builder->join('saas_package', 'saas_package.id = saas_school_register.package_id', 'inner');
        $builder->where('saas_school_register.reference_no', $reference_no);
        $q = $builder->get()->row_array();
        return $q;
    }
    public function checkReferenceNo($ref_no)
    {
        $builder->select("id");
        $builder->from('saas_school_register');
        $builder->where("reference_no", $ref_no);
        $query = $builder->get();
        $result = $query->row_array();
        if (!empty($result)) {
            return 1;
        } else {
            return 0;
        }
    }
    public function getPlanExpiryDate($plan_id = '')
    {
        $formats = 'd-M-Y';
        $get_format = get_global_setting('date_format');
        if ($get_format != '') {
            $formats = $get_format;
        }
        $getPlanDetails = $this->getPackageDetails($plan_id);
        $expiryDate = "";
        $period_value = $getPlanDetails->period_value;
        if ($getPlanDetails->period_type == 1) {
            $expiryDate = translate('lifetime');
        } elseif ($getPlanDetails->period_type == 2) {
            $expiryDate = date($formats, strtotime("+{$period_value} day"));
        } elseif ($getPlanDetails->period_type == 3) {
            $expiryDate = date($formats, strtotime("+{$period_value} month"));
        } elseif ($getPlanDetails->period_type == 4) {
            $expiryDate = date($formats, strtotime("+{$period_value} year"));
        }
        return $expiryDate;
    }
    public function getPendingSchool($id)
    {
        $builder->select('*');
        $builder->from('saas_school_register');
        $builder->where('id', $id);
        $builder->where('status !=', 1);
        $school = $builder->get()->row();
        return $school;
    }
    public function fileupload($media_name, $upload_path = "", $old_file = '', $enc = true)
    {
        if (file_exists($_FILES[$media_name]['tmp_name']) && !$_FILES[$media_name]['error'] == UPLOAD_ERR_NO_FILE) {
            $config['upload_path'] = $upload_path;
            $config['allowed_types'] = '*';
            if ($enc == true) {
                $config['encrypt_name'] = true;
            } else {
                $config['overwrite'] = true;
            }
            $this->upload->initialize($config);
            if ($this->upload->do_upload($media_name)) {
                if (!empty($old_file)) {
                    $file_name = $config['upload_path'] . $old_file;
                    if (file_exists($file_name)) {
                        unlink($file_name);
                    }
                }
                return $this->upload->data('file_name');
            }
        }
        return null;
    }
    public function save_faq($data)
    {
        $faq_data = array('title' => $data['title'], 'description' => $data['description']);
        if (isset($data['faq_id']) && !empty($data['faq_id'])) {
            $builder->where('id', $data['faq_id']);
            $builder->update('saas_cms_faq_list', $faq_data);
        } else {
            $builder->insert('saas_cms_faq_list', $faq_data);
        }
    }
    public function save_features($data)
    {
        $feature_data = array('title' => $data['title'], 'icon' => $data['icon'], 'description' => $data['description']);
        if (isset($data['feature_id']) && !empty($data['feature_id'])) {
            $builder->where('id', $data['feature_id']);
            $builder->update('saas_cms_features', $feature_data);
        } else {
            $builder->insert('saas_cms_features', $feature_data);
        }
    }
    public function getTransactions($start = '', $end = '')
    {
        $builder->select('tr.*,payment_types.name as payvia,branch.name as school_name,branch.id as bid,saas_package.name as plan_name');
        $builder->from('saas_subscriptions_transactions as tr');
        $builder->join('saas_subscriptions as ss', 'ss.id = tr.subscriptions_id', 'inner');
        $builder->join('saas_package', 'saas_package.id = tr.package_id', 'left');
        $builder->join('branch', 'branch.id = ss.school_id', 'inner');
        $builder->join('payment_types', 'payment_types.id = tr.payment_method', 'left');
        if (!empty($start) && !empty($end)) {
            $this->db->table('date(tr.created_at)  >=', $start)->where();
            $this->db->table('date(tr.created_at) <=', $end)->where();
        }
        $builder->order_by('tr.id', 'ASC');
        return $builder->get()->getResult();
    }
    public function getSectionsPaymentMethod()
    {
        $branchID = 9999;
        $builder->where('branch_id', $branchID);
        $builder->select('paypal_status,stripe_status,payumoney_status,paystack_status,razorpay_status,sslcommerz_status,jazzcash_status,midtrans_status,flutterwave_status,paytm_status,toyyibpay_status,payhere_status,tap_status')->from('payment_config');
        $status = $builder->get()->row_array();
        $payvia_list = array('' => translate('select_payment_method'));
        if ($status['paypal_status'] == 1) {
            $payvia_list['paypal'] = 'Paypal';
        }
        if ($status['stripe_status'] == 1) {
            $payvia_list['stripe'] = 'Stripe';
        }
        if ($status['payumoney_status'] == 1) {
            $payvia_list['payumoney'] = 'PayUmoney';
        }
        if ($status['paystack_status'] == 1) {
            $payvia_list['paystack'] = 'Paystack';
        }
        if ($status['razorpay_status'] == 1) {
            $payvia_list['razorpay'] = 'Razorpay';
        }
        if ($status['sslcommerz_status'] == 1) {
            $payvia_list['sslcommerz'] = 'sslcommerz';
        }
        if ($status['jazzcash_status'] == 1) {
            $payvia_list['jazzcash'] = 'Jazzcash';
        }
        if ($status['midtrans_status'] == 1) {
            $payvia_list['midtrans'] = 'Midtrans';
        }
        if ($status['flutterwave_status'] == 1) {
            $payvia_list['flutterwave'] = 'Flutter Wave';
        }
        if ($status['paytm_status'] == 1) {
            $payvia_list['paytm'] = 'Paytm';
        }
        if ($status['toyyibpay_status'] == 1) {
            $payvia_list['toyyibPay'] = 'toyyibPay';
        }
        if ($status['payhere_status'] == 1) {
            $payvia_list['payhere'] = 'Payhere';
        }
        if ($status['tap_status'] == 1) {
            $payvia_list['tap'] = 'Tap Payments';
        }
        return $payvia_list;
    }
    public function automaticSubscriptionApproval($saas_register_id = '', $currency = 'USD', $symbol = '$')
    {
        $getSchool = $this->getPendingSchool($saas_register_id);
        if (!empty($getSchool)) {
            $current_PackageID = $getSchool->package_id;
            //update status
            $this->db->table('id', $saas_register_id)->update('saas_school_register', ['status' => 1, 'payment_status' => 1, 'date_of_approval' => date('Y-m-d H:i:s')])->where();
            //stored in branch table
            $arrayBranch = array('name' => $getSchool->school_name, 'school_name' => $getSchool->school_name, 'email' => $getSchool->email, 'mobileno' => $getSchool->contact_number, 'currency' => $currency, 'symbol' => $symbol, 'city' => "", 'state' => "", 'address' => $getSchool->address, 'status' => 1);
            $builder->insert('branch', $arrayBranch);
            $schooolID = $builder->insert_id();
            $inser_data1 = array('branch_id' => $schooolID, 'name' => $getSchool->admin_name, 'sex' => $getSchool->gender = 1 ? 'male' : 'female', 'mobileno' => $getSchool->contact_number, 'joining_date' => date("Y-m-d"), 'email' => $getSchool->email);
            $inser_data2 = array('username' => $getSchool->username, 'role' => 2);
            //random staff id generate
            $inser_data1['staff_id'] = substr(app_generate_hash(), 3, 7);
            //save employee information in the database
            $builder->insert('staff', $inser_data1);
            $staffID = $builder->insert_id();
            //save employee login credential information in the database
            $inser_data2['active'] = 1;
            $inser_data2['user_id'] = $staffID;
            $inser_data2['password'] = $this->app_lib->pass_hashed($getSchool->password);
            $builder->insert('login_credential', $inser_data2);
            if (!empty($getSchool->logo)) {
                copy('./uploads/saas_school_logo/' . $getSchool->logo, "./uploads/app_image/logo-small-{$schooolID}.png");
            }
            $paymentData = [];
            if (!empty($getSchool->payment_data)) {
                if ($getSchool->payment_data == 'olp') {
                    $paymentData['payment_method'] = 15;
                    $paymentData['txn_id'] = $getSchool->reference_no;
                } else {
                    $paymentData = json_decode($getSchool->payment_data, TRUE);
                    $paymentData['payment_method'] = $paymentData['payment_method'];
                    $paymentData['txn_id'] = $paymentData['txn_id'];
                }
            }
            //saas data are prepared and stored in the database
            $this->saveSchoolSaasData($current_PackageID, $schooolID, $paymentData);
            // send email subscription approval confirmation
            $arrayData['email'] = $getSchool->email;
            $arrayData['package_id'] = $getSchool->package_id;
            $arrayData['admin_name'] = $getSchool->admin_name;
            $arrayData['reference_no'] = $getSchool->reference_no;
            $arrayData['school_name'] = $getSchool->school_name;
            $arrayData['login_username'] = $getSchool->username;
            $arrayData['password'] = $getSchool->password;
            $arrayData['subscription_start_date'] = _d(date("Y-m-d"));
            $arrayData['invoice_url'] = base_url('saas_website/purchase_complete/' . $arrayData['reference_no']);
            $this->saas_email_model->sentSubscriptionApprovalConfirmation($arrayData);
        }
    }
    //fahad test
    public function getRegistrationRequests()
    {
        $builder->select('*');
        $builder->from('saas_registration_form');
        $query = $builder->get();
        return $query->getResultArray();
    }
    // Update the status of a registration
    public function updateRegistrationStatus($id, $status)
    {
        $data = array('status' => $status, 'updated_at' => date('Y-m-d H:i:s'));
        $builder->where('id', $id);
        return $builder->update('saas_registration_form', $data);
    }
    // Delete a registration
    public function deleteRegistration($id)
    {
        return $this->db->table('saas_registration_form', array('id' => $id))->delete();
    }
    public function insert_registration_data($data)
    {
        return $builder->insert('saas_registration_form', $data);
    }
    public function getRegistrationRequestById($registration_id)
    {
        $builder->select('saas_registration_form.*, saas_package.name as package_name');
        $builder->from('saas_registration_form');
        $builder->join('saas_package', 'saas_registration_form.package_id = saas_package.id', 'left');
        $builder->where('saas_registration_form.registration_id', $registration_id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function getFilteredRegistrationRequests($start_date, $end_date, $status = '')
    {
        $builder->select('saas_registration_form.*, saas_package.name as package_name');
        $builder->from('saas_registration_form');
        $builder->join('saas_package', 'saas_registration_form.package_id = saas_package.id', 'left');
        $builder->where('saas_registration_form.created_at >=', $start_date);
        $builder->where('saas_registration_form.created_at <=', $end_date);
        if (!empty($status)) {
            $builder->where('saas_registration_form.status', $status);
        }
        $query = $builder->get();
        return $query->getResultArray();
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class SaasModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // get package list
    public function getPackageList()
    {
        $get = $builder->get('saas_package')->getResult();
        return $get;
    }
    // plan package save and update function
    public function packageSave($data)
    {
        $module = $this->request->getPost('modules');
        $period_type = $data['period_type'];
        $insertData = array('name' => $data['name'], 'price' => empty($data['price']) ? 0 : $data['price'], 'recommended' => empty($data['recommended']) ? 0 : 1, 'discount' => empty($data['discount']) ? 0 : $data['discount'], 'student_limit' => $data['student_limit'], 'staff_limit' => $data['staff_limit'], 'teacher_limit' => $data['teacher_limit'], 'parents_limit' => $data['parents_limit'], 'free_trial' => empty($data['free_trial']) ? 0 : 1, 'show_onwebsite' => isset($data['show_website']) ? 1 : 0, 'status' => isset($data['package_status']) ? 1 : 0, 'period_type' => $period_type, 'period_value' => $period_type == 1 ? 0 : $data['period_value'], 'permission' => json_encode($module));
        $id = $this->request->getPost('id');
        if (empty($id)) {
            $insertData['created_at'] = date('Y-m-d H:i:s');
            $builder->insert('saas_package', $insertData);
        } else {
            $insertData['updated_at'] = date('Y-m-d H:i:s');
            $builder->where('id', $id);
            $builder->update('saas_package', $insertData);
        }
        if ($db->affectedRows() > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function getPeriodType()
    {
        $arrayPeriod = array('' => translate('select'), '2' => translate('days'), '3' => translate('monthly'), '4' => translate('yearly'), '1' => translate('lifetime'));
        return $arrayPeriod;
    }
    public function getPeriodTypeWebsite()
    {
        $arrayPeriod = array('2' => translate('days'), '3' => translate('months'), '4' => translate('years'), '1' => translate('lifetime'));
        return $arrayPeriod;
    }
    public function getSaasPackage()
    {
        $arrayData = array("" => translate('select'));
        $builder->where('status', 1);
        $result = $builder->get('saas_package')->getResult();
        foreach ($result as $row) {
            $arrayData[$row->id] = $row->name;
        }
        return $arrayData;
    }
    public function getSubscriptionsExpiredNotification()
    {
        $message = "";
        $sql = "SELECT `expired_alert`,`expired_alert_days`,`expired_alert_message`,`expired_message` FROM `saas_settings` WHERE `id` = '1'";
        $settings = $db->query($sql)->row();
        if (!empty($settings)) {
            if ($settings->expired_alert == 1) {
                $days = $settings->expired_alert_days;
                $date = date('Y-m-d', strtotime("+ {$days} days"));
                $school_id = get_loggedin_branch_id();
                $sql = "SELECT `expire_date` FROM `saas_subscriptions` WHERE date(`expire_date`) <= " . $db->escape($date) . " AND `school_id` = " . $db->escape($school_id);
                $subscriptions = $db->query($sql)->row();
                if (!empty($subscriptions)) {
                    if (date("Y-m-d", strtotime($subscriptions->expire_date)) < date("Y-m-d")) {
                        return $settings->expired_message;
                    }
                    $date1 = new DateTime(date("Y-m-d"));
                    $date2 = new DateTime($subscriptions->expire_date);
                    $diff = $date2->diff($date1)->format("%a");
                    $days = intval($diff);
                    $message = $settings->expired_alert_message;
                    $message = str_replace('{days}', $days, $message);
                }
            }
        }
        return $message;
    }
    public function getSchool($id)
    {
        $builder->select('branch.*,saas_subscriptions.package_id,saas_subscriptions.expire_date,saas_subscriptions.id as subscriptions_id,saas_subscriptions.upgrade_lasttime');
        $builder->from('branch');
        $builder->join('saas_subscriptions', 'saas_subscriptions.school_id = branch.id', 'inner');
        $builder->where('branch.id', $id);
        $school = $builder->get()->row();
        return $school;
    }
    public function getSubscriptionList($type = '')
    {
        $builder->select('branch.id as bid,branch.name as branch_name,branch.status,upgrade_lasttime,email,mobileno,saas_subscriptions.expire_date,sp.name as package_name,sp.period_type,saas_subscriptions.created_at,sp.price,free_trial,sp.discount');
        $builder->from('branch');
        $builder->join('saas_subscriptions', 'saas_subscriptions.school_id = branch.id', 'inner');
        $builder->join('saas_package as sp', 'sp.id = saas_subscriptions.package_id', 'left');
        if (preg_match('/^[1-9][0-9]*$/', $type)) {
            if ($type == 1) {
                $builder->where('branch.status', 1);
                $this->db->table("date(saas_subscriptions.expire_date) >", date("Y-m-d"))->where();
            }
            if ($type == 2) {
                $builder->where('branch.status', 0);
            }
            if ($type == 3) {
                $this->db->table("date(saas_subscriptions.expire_date) <", date("Y-m-d"))->where();
            }
        }
        return $builder->get()->getResult();
    }
    public function getPendingRequest($start = '', $end = '')
    {
        $builder->select('saas_school_register.*,sp.name as package_name,IFNULL(sp.price-sp.discount, 0) as plan_price');
        $builder->from('saas_school_register');
        $builder->join('saas_package as sp', 'sp.id = saas_school_register.package_id', 'left');
        if (!empty($start) && !empty($end)) {
            $this->db->table('date(saas_school_register.created_at)  >=', $start)->where();
            $this->db->table('date(saas_school_register.created_at) <=', $end)->where();
        }
        return $builder->get()->getResult();
    }
    public function checkSubscriptionValidity($school_id = "")
    {
        if (!is_superadmin_loggedin()) {
            if (empty($school_id)) {
                $school_id = get_loggedin_branch_id();
            }
            $sql = "SELECT `id`,`expire_date` FROM `saas_subscriptions` WHERE `school_id` = " . $db->escape($school_id);
            $subscriptions = $db->query($sql)->row();
            if (empty($subscriptions)) {
                return true;
            }
            if ($subscriptions->expire_date == "") {
                return true;
            }
            if (date("Y-m-d", strtotime($subscriptions->expire_date)) < date("Y-m-d")) {
                set_alert('error', translate('subscription_expired'));
                return false;
            }
        }
        return true;
    }
    public function schoolSave($data)
    {
        $arrayBranch = array('name' => $data['branch_name'], 'school_name' => $data['school_name'], 'email' => $data['email'], 'mobileno' => $data['mobileno'], 'currency' => $data['currency'], 'symbol' => $data['currency_symbol'], 'country' => $data['country'], 'city' => $data['city'], 'state' => $data['state'], 'address' => $data['address'], 'status' => $data['state_id']);
        if (!isset($data['branch_id'])) {
            $builder->insert('branch', $arrayBranch);
            $id = $builder->insert_id();
        } else {
            $id = $data['branch_id'];
            $builder->where('id', $data['branch_id']);
            $builder->update('branch', $arrayBranch);
        }
        $file_upload = false;
        if (isset($_FILES["logo_file"]) && !empty($_FILES['logo_file']['name'])) {
            $fileInfo = pathinfo($_FILES["logo_file"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["logo_file"]["tmp_name"], "uploads/app_image/logo-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["text_logo"]) && !empty($_FILES['text_logo']['name'])) {
            $fileInfo = pathinfo($_FILES["text_logo"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["text_logo"]["tmp_name"], "uploads/app_image/logo-small-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["print_file"]) && !empty($_FILES['print_file']['name'])) {
            $fileInfo = pathinfo($_FILES["print_file"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["print_file"]["tmp_name"], "uploads/app_image/printing-logo-" . $img_name);
            $file_upload = true;
        }
        if (isset($_FILES["report_card"]) && !empty($_FILES['report_card']['name'])) {
            $fileInfo = pathinfo($_FILES["report_card"]["name"]);
            $img_name = $id . '.' . $fileInfo['extension'];
            move_uploaded_file($_FILES["report_card"]["tmp_name"], "uploads/app_image/report-card-logo-" . $img_name);
            $file_upload = true;
        }
        return $id;
    }
    public function saveSchoolSaasData($package_id = '', $schooolID = '', $paymentData = [])
    {
        // Fetch currency from GLOBAL_SETTINGS
        $globalSettings = $builder->get('global_settings')->row();
        $currency = $globalSettings ? $globalSettings->currency : 'USD';
        // Default to 'USD' if not set
        //get saas package information
        $saasPackage = $db->table('saas_package')->get('saas_package')->row();
        $periodValue = $saasPackage->period_value;
        $dateAdd = '';
        if ($saasPackage->period_type == 2) {
            $dateAdd = "+{$periodValue} days";
        }
        if ($saasPackage->period_type == 3) {
            $dateAdd = "+{$periodValue} month";
        }
        if ($saasPackage->period_type == 4) {
            $dateAdd = "+{$periodValue} year";
        }
        if (!empty($dateAdd)) {
            $dateAdd = date('Y-m-d', strtotime($dateAdd));
        }
        //add subscriptions data stored in the database
        $arraySubscriptions = array('package_id' => $package_id, 'school_id' => $schooolID, 'expire_date' => $dateAdd);
        $builder->insert('saas_subscriptions', $arraySubscriptions);
        $subscriptionsID = $builder->insert_id();
        //add subscriptions transactions data stored in the database
        $arraySubscriptionsTransactions = array('subscriptions_id' => $subscriptionsID, 'package_id' => $package_id, 'payment_id' => empty($paymentData['txn_id']) ? substr(app_generate_hash(), 3, 8) : $paymentData['txn_id'], 'amount' => $saasPackage->price, 'discount' => $saasPackage->discount, 'payment_method' => empty($paymentData['payment_method']) ? 1 : $paymentData['payment_method'], 'purchase_date' => date("Y-m-d"), 'expire_date' => $dateAdd, 'currency' => $currency);
        $builder->insert('saas_subscriptions_transactions', $arraySubscriptionsTransactions);
        //manage modules permission
        $permission = json_decode($saasPackage->permission, true);
        $modules_manage = array();
        $getPermissions = $db->table('permission_modules')->get('permission_modules')->getResult();
        foreach ($getPermissions as $key => $value) {
            if (in_array($value->id, $permission)) {
                $modules_manage[] = ['modules_id' => $value->id, 'isEnabled' => 1, 'branch_id' => $schooolID];
            } else {
                $modules_manage[] = ['modules_id' => $value->id, 'isEnabled' => 0, 'branch_id' => $schooolID];
            }
        }
        $builder->insert_batch('modules_manage', $modules_manage);
    }
    public function getPackageListWebsite($website = true)
    {
        if ($website == true) {
            $builder->where('show_onwebsite', 1);
        }
        $builder->where('status', 1);
        $builder->order_by("free_trial desc, id asc");
        $get = $builder->get('saas_package')->getResult();
        return $get;
    }
    public function getFAQList()
    {
        $builder->order_by("id", "asc");
        $get = $builder->get('saas_cms_faq_list')->getResult();
        return $get;
    }
    public function getFeaturesList()
    {
        $get = $builder->get('saas_cms_features')->getResult();
        return $get;
    }
    public function getSettings($sel = "*")
    {
        $builder->select($sel);
        $builder->where('id', 1);
        $get = $builder->get('saas_settings')->row();
        return $get;
    }
    public function getPackageDetails($plan_id = '')
    {
        $builder->select('period_value,period_type,name,price,discount,free_trial');
        $builder->where('status', 1);
        $builder->where("id", $plan_id);
        $get = $builder->get('saas_package')->row();
        return $get;
    }
    public function getSchoolRegDetails($reference_no = '')
    {
        $builder->select('saas_school_register.*,saas_package.period_value,saas_package.period_type,saas_package.name,saas_package.price,saas_package.discount,saas_package.free_trial');
        $builder->from('saas_school_register');
        $builder->join('saas_package', 'saas_package.id = saas_school_register.package_id', 'inner');
        $builder->where('saas_school_register.reference_no', $reference_no);
        $q = $builder->get()->row_array();
        return $q;
    }
    public function checkReferenceNo($ref_no)
    {
        $builder->select("id");
        $builder->from('saas_school_register');
        $builder->where("reference_no", $ref_no);
        $query = $builder->get();
        $result = $query->row_array();
        if (!empty($result)) {
            return 1;
        } else {
            return 0;
        }
    }
    public function getPlanExpiryDate($plan_id = '')
    {
        $formats = 'd-M-Y';
        $get_format = get_global_setting('date_format');
        if ($get_format != '') {
            $formats = $get_format;
        }
        $getPlanDetails = $this->getPackageDetails($plan_id);
        $expiryDate = "";
        $period_value = $getPlanDetails->period_value;
        if ($getPlanDetails->period_type == 1) {
            $expiryDate = translate('lifetime');
        } elseif ($getPlanDetails->period_type == 2) {
            $expiryDate = date($formats, strtotime("+{$period_value} day"));
        } elseif ($getPlanDetails->period_type == 3) {
            $expiryDate = date($formats, strtotime("+{$period_value} month"));
        } elseif ($getPlanDetails->period_type == 4) {
            $expiryDate = date($formats, strtotime("+{$period_value} year"));
        }
        return $expiryDate;
    }
    public function getPendingSchool($id)
    {
        $builder->select('*');
        $builder->from('saas_school_register');
        $builder->where('id', $id);
        $builder->where('status !=', 1);
        $school = $builder->get()->row();
        return $school;
    }
    public function fileupload($media_name, $upload_path = "", $old_file = '', $enc = true)
    {
        if (file_exists($_FILES[$media_name]['tmp_name']) && !$_FILES[$media_name]['error'] == UPLOAD_ERR_NO_FILE) {
            $config['upload_path'] = $upload_path;
            $config['allowed_types'] = '*';
            if ($enc == true) {
                $config['encrypt_name'] = true;
            } else {
                $config['overwrite'] = true;
            }
            $this->upload->initialize($config);
            if ($this->upload->do_upload($media_name)) {
                if (!empty($old_file)) {
                    $file_name = $config['upload_path'] . $old_file;
                    if (file_exists($file_name)) {
                        unlink($file_name);
                    }
                }
                return $this->upload->data('file_name');
            }
        }
        return null;
    }
    public function save_faq($data)
    {
        $faq_data = array('title' => $data['title'], 'description' => $data['description']);
        if (isset($data['faq_id']) && !empty($data['faq_id'])) {
            $builder->where('id', $data['faq_id']);
            $builder->update('saas_cms_faq_list', $faq_data);
        } else {
            $builder->insert('saas_cms_faq_list', $faq_data);
        }
    }
    public function save_features($data)
    {
        $feature_data = array('title' => $data['title'], 'icon' => $data['icon'], 'description' => $data['description']);
        if (isset($data['feature_id']) && !empty($data['feature_id'])) {
            $builder->where('id', $data['feature_id']);
            $builder->update('saas_cms_features', $feature_data);
        } else {
            $builder->insert('saas_cms_features', $feature_data);
        }
    }
    public function getTransactions($start = '', $end = '')
    {
        $builder->select('tr.*,payment_types.name as payvia,branch.name as school_name,branch.id as bid,saas_package.name as plan_name');
        $builder->from('saas_subscriptions_transactions as tr');
        $builder->join('saas_subscriptions as ss', 'ss.id = tr.subscriptions_id', 'inner');
        $builder->join('saas_package', 'saas_package.id = tr.package_id', 'left');
        $builder->join('branch', 'branch.id = ss.school_id', 'inner');
        $builder->join('payment_types', 'payment_types.id = tr.payment_method', 'left');
        if (!empty($start) && !empty($end)) {
            $this->db->table('date(tr.created_at)  >=', $start)->where();
            $this->db->table('date(tr.created_at) <=', $end)->where();
        }
        $builder->order_by('tr.id', 'ASC');
        return $builder->get()->getResult();
    }
    public function getSectionsPaymentMethod()
    {
        $branchID = 9999;
        $builder->where('branch_id', $branchID);
        $builder->select('paypal_status,stripe_status,payumoney_status,paystack_status,razorpay_status,sslcommerz_status,jazzcash_status,midtrans_status,flutterwave_status,paytm_status,toyyibpay_status,payhere_status,tap_status')->from('payment_config');
        $status = $builder->get()->row_array();
        $payvia_list = array('' => translate('select_payment_method'));
        if ($status['paypal_status'] == 1) {
            $payvia_list['paypal'] = 'Paypal';
        }
        if ($status['stripe_status'] == 1) {
            $payvia_list['stripe'] = 'Stripe';
        }
        if ($status['payumoney_status'] == 1) {
            $payvia_list['payumoney'] = 'PayUmoney';
        }
        if ($status['paystack_status'] == 1) {
            $payvia_list['paystack'] = 'Paystack';
        }
        if ($status['razorpay_status'] == 1) {
            $payvia_list['razorpay'] = 'Razorpay';
        }
        if ($status['sslcommerz_status'] == 1) {
            $payvia_list['sslcommerz'] = 'sslcommerz';
        }
        if ($status['jazzcash_status'] == 1) {
            $payvia_list['jazzcash'] = 'Jazzcash';
        }
        if ($status['midtrans_status'] == 1) {
            $payvia_list['midtrans'] = 'Midtrans';
        }
        if ($status['flutterwave_status'] == 1) {
            $payvia_list['flutterwave'] = 'Flutter Wave';
        }
        if ($status['paytm_status'] == 1) {
            $payvia_list['paytm'] = 'Paytm';
        }
        if ($status['toyyibpay_status'] == 1) {
            $payvia_list['toyyibPay'] = 'toyyibPay';
        }
        if ($status['payhere_status'] == 1) {
            $payvia_list['payhere'] = 'Payhere';
        }
        if ($status['tap_status'] == 1) {
            $payvia_list['tap'] = 'Tap Payments';
        }
        return $payvia_list;
    }
    public function automaticSubscriptionApproval($saas_register_id = '', $currency = 'USD', $symbol = '$')
    {
        $getSchool = $this->getPendingSchool($saas_register_id);
        if (!empty($getSchool)) {
            $current_PackageID = $getSchool->package_id;
            //update status
            $this->db->table('id', $saas_register_id)->update('saas_school_register', ['status' => 1, 'payment_status' => 1, 'date_of_approval' => date('Y-m-d H:i:s')])->where();
            //stored in branch table
            $arrayBranch = array('name' => $getSchool->school_name, 'school_name' => $getSchool->school_name, 'email' => $getSchool->email, 'mobileno' => $getSchool->contact_number, 'currency' => $currency, 'symbol' => $symbol, 'city' => "", 'state' => "", 'address' => $getSchool->address, 'status' => 1);
            $builder->insert('branch', $arrayBranch);
            $schooolID = $builder->insert_id();
            $inser_data1 = array('branch_id' => $schooolID, 'name' => $getSchool->admin_name, 'sex' => $getSchool->gender = 1 ? 'male' : 'female', 'mobileno' => $getSchool->contact_number, 'joining_date' => date("Y-m-d"), 'email' => $getSchool->email);
            $inser_data2 = array('username' => $getSchool->username, 'role' => 2);
            //random staff id generate
            $inser_data1['staff_id'] = substr(app_generate_hash(), 3, 7);
            //save employee information in the database
            $builder->insert('staff', $inser_data1);
            $staffID = $builder->insert_id();
            //save employee login credential information in the database
            $inser_data2['active'] = 1;
            $inser_data2['user_id'] = $staffID;
            $inser_data2['password'] = $this->app_lib->pass_hashed($getSchool->password);
            $builder->insert('login_credential', $inser_data2);
            if (!empty($getSchool->logo)) {
                copy('./uploads/saas_school_logo/' . $getSchool->logo, "./uploads/app_image/logo-small-{$schooolID}.png");
            }
            $paymentData = [];
            if (!empty($getSchool->payment_data)) {
                if ($getSchool->payment_data == 'olp') {
                    $paymentData['payment_method'] = 15;
                    $paymentData['txn_id'] = $getSchool->reference_no;
                } else {
                    $paymentData = json_decode($getSchool->payment_data, TRUE);
                    $paymentData['payment_method'] = $paymentData['payment_method'];
                    $paymentData['txn_id'] = $paymentData['txn_id'];
                }
            }
            //saas data are prepared and stored in the database
            $this->saveSchoolSaasData($current_PackageID, $schooolID, $paymentData);
            // send email subscription approval confirmation
            $arrayData['email'] = $getSchool->email;
            $arrayData['package_id'] = $getSchool->package_id;
            $arrayData['admin_name'] = $getSchool->admin_name;
            $arrayData['reference_no'] = $getSchool->reference_no;
            $arrayData['school_name'] = $getSchool->school_name;
            $arrayData['login_username'] = $getSchool->username;
            $arrayData['password'] = $getSchool->password;
            $arrayData['subscription_start_date'] = _d(date("Y-m-d"));
            $arrayData['invoice_url'] = base_url('saas_website/purchase_complete/' . $arrayData['reference_no']);
            $this->saas_emailModel->sentSubscriptionApprovalConfirmation($arrayData);
        }
    }
    //fahad test
    public function getRegistrationRequests()
    {
        $builder->select('*');
        $builder->from('saas_registration_form');
        $query = $builder->get();
        return $query->getResultArray();
    }
    // Update the status of a registration
    public function updateRegistrationStatus($id, $status)
    {
        $data = array('status' => $status, 'updated_at' => date('Y-m-d H:i:s'));
        $builder->where('id', $id);
        return $builder->update('saas_registration_form', $data);
    }
    // Delete a registration
    public function deleteRegistration($id)
    {
        return $this->db->table('saas_registration_form', array('id' => $id))->delete();
    }
    public function insert_registration_data($data)
    {
        return $builder->insert('saas_registration_form', $data);
    }
    public function getRegistrationRequestById($registration_id)
    {
        $builder->select('saas_registration_form.*, saas_package.name as package_name');
        $builder->from('saas_registration_form');
        $builder->join('saas_package', 'saas_registration_form.package_id = saas_package.id', 'left');
        $builder->where('saas_registration_form.registration_id', $registration_id);
        $query = $builder->get();
        return $query->row_array();
    }
    public function getFilteredRegistrationRequests($start_date, $end_date, $status = '')
    {
        $builder->select('saas_registration_form.*, saas_package.name as package_name');
        $builder->from('saas_registration_form');
        $builder->join('saas_package', 'saas_registration_form.package_id = saas_package.id', 'left');
        $builder->where('saas_registration_form.created_at >=', $start_date);
        $builder->where('saas_registration_form.created_at <=', $end_date);
        if (!empty($status)) {
            $builder->where('saas_registration_form.status', $status);
        }
        $query = $builder->get();
        return $query->getResultArray();
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/OnlineAdmissionModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OnlineAdmissionModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // moderator student all information
    public function save($data = array(), $getBranch = array())
    {
        $existStudent_photo = $this->request->getPost('exist_student_photo');
        $existGuardian_photo = $this->request->getPost('exist_guardian_photo');
        if (empty($existStudent_photo)) {
            $studentPhoto = $this->uploadImage('student', 'student_photo');
        } else {
            $studentPhoto = $existStudent_photo;
        }
        if (empty($existGuardian_photo)) {
            $guardianPhoto = $this->uploadImage('parent', 'guardian_photo');
        } else {
            $guardianPhoto = $existGuardian_photo;
        }
        $hostelID = empty($data['hostel_id']) ? 0 : $data['hostel_id'];
        $roomID = empty($data['room_id']) ? 0 : $data['room_id'];
        $previous_details = array('school_name' => $this->request->getPost('school_name'), 'qualification' => $this->request->getPost('qualification'), 'remarks' => $this->request->getPost('previous_remarks'));
        if (empty($previous_details)) {
            $previous_details = "";
        } else {
            $previous_details = json_encode($previous_details);
        }
        $inser_data1 = array('register_no' => $this->request->getPost('register_no'), 'admission_date' => isset($data['admission_date']) ? date("Y-m-d", strtotime($data['admission_date'])) : "", 'first_name' => $this->request->getPost('first_name'), 'last_name' => $this->request->getPost('last_name'), 'gender' => $this->request->getPost('gender'), 'birthday' => isset($data['birthday']) ? date("Y-m-d", strtotime($data['birthday'])) : "", 'religion' => $this->request->getPost('religion'), 'caste' => $this->request->getPost('caste'), 'blood_group' => $this->request->getPost('blood_group'), 'mother_tongue' => $this->request->getPost('mother_tongue'), 'current_address' => $this->request->getPost('current_address'), 'permanent_address' => $this->request->getPost('permanent_address'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'mobileno' => $this->request->getPost('mobileno'), 'category_id' => isset($data['category_id']) ? $data['category_id'] : 0, 'email' => $this->request->getPost('email'), 'parent_id' => "", 'route_id' => $this->request->getPost('route_id'), 'vehicle_id' => $this->request->getPost('vehicle_id'), 'hostel_id' => $hostelID, 'room_id' => $roomID, 'previous_details' => $previous_details, 'photo' => $studentPhoto);
        // add new guardian all information in db
        if (!empty($data['grd_name']) || !empty($data['father_name'])) {
            $arrayParent = array('name' => $this->request->getPost('grd_name'), 'relation' => $this->request->getPost('grd_relation'), 'father_name' => $this->request->getPost('father_name'), 'mother_name' => $this->request->getPost('mother_name'), 'occupation' => $this->request->getPost('grd_occupation'), 'income' => $this->request->getPost('grd_income'), 'education' => $this->request->getPost('grd_education'), 'email' => $this->request->getPost('grd_email'), 'mobileno' => $this->request->getPost('grd_mobileno'), 'address' => $this->request->getPost('grd_address'), 'city' => $this->request->getPost('grd_city'), 'state' => $this->request->getPost('grd_state'), 'branch_id' => $getBranch['id'], 'photo' => $guardianPhoto);
            $builder->insert('parent', $arrayParent);
            $parentID = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getBranch['grd_generate'] == 1) {
                $grd_username = $getBranch['grd_username_prefix'] . $parentID;
                $grd_password = $getBranch['grd_default_password'];
            } else {
                $grd_username = $this->request->getPost('grd_username');
                $grd_password = $this->request->getPost('grd_password');
            }
            $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
            $builder->insert('login_credential', $parent_credential);
            // insert student all information in the database
            $inser_data1['parent_id'] = $parentID;
        } else {
            $inser_data1['parent_id'] = 0;
        }
        $builder->insert('student', $inser_data1);
        $student_id = $builder->insert_id();
        // save student login credential information in the database
        if ($getBranch['stu_generate'] == 1) {
            $stu_username = $getBranch['stu_username_prefix'] . $student_id;
            $stu_password = $getBranch['stu_default_password'];
        } else {
            $stu_username = $this->request->getPost('username');
            $stu_password = $this->request->getPost('password');
        }
        $inser_data2 = array('user_id' => $student_id, 'username' => $stu_username, 'role' => 7, 'password' => $this->app_lib->pass_hashed($stu_password));
        $builder->insert('login_credential', $inser_data2);
        // return student information
        $studentData = array('student_id' => $student_id, 'email' => $this->request->getPost('email'), 'username' => $stu_username, 'password' => $stu_password);
        if (!empty($data['grd_name']) || !empty($data['father_name'])) {
            // send parent account activate email
            $emailData = array('name' => $this->request->getPost('grd_name'), 'username' => $grd_username, 'password' => $grd_password, 'user_role' => 6, 'email' => $this->request->getPost('grd_email'));
            $this->email_model->sentStaffRegisteredAccount($emailData);
        }
        return $studentData;
    }
    public function getOnlineAdmission($class_id = '', $branch_id = '')
    {
        $builder->select('oa.*,c.name as class_name,se.name as section_name');
        $builder->from('online_admission as oa');
        $builder->join('class as c', 'oa.class_id = c.id', 'left');
        $builder->join('section as se', 'oa.section_id = se.id', 'left');
        $builder->where('oa.class_id', $class_id);
        $builder->where('oa.branch_id', $branch_id);
        $builder->order_by('oa.id', 'ASC');
        $query = $builder->get();
        return $query->getResultArray();
    }
    public function regSerNumber($school_id = '')
    {
        $registerNoPrefix = '';
        if (!empty($school_id)) {
            $schoolconfig = $db->table('branch')->get('branch')->row();
            if ($schoolconfig->reg_prefix_enable == 1) {
                $registerNoPrefix = $schoolconfig->institution_code . $schoolconfig->reg_start_from;
                $last_registerNo = $this->app_lib->studentLastRegID($school_id);
                if (!empty($last_registerNo)) {
                    $last_registerNo_digit = str_replace($schoolconfig->institution_code, "", $last_registerNo->register_no);
                    if (!is_numeric($last_registerNo_digit)) {
                        $last_registerNo_digit = $schoolconfig->reg_start_from;
                    } else {
                        $last_registerNo_digit = $last_registerNo_digit + 1;
                    }
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $last_registerNo_digit);
                } else {
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $schoolconfig->reg_start_from);
                }
            }
            return $registerNoPrefix;
        } else {
            $config = $db->table('global_settings')->get('global_settings')->row();
            if ($config->reg_prefix == 'on') {
                $prefix = $config->institution_code;
            }
            $result = $builder->select("max(id) as id")->get('student')->row_array();
            $id = $result["id"];
            if (!empty($id)) {
                $maxNum = str_pad($id + 1, 5, '0', STR_PAD_LEFT);
            } else {
                $maxNum = '00001';
            }
            return $prefix . $maxNum;
        }
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OnlineAdmissionModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();

        parent::__construct();
    }
    // moderator student all information
    public function save($data = array(), $getBranch = array())
    {
        $existStudent_photo = $this->request->getPost('exist_student_photo');
        $existGuardian_photo = $this->request->getPost('exist_guardian_photo');
        if (empty($existStudent_photo)) {
            $studentPhoto = $this->uploadImage('student', 'student_photo');
        } else {
            $studentPhoto = $existStudent_photo;
        }
        if (empty($existGuardian_photo)) {
            $guardianPhoto = $this->uploadImage('parent', 'guardian_photo');
        } else {
            $guardianPhoto = $existGuardian_photo;
        }
        $hostelID = empty($data['hostel_id']) ? 0 : $data['hostel_id'];
        $roomID = empty($data['room_id']) ? 0 : $data['room_id'];
        $previous_details = array('school_name' => $this->request->getPost('school_name'), 'qualification' => $this->request->getPost('qualification'), 'remarks' => $this->request->getPost('previous_remarks'));
        if (empty($previous_details)) {
            $previous_details = "";
        } else {
            $previous_details = json_encode($previous_details);
        }
        $inser_data1 = array('register_no' => $this->request->getPost('register_no'), 'admission_date' => isset($data['admission_date']) ? date("Y-m-d", strtotime($data['admission_date'])) : "", 'first_name' => $this->request->getPost('first_name'), 'last_name' => $this->request->getPost('last_name'), 'gender' => $this->request->getPost('gender'), 'birthday' => isset($data['birthday']) ? date("Y-m-d", strtotime($data['birthday'])) : "", 'religion' => $this->request->getPost('religion'), 'caste' => $this->request->getPost('caste'), 'blood_group' => $this->request->getPost('blood_group'), 'mother_tongue' => $this->request->getPost('mother_tongue'), 'current_address' => $this->request->getPost('current_address'), 'permanent_address' => $this->request->getPost('permanent_address'), 'city' => $this->request->getPost('city'), 'state' => $this->request->getPost('state'), 'mobileno' => $this->request->getPost('mobileno'), 'category_id' => isset($data['category_id']) ? $data['category_id'] : 0, 'email' => $this->request->getPost('email'), 'parent_id' => "", 'route_id' => $this->request->getPost('route_id'), 'vehicle_id' => $this->request->getPost('vehicle_id'), 'hostel_id' => $hostelID, 'room_id' => $roomID, 'previous_details' => $previous_details, 'photo' => $studentPhoto);
        // add new guardian all information in db
        if (!empty($data['grd_name']) || !empty($data['father_name'])) {
            $arrayParent = array('name' => $this->request->getPost('grd_name'), 'relation' => $this->request->getPost('grd_relation'), 'father_name' => $this->request->getPost('father_name'), 'mother_name' => $this->request->getPost('mother_name'), 'occupation' => $this->request->getPost('grd_occupation'), 'income' => $this->request->getPost('grd_income'), 'education' => $this->request->getPost('grd_education'), 'email' => $this->request->getPost('grd_email'), 'mobileno' => $this->request->getPost('grd_mobileno'), 'address' => $this->request->getPost('grd_address'), 'city' => $this->request->getPost('grd_city'), 'state' => $this->request->getPost('grd_state'), 'branch_id' => $getBranch['id'], 'photo' => $guardianPhoto);
            $builder->insert('parent', $arrayParent);
            $parentID = $builder->insert_id();
            // save guardian login credential information in the database
            if ($getBranch['grd_generate'] == 1) {
                $grd_username = $getBranch['grd_username_prefix'] . $parentID;
                $grd_password = $getBranch['grd_default_password'];
            } else {
                $grd_username = $this->request->getPost('grd_username');
                $grd_password = $this->request->getPost('grd_password');
            }
            $parent_credential = array('username' => $grd_username, 'role' => 6, 'user_id' => $parentID, 'password' => $this->app_lib->pass_hashed($grd_password));
            $builder->insert('login_credential', $parent_credential);
            // insert student all information in the database
            $inser_data1['parent_id'] = $parentID;
        } else {
            $inser_data1['parent_id'] = 0;
        }
        $builder->insert('student', $inser_data1);
        $student_id = $builder->insert_id();
        // save student login credential information in the database
        if ($getBranch['stu_generate'] == 1) {
            $stu_username = $getBranch['stu_username_prefix'] . $student_id;
            $stu_password = $getBranch['stu_default_password'];
        } else {
            $stu_username = $this->request->getPost('username');
            $stu_password = $this->request->getPost('password');
        }
        $inser_data2 = array('user_id' => $student_id, 'username' => $stu_username, 'role' => 7, 'password' => $this->app_lib->pass_hashed($stu_password));
        $builder->insert('login_credential', $inser_data2);
        // return student information
        $studentData = array('student_id' => $student_id, 'email' => $this->request->getPost('email'), 'username' => $stu_username, 'password' => $stu_password);
        if (!empty($data['grd_name']) || !empty($data['father_name'])) {
            // send parent account activate email
            $emailData = array('name' => $this->request->getPost('grd_name'), 'username' => $grd_username, 'password' => $grd_password, 'user_role' => 6, 'email' => $this->request->getPost('grd_email'));
            $this->emailModel->sentStaffRegisteredAccount($emailData);
        }
        return $studentData;
    }
    public function getOnlineAdmission($class_id = '', $branch_id = '')
    {
        $builder->select('oa.*,c.name as class_name,se.name as section_name');
        $builder->from('online_admission as oa');
        $builder->join('class as c', 'oa.class_id = c.id', 'left');
        $builder->join('section as se', 'oa.section_id = se.id', 'left');
        $builder->where('oa.class_id', $class_id);
        $builder->where('oa.branch_id', $branch_id);
        $builder->order_by('oa.id', 'ASC');
        $query = $builder->get();
        return $query->getResultArray();
    }
    public function regSerNumber($school_id = '')
    {
        $registerNoPrefix = '';
        if (!empty($school_id)) {
            $schoolconfig = $db->table('branch')->get('branch')->row();
            if ($schoolconfig->reg_prefix_enable == 1) {
                $registerNoPrefix = $schoolconfig->institution_code . $schoolconfig->reg_start_from;
                $last_registerNo = $this->app_lib->studentLastRegID($school_id);
                if (!empty($last_registerNo)) {
                    $last_registerNo_digit = str_replace($schoolconfig->institution_code, "", $last_registerNo->register_no);
                    if (!is_numeric($last_registerNo_digit)) {
                        $last_registerNo_digit = $schoolconfig->reg_start_from;
                    } else {
                        $last_registerNo_digit = $last_registerNo_digit + 1;
                    }
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $last_registerNo_digit);
                } else {
                    $registerNoPrefix = $schoolconfig->institution_code . sprintf("%0" . $schoolconfig->reg_prefix_digit . "d", $schoolconfig->reg_start_from);
                }
            }
            return $registerNoPrefix;
        } else {
            $config = $db->table('global_settings')->get('global_settings')->row();
            if ($config->reg_prefix == 'on') {
                $prefix = $config->institution_code;
            }
            $result = $builder->select("max(id) as id")->get('student')->row_array();
            $id = $result["id"];
            if (!empty($id)) {
                $maxNum = str_pad($id + 1, 5, '0', STR_PAD_LEFT);
            } else {
                $maxNum = '00001';
            }
            return $prefix . $maxNum;
        }
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/OfflinePaymentsModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OfflinePaymentsModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function typeSave($data = array())
    {
        $arrayData = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['type_name'], 'note' => $data['note']);
        if (!isset($data['type_id'])) {
            $builder->insert('offline_payment_types', $arrayData);
        } else {
            $builder->where('id', $data['type_id']);
            $builder->update('offline_payment_types', $arrayData);
        }
    }
    public function getOfflinePaymentsList($where = array(), $single = false)
    {
        $builder->select('op.*,CONCAT_WS(" ",student.first_name, student.last_name) as fullname,student.email,student.mobileno,student.register_no,class.name as class_name,section.name as section_name,branch.name as branchname');
        $builder->from('offline_fees_payments as op');
        $builder->join('enroll', 'enroll.id = op.student_enroll_id', 'left');
        $builder->join('branch', 'branch.id = enroll.branch_id', 'left');
        $builder->join('student', 'student.id = enroll.student_id', 'left');
        $builder->join('class', 'class.id = enroll.class_id', 'left');
        $builder->join('section', 'section.id = enroll.section_id', 'left');
        if (!empty($where)) {
            $builder->where($where);
        }
        if ($single == true) {
            $result = $builder->get()->row_array();
        } else {
            $builder->order_by('op.id', 'ASC');
            $result = $builder->get()->getResult();
        }
        return $result;
    }
    public function update($id = '')
    {
        $r = $db->table('offline_fees_payments')->get('offline_fees_payments')->row();
        $arrayFees = array('allocation_id' => $r->fees_allocation_id, 'type_id' => $r->fees_type_id, 'amount' => $r->amount, 'fine' => $r->fine, 'collect_by' => "", 'discount' => 0, 'pay_via' => 15, 'collect_by' => 'online', 'remarks' => "Fees deposits via offline Payments Trx ID: " . $id, 'date' => date("Y-m-d"));
        // insert in DB
        $builder->insert('fee_payment_history', $arrayFees);
        // transaction voucher save function
        $getSeeting = $this->fees_model->get('transactions_links', array('branch_id' => get_loggedin_branch_id()), true);
        if ($getSeeting['status']) {
            $arrayTransaction = array('account_id' => $getSeeting['deposit'], 'amount' => $arrayFees['amount'] + $arrayFees['fine'], 'date' => $arrayFees['date']);
            $this->fees_model->saveTransaction($arrayTransaction);
        }
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OfflinePaymentsModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    public function typeSave($data = array())
    {
        $arrayData = array('branch_id' => $this->applicationModel->get_branch_id(), 'name' => $data['type_name'], 'note' => $data['note']);
        if (!isset($data['type_id'])) {
            $builder->insert('offline_payment_types', $arrayData);
        } else {
            $builder->where('id', $data['type_id']);
            $builder->update('offline_payment_types', $arrayData);
        }
    }
    public function getOfflinePaymentsList($where = array(), $single = false)
    {
        $builder->select('op.*,CONCAT_WS(" ",student.first_name, student.last_name) as fullname,student.email,student.mobileno,student.register_no,class.name as class_name,section.name as section_name,branch.name as branchname');
        $builder->from('offline_fees_payments as op');
        $builder->join('enroll', 'enroll.id = op.student_enroll_id', 'left');
        $builder->join('branch', 'branch.id = enroll.branch_id', 'left');
        $builder->join('student', 'student.id = enroll.student_id', 'left');
        $builder->join('class', 'class.id = enroll.class_id', 'left');
        $builder->join('section', 'section.id = enroll.section_id', 'left');
        if (!empty($where)) {
            $builder->where($where);
        }
        if ($single == true) {
            $result = $builder->get()->row_array();
        } else {
            $builder->order_by('op.id', 'ASC');
            $result = $builder->get()->getResult();
        }
        return $result;
    }
    public function update($id = '')
    {
        $r = $db->table('offline_fees_payments')->get('offline_fees_payments')->row();
        $arrayFees = array('allocation_id' => $r->fees_allocation_id, 'type_id' => $r->fees_type_id, 'amount' => $r->amount, 'fine' => $r->fine, 'collect_by' => "", 'discount' => 0, 'pay_via' => 15, 'collect_by' => 'online', 'remarks' => "Fees deposits via offline Payments Trx ID: " . $id, 'date' => date("Y-m-d"));
        // insert in DB
        $builder->insert('fee_payment_history', $arrayFees);
        // transaction voucher save function
        $getSeeting = $this->feesModel->get('transactions_links', array('branch_id' => get_loggedin_branch_id()), true);
        if ($getSeeting['status']) {
            $arrayTransaction = array('account_id' => $getSeeting['deposit'], 'amount' => $arrayFees['amount'] + $arrayFees['fine'], 'date' => $arrayFees['date']);
            $this->feesModel->saveTransaction($arrayTransaction);
        }
    }
}




Updated: /home/994924.cloudwaysapps.com/tdjkddfbdk/public_html/ci4_application/app/Models/OnlineexamModel.php
Before:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OnlineexamModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    // online exam save and update function
    public function saveExam($data, $branchID)
    {
        $onlineExam = array('title' => $data['title'], 'class_id' => $data['class_id'], 'section_id' => json_encode($this->request->getPost('section')), 'subject_id' => json_encode($this->request->getPost('subject')), 'limits_participation' => $data['participation_limit'], 'exam_start' => date('Y-m-d H:i:s', strtotime($data['start_date'] . " " . $data['start_time'])), 'exam_end' => date('Y-m-d H:i:s', strtotime($data['end_date'] . " " . $data['end_time'])), 'duration' => date('H:i:s', strtotime($data['duration'])), 'mark_type' => $data['mark_type'], 'passing_mark' => $data['passing_mark'], 'instruction' => $data['instruction'], 'session_id' => get_session_id(), 'publish_result' => $data['publish_result'], 'marks_display' => 0, 'neg_mark' => isset($data['negative_marking']) ? 1 : 0, 'marks_display' => isset($data['marks_display']) ? 1 : 0, 'question_type' => $data['question_type'], 'fee' => $data['exam_type'] == 1 ? $data['exam_fee'] : 0, 'exam_type' => $data['exam_type'], 'branch_id' => $branchID, 'created_at' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s'));
        if (!isset($_POST['id'])) {
            $onlineExam['publish_status'] = 0;
            $onlineExam['created_by'] = get_loggedin_user_id();
            $builder->insert('online_exam', $onlineExam);
        } else {
            $builder->where('id', $data['id']);
            $builder->update('online_exam', $onlineExam);
        }
    }
    public function examList()
    {
        $builder->select('online_exam.*,class.name as class_name,branch.name as branchname');
        $builder->from('online_exam');
        $builder->join('branch', 'branch.id = online_exam.branch_id', 'inner');
        $builder->join('class', 'class.id = online_exam.class_id', 'left');
        if (!is_superadmin_loggedin()) {
            $this->db->table('online_exam.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->order_by('online_exam.id', 'DESC');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['section_details'] = $this->getSectionDetails($value['section_id']);
        }
        return $result;
    }
    public function examListDT($postData, $currency_symbol = '')
    {
        $response = array();
        $sessionID = get_session_id();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'DESC' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`online_exam`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`online_exam`.`title` like '%" . $searchValue . "%' OR `online_exam`.`exam_start` like '%" . $searchValue . "%' OR `online_exam`.`exam_end` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $branchID = $db->escape(get_loggedin_branch_id());
            $search_arr[] = " `online_exam`.`branch_id` = {$branchID} ";
            if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
                $search_arr[] = " `online_exam`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        } else {
            $column_order[] = '`online_exam`.`id`';
        }
        // order
        $column_order[] = '`online_exam`.`title`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '`questions_qty`';
        $column_order[] = '`online_exam`.`exam_start`';
        $column_order[] = '`online_exam`.`exam_end`';
        $column_order[] = '`online_exam`.`duration`';
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        if (is_superadmin_loggedin()) {
            $sql = "SELECT `id` FROM `online_exam` WHERE `session_id` = '{$sessionID}'";
        } else {
            $branchID = $db->escape(get_loggedin_branch_id());
            $sql = "SELECT `id` FROM `online_exam` WHERE `branch_id` = {$branchID} AND `session_id` = '{$sessionID}'";
            if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
                $sql .= " AND `created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `id` FROM `online_exam` WHERE `session_id` = '{$sessionID}'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = '{$sessionID}'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        foreach ($records as $record) {
            if ($record->publish_status == 0) {
                $status = '';
            } else {
                $status = 'checked';
            }
            $row = array();
            $action = "";
            if (get_permission('add_questions', 'is_add')) {
                if ($record->publish_result == 0 && $record->publish_status == 1) {
                    $action .= '<button onclick="confirmModal(' . $db->escape(base_url('onlineexam/make_result_publish/' . $record->id)) . ')" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('make') . " " . translate('result_publish') . '"> <i class="far fa-square-poll-vertical"></i></button>';
                }
            }
            $action .= '<a href="' . base_url('onlineexam/question_list/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('view') . " " . translate('question') . '"> <i class="far fa-list-check"></i></a>';
            if ($record->publish_status == 0) {
                $action .= '<a href="' . base_url('onlineexam/manage_question/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('add_questions') . '"> <i class="far fa-question"></i></a>';
            }
            if (get_permission('online_exam', 'is_edit')) {
                $action .= '<a href="' . base_url('onlineexam/edit/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('edit') . '"> <i class="far fa-pen-nib"></i></a>';
            }
            if (get_permission('online_exam', 'is_delete')) {
                $action .= btn_delete('onlineexam/delete/' . $record->id);
            }
            $row[] = $count++;
            if (is_superadmin_loggedin()) {
                $row[] = $record->branchname;
            }
            $row[] = $record->title;
            $row[] = $record->class_name . " (" . $this->getSectionDetails($record->section_id) . ")";
            $row[] = $record->questions_qty;
            $row[] = _d($record->exam_start) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_start)) . "</p>";
            $row[] = _d($record->exam_end) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_end)) . "</p>";
            $row[] = $record->duration;
            $row[] = $record->exam_type == 0 ? translate('free') : $currency_symbol . $record->fee;
            $row[] = '<div class="material-switch ml-xs">
                        <input class="exam-status" id="examstatus_' . $record->id . '" data-id="' . $record->id . '" name="exam_status' . $record->id . '"
                        type="checkbox" ' . $status . ' />
                        <label for="examstatus_' . $record->id . '" class="label-primary"></label>
                        <span class="visible-print-block">' . ($status == 'checked' ? translate('yes') : translate('no')) . '</span>
                    </div>';
            $row[] = get_type_name_by_id('staff', $record->created_by);
            $row[] = $action;
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getSelectExamList($class_id)
    {
        $arrayData = array("" => translate('select'));
        if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
            $this->db->table('created_by', get_loggedin_user_id())->where();
        }
        $builder->where('class_id', $class_id);
        $this->db->table('session_id', get_session_id())->where();
        $builder->where('publish_status', 1);
        $builder->where('publish_result', 1);
        $result = $builder->get('online_exam')->getResult();
        foreach ($result as $row) {
            $arrayData[$row->id] = $row->title;
        }
        return $arrayData;
    }
    public function getSectionDetails($data)
    {
        $array = json_decode($data, true);
        $nameList = [];
        if (json_last_error() == JSON_ERROR_NONE) {
            foreach ($array as $key => $value) {
                $nameList[] = get_type_name_by_id('section', $value);
            }
        }
        $nameList = implode(', ', $nameList);
        return $nameList;
    }
    public function getSubjectDetails($data)
    {
        $array = json_decode($data, true);
        $nameList = [];
        if (json_last_error() == JSON_ERROR_NONE) {
            foreach ($array as $key => $value) {
                $nameList[] = get_type_name_by_id('subject', $value);
            }
        }
        $nameList = implode(',<br>', $nameList);
        return $nameList;
    }
    // questions save and update function
    public function saveQuestions()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $questionType = $this->request->getPost('question_type');
        if ($questionType == 2) {
            $answer = json_encode($this->request->getPost('answer'));
        } else {
            $answer = $this->request->getPost('answer');
        }
        $questionID = $this->request->getPost('question_id');
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $subjectID = $this->request->getPost('subject_id');
        $groupID = $this->request->getPost('group_id');
        $questionsExam = array('type' => $questionType, 'level' => $this->request->getPost('question_level'), 'group_id' => $groupID, 'question' => $this->request->getPost('question', false), 'opt_1' => $this->tagRemove($this->request->getPost('option1', false)), 'opt_2' => $this->tagRemove($this->request->getPost('option2', false)), 'opt_3' => $this->tagRemove($this->request->getPost('option3', false)), 'opt_4' => $this->tagRemove($this->request->getPost('option4', false)), 'answer' => $answer, 'mark' => $this->request->getPost('mark'));
        if (!empty($classID)) {
            $questionsExam['class_id'] = $classID;
        }
        if (!empty($sectionID)) {
            $questionsExam['section_id'] = $sectionID;
        }
        if (!empty($subjectID)) {
            $questionsExam['subject_id'] = $subjectID;
        }
        if (!empty($branchID)) {
            $questionsExam['branch_id'] = $branchID;
        }
        if (empty($questionID)) {
            $questionsExam['created_by'] = get_loggedin_user_id();
            $builder->insert('questions', $questionsExam);
        } else {
            $builder->where('id', $questionID);
            $builder->update('questions', $questionsExam);
        }
    }
    private function tagRemove($text = "")
    {
        $text = str_replace("<p>", "", $text);
        $text = str_replace("</p>", "", $text);
        return $text;
    }
    public function question_level()
    {
        $arrayLevel = array('' => translate("select"), '1' => translate("easy"), '2' => translate("medium"), '3' => translate("hard"));
        return $arrayLevel;
    }
    public function question_group($branch_id = '')
    {
        if (empty($branch_id)) {
            $array = array('' => translate('select_branch_first'));
        } else {
            $builder->where('branch_id', $branch_id);
            $result = $builder->get('question_group')->getResult();
            $array = array('' => translate('select'));
            foreach ($result as $row) {
                $array[$row->id] = $row->name;
            }
        }
        return $array;
    }
    public function question_type()
    {
        $arrayType = array('1' => translate("single_choice"), '2' => translate("multiple_choice"), '3' => translate("true/false"), '4' => translate("descriptive"));
        return $arrayType;
    }
    public function questionList($postData)
    {
        $response = array();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // Search
        $branchID = $db->escape($postData['branch_id']);
        $examID = $db->escape($postData['examID']);
        $negMark = $postData['negMark'];
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`questions`.`question` like '%" . $searchValue . "%' OR `question_group`.`name` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $showOwnquestion = $this->app_lib->getSchoolConfig($postData['branch_id'], 'show_own_question');
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $search_arr[] = " `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $questionGroup = $postData['questionGroup'];
        if ($questionGroup != '') {
            $questionGroup = $db->escape($questionGroup);
            $search_arr[] = " `questions`.`group_id` = {$questionGroup} ";
        }
        $questionType = $postData['questionType'];
        if ($questionType != '') {
            $questionType = $db->escape($questionType);
            $search_arr[] = " `questions`.`type` = {$questionType} ";
        }
        $questionLevel = $postData['questionLevel'];
        if ($questionLevel != '') {
            $questionLevel = $db->escape($questionLevel);
            $search_arr[] = " `questions`.`level` = {$questionLevel} ";
        }
        $classID = $postData['classID'];
        if ($classID != '') {
            $classID = $db->escape($classID);
            $search_arr[] = " `questions`.`class_id` = {$classID} ";
        }
        $sectionID = $postData['sectionID'];
        if ($sectionID != '') {
            $sectionID = $db->escape($sectionID);
            $search_arr[] = " `questions`.`section_id` = {$sectionID} ";
        }
        $subjectID = $postData['subjectID'];
        if ($subjectID != '') {
            $subjectID = $db->escape($subjectID);
            $search_arr[] = " `questions`.`subject_id` = {$subjectID} ";
        }
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        $userID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `questions`.`id` FROM `questions` WHERE `questions`.`branch_id` = {$branchID}";
        if (!is_superadmin_loggedin()) {
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $sql .= " AND `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `questions`.`id`,`question_group`.`name` as `group_name` FROM `questions` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id` WHERE `questions`.`branch_id` = {$branchID}";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `questions`.*, IFNULL(`questions_manage`.`marks`, `questions`.`mark`) as `marks`, IFNULL(`questions_manage`.`neg_marks`, 1) as `neg_marks`, `questions_manage`.`id` as `manage_id`, `branch`.`name`, `subject`.`name` as `subject_name`, `class`.`name` as `class_name`, `section`.`name` as `section_name`, `question_group`.`name` as `group_name` FROM `questions` INNER JOIN `branch` ON `branch`.`id` = `questions`.`branch_id` LEFT JOIN `questions_manage` ON `questions_manage`.`question_id` = `questions`.`id` and `questions_manage`.`onlineexam_id` = {$examID} LEFT JOIN `class` ON `class`.`id` = `questions`.`class_id` LEFT JOIN `section` ON `section`.`id` = `questions`.`section_id` LEFT JOIN `subject` ON `subject`.`id` = `questions`.`subject_id` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id` WHERE `questions`.`branch_id` = {$branchID}";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY `questions`.`id` ASC LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        $question_type = $this->onlineexam_model->question_type();
        $arrayLevel = $this->onlineexam_model->question_level();
        foreach ($records as $key => $record) {
            $checkbox_status = "";
            if (!empty($record->manage_id)) {
                $checkbox_status = "checked";
            }
            $row = array();
            $cb_row = '';
            $cb_row .= '<input type="hidden" name="question[' . $key . '][id]" value="' . $record->id . '">';
            $cb_row .= '<div class="checkbox-replace"><label class="i-checks">';
            $cb_row .= '<input type="checkbox" class="cb_question" name="question[' . $key . '][cb_id]" value="' . $record->id . '"' . $checkbox_status . '><i></i>';
            $cb_row .= '</label></div>';
            $row[] = $cb_row;
            $row[] = $count++;
            $row[] = strip_tags($record->question);
            $row[] = $record->group_name;
            $row[] = $record->class_name . " (" . $record->section_name . ")";
            $row[] = $record->subject_name;
            $row[] = $question_type[$record->type];
            $row[] = $arrayLevel[$record->level];
            $row[] = '<div class="form-group"><input type="text" class="form-control" name="question[' . $key . '][marks]" value="' . $record->marks . '"><span class="error"></span></div>';
            if ($negMark == 1) {
                $row[] = '<div class="form-group"><input type="text" class="form-control" name="question[' . $key . '][negative_marks]" value="' . $record->neg_marks . '"><span class="error"></span></div>';
            }
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function questionListDT($postData)
    {
        $response = array();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'asc' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`questions`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`questions`.`question` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $showOwnquestion = $this->app_lib->getSchoolConfig('', 'show_own_question');
            $branch_id = $db->escape(get_loggedin_branch_id());
            $search_arr[] = " `questions`.`branch_id` = {$branch_id} ";
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $search_arr[] = " `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        } else {
            $column_order[] = '`questions`.`branch_id`';
        }
        // order
        $column_order[] = '`questions`.`question`';
        $column_order[] = '`group_name`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '`subject`.`id`';
        $column_order[] = '`questions`.`type`';
        $column_order[] = '`questions`.`level`';
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        if (is_superadmin_loggedin()) {
            $sql = "SELECT `questions`.`id` FROM `questions`";
        } else {
            $branchID = $db->escape(get_loggedin_branch_id());
            $sql = "SELECT `questions`.`id` FROM `questions` WHERE `questions`.`branch_id` = {$branchID}";
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $sql .= " AND `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `questions`.`id` FROM `questions`";
        if (!empty($searchQuery)) {
            $sql .= " WHERE " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `questions`.`id`, `questions`.`question`, `questions`.`type`, `questions`.`level`, `branch`.`name`, `subject`.`name` as `subject_name`, `class`.`name` as `class_name`, `section`.`name` as `section_name`, `question_group`.`name` as `group_name` FROM `questions` INNER JOIN `branch` ON `branch`.`id` = `questions`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `questions`.`class_id` LEFT JOIN `section` ON `section`.`id` = `questions`.`section_id` LEFT JOIN `subject` ON `subject`.`id` = `questions`.`subject_id` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id`";
        if (!empty($searchQuery)) {
            $sql .= " WHERE " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        $question_type = $this->onlineexam_model->question_type();
        $arrayLevel = $this->onlineexam_model->question_level();
        foreach ($records as $record) {
            $row = array();
            $action = "";
            $action .= '<button data-loading-text="<i class=' . "'far fa-spinner fa-spin'" . '></i>" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('view') . '" onclick="getQuestion(' . $db->escape($record->id) . ', this);"><i class="far fa-bars"></i></button>';
            $action .= '<a href="' . base_url('onlineexam/question_edit/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('edit') . '"><i class="far fa-pen-nib"></i></a>';
            $action .= btn_delete('onlineexam/question_delete/' . $record->id);
            $row[] = $count++;
            if (is_superadmin_loggedin()) {
                $row[] = $record->name;
            }
            $row[] = strip_tags($record->question);
            $row[] = $record->group_name;
            $row[] = $record->class_name . " (" . $record->section_name . ")";
            $row[] = $record->subject_name;
            $row[] = $question_type[$record->type];
            $row[] = $arrayLevel[$record->level];
            $row[] = $action;
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getStudentSubmitted($online_examID = null)
    {
        $r = $db->table('online_exam_submitted')->get('online_exam_submitted')->row();
        return $r;
    }
    public function getExamQuestions($onlineexamID = null, $random_type = 0)
    {
        $builder->select('questions_manage.*,questions.id as qus_id,questions.*')->from('questions_manage');
        $builder->join('questions', 'questions.id = questions_manage.question_id');
        $builder->where('questions_manage.onlineexam_id', $onlineexamID);
        if ($random_type == 1) {
            $this->db->order_by('rand()');
        } else {
            $builder->order_by('questions_manage.id', 'DESC');
        }
        $query = $builder->get();
        return $query->getResult();
    }
    public function getExamResults($onlineexamID = null, $studentID = 0)
    {
        $sql = "SELECT `questions_manage`.*, `questions`.`id` as `qus_id`, `questions`.*, `online_exam_answer`.`answer` as `sb_ans` FROM `questions_manage` INNER JOIN `questions` ON `questions`.`id` = `questions_manage`.`question_id` LEFT JOIN `online_exam_answer` ON `online_exam_answer`.`online_exam_id` = `questions_manage`.`onlineexam_id` and `online_exam_answer`.`question_id` = `questions`.`id` and `online_exam_answer`.`student_id` = " . $db->escape($studentID) . " WHERE `questions_manage`.`onlineexam_id` = " . $db->escape($onlineexamID) . " ORDER BY `questions_manage`.`id` ASC";
        $query = $db->query($sql);
        return $query->getResult();
    }
    public function getExamDetails($onlineexamID, $status = true)
    {
        $onlineexamID = $db->escape($onlineexamID);
        $sessionID = $db->escape(get_session_id());
        $branchID = $db->escape(get_loggedin_branch_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = {$sessionID} AND `online_exam`.`id` = " . $onlineexamID;
        if ($status == true) {
            $sql .= " AND `online_exam`.`publish_status` = '1'";
        }
        if (!is_superadmin_loggedin()) {
            $sql .= " AND `online_exam`.`branch_id` = {$branchID}";
        }
        $records = $db->query($sql)->row();
        return $records;
    }
    public function getStudentAttempt($onlineexamID)
    {
        $builder->select('IFNULL(SUM(count), 0) as att');
        $this->db->table(array('student_id' => get_loggedin_user_id(), 'online_exam_id' => $onlineexamID))->where();
        $r = $builder->get('online_exam_attempts')->row();
        return $r->att;
    }
    public function addStudentAttemts($onlineexamID)
    {
        $query = $db->table('online_exam_attempts')->get('online_exam_attempts');
        if ($query->num_rows() > 0) {
            $builder->set('count', 'count+1', false);
            $this->db->table('id', $query->row()->id)->where();
            $builder->update('online_exam_attempts');
        } else {
            $this->db->table('online_exam_attempts', ['student_id' => get_loggedin_user_id(), 'online_exam_id' => $onlineexamID, 'count' => 1])->insert();
        }
    }
    public function getSubjectByClass($classID = '', $sectionID = '')
    {
        if (loggedin_role_id() == 3) {
            $restricted = $this->getSingle('branch', get_loggedin_branch_id(), true)->teacher_restricted;
            if ($restricted == 1) {
                $getClassTeacher = $this->getClassTeacherByClassSection($classID);
                if ($getClassTeacher == true) {
                    $query = $this->getSubjectList($classID, $sectionID);
                } else {
                    $builder->select('timetable_class.subject_id,subject.name as subjectname');
                    $builder->from('timetable_class');
                    $builder->join('section', 'section.id = timetable_class.section_id', 'left');
                    $builder->join('subject', 'subject.id = timetable_class.subject_id', 'left');
                    $this->db->table(array('timetable_class.teacher_id' => get_loggedin_user_id(), 'timetable_class.session_id' => get_session_id(), 'timetable_class.class_id' => $classID))->where();
                    $builder->group_by('timetable_class.subject_id');
                    $query = $builder->get();
                }
            } else {
                $query = $this->getSubjectList($classID, $sectionID);
            }
        } else {
            $query = $this->getSubjectList($classID, $sectionID);
        }
        return $query;
    }
    public function getSubjectList($classID = '')
    {
        $builder->select('subject_assign.subject_id, subject.name as subjectname');
        $builder->from('subject_assign');
        $builder->join('subject', 'subject.id = subject_assign.subject_id', 'left');
        $builder->where('class_id', $classID);
        $this->db->table('session_id', get_session_id())->where();
        $query = $builder->get();
        return $query;
    }
    public function getClassTeacherByClassSection($classID = '')
    {
        $builder->select('teacher_allocation.id');
        $builder->from('teacher_allocation');
        $this->db->table('teacher_allocation.teacher_id', get_loggedin_user_id())->where();
        $this->db->table('teacher_allocation.session_id', get_session_id())->where();
        $builder->where('teacher_allocation.class_id', $classID);
        $q = $builder->get()->num_rows();
        if ($q > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function examReport($examID = '', $classID = '', $branchID = '', $order_by_position = 0)
    {
        $builder->select('online_exam_submitted.student_id,online_exam_submitted.remark,online_exam_submitted.position,online_exam.id,online_exam.neg_mark,online_exam.mark_type,online_exam.passing_mark,student.first_name,student.last_name,student.register_no,student.mobileno,online_exam.title,online_exam.section_id,online_exam.subject_id,class.name as class_name');
        $builder->from('online_exam_submitted');
        $builder->join('online_exam', 'online_exam.id = online_exam_submitted.online_exam_id', 'inner');
        $builder->join('class', 'class.id = online_exam.class_id', 'left');
        $builder->join('student', 'student.id = online_exam_submitted.student_id', 'left');
        $builder->where('online_exam_submitted.online_exam_id', $examID);
        $this->db->table('online_exam.session_id', get_session_id())->where();
        $builder->where('online_exam.class_id', $classID);
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $examResult = $this->examResult($value['id'], $value['student_id']);
            $status = 0;
            $mark = 0;
            $score = 0;
            $total_neg_marks = $value['neg_mark'] == 0 ? 0 : $examResult['total_neg_marks'];
            if ($examResult['total_obtain_marks'] != 0) {
                if ($value['mark_type'] == 1) {
                    $obtain = ($examResult['total_obtain_marks'] - $total_neg_marks) * 100 / $examResult['total_marks'];
                    if ($obtain >= $value['passing_mark']) {
                        $status = 1;
                    } else {
                        $status = 0;
                    }
                } else {
                    $obtain = $examResult['total_obtain_marks'] - $total_neg_marks;
                    if ($obtain >= $value['passing_mark']) {
                        $status = 1;
                    } else {
                        $status = 0;
                    }
                }
                $mark = $examResult['total_obtain_marks'] - $total_neg_marks;
            }
            $score = $examResult['total_marks'] === 0 ? '0.00' : number_format(($examResult['total_obtain_marks'] - $total_neg_marks) * 100 / $examResult['total_marks'], 2, '.', '');
            $result[$key]['result'] = $status;
            $result[$key]['mark'] = $mark;
            $result[$key]['totalmark'] = $examResult['total_marks'];
            $result[$key]['score'] = $score;
        }
        if ($order_by_position == 1) {
            array_multisort(array_column($result, 'position'), SORT_ASC, $result);
        } else {
            array_multisort(array_column($result, 'score'), SORT_DESC, $result);
        }
        return $result;
    }
    public function examResult($examID, $studentID)
    {
        $result = $this->getExamResults($examID, $studentID);
        $correct_ans = 0;
        $total_question = 0;
        $total_neg_marks = 0;
        $total_marks = 0;
        $total_obtain_marks = 0;
        $wrong_ans = 0;
        $total_answered = 0;
        if (!empty($result)) {
            $total_question = count($result);
            foreach ($result as $key => $value) {
                $total_marks = $total_marks + $value->marks;
                if (!empty($value->sb_ans)) {
                    $total_answered++;
                    if ($value->type == 1 || $value->type == 3) {
                        if ($value->sb_ans == $value->answer) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    } elseif ($value->type == 2) {
                        if ($this->array_equal(json_decode($value->answer), json_decode($value->sb_ans))) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    } elseif ($value->type == 4) {
                        $correctAns = str_replace(" ", "_", $value->answer);
                        $studentAns = str_replace(" ", "_", $value->sb_ans);
                        if (strtolower($correctAns) == strtolower($studentAns)) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    }
                }
            }
        }
        return ['total_marks' => $total_marks, 'total_obtain_marks' => $total_obtain_marks, 'correct_ans' => $correct_ans, 'total_question' => $total_question, 'total_neg_marks' => $total_neg_marks, 'wrong_ans' => $wrong_ans, 'total_answered' => $total_answered];
    }
    public function array_equal($a, $b)
    {
        return is_array($a) && is_array($b) && count($a) == count($b) && array_diff($a, $b) === array_diff($b, $a);
    }
}




After:
<?php

namespace App\Models;

use CodeIgniter\Model;
class OnlineexamModel extends MYModel
{
    protected $db;

    public function __construct()
    {
        $this->db = \Config\Database::connect();
        parent::__construct();
    }
    // online exam save and update function
    public function saveExam($data, $branchID)
    {
        $onlineExam = array('title' => $data['title'], 'class_id' => $data['class_id'], 'section_id' => json_encode($this->request->getPost('section')), 'subject_id' => json_encode($this->request->getPost('subject')), 'limits_participation' => $data['participation_limit'], 'exam_start' => date('Y-m-d H:i:s', strtotime($data['start_date'] . " " . $data['start_time'])), 'exam_end' => date('Y-m-d H:i:s', strtotime($data['end_date'] . " " . $data['end_time'])), 'duration' => date('H:i:s', strtotime($data['duration'])), 'mark_type' => $data['mark_type'], 'passing_mark' => $data['passing_mark'], 'instruction' => $data['instruction'], 'session_id' => get_session_id(), 'publish_result' => $data['publish_result'], 'marks_display' => 0, 'neg_mark' => isset($data['negative_marking']) ? 1 : 0, 'marks_display' => isset($data['marks_display']) ? 1 : 0, 'question_type' => $data['question_type'], 'fee' => $data['exam_type'] == 1 ? $data['exam_fee'] : 0, 'exam_type' => $data['exam_type'], 'branch_id' => $branchID, 'created_at' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s'));
        if (!isset($_POST['id'])) {
            $onlineExam['publish_status'] = 0;
            $onlineExam['created_by'] = get_loggedin_user_id();
            $builder->insert('online_exam', $onlineExam);
        } else {
            $builder->where('id', $data['id']);
            $builder->update('online_exam', $onlineExam);
        }
    }
    public function examList()
    {
        $builder->select('online_exam.*,class.name as class_name,branch.name as branchname');
        $builder->from('online_exam');
        $builder->join('branch', 'branch.id = online_exam.branch_id', 'inner');
        $builder->join('class', 'class.id = online_exam.class_id', 'left');
        if (!is_superadmin_loggedin()) {
            $this->db->table('online_exam.branch_id', get_loggedin_branch_id())->where();
        }
        $builder->order_by('online_exam.id', 'DESC');
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $result[$key]['section_details'] = $this->getSectionDetails($value['section_id']);
        }
        return $result;
    }
    public function examListDT($postData, $currency_symbol = '')
    {
        $response = array();
        $sessionID = get_session_id();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'DESC' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`online_exam`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`online_exam`.`title` like '%" . $searchValue . "%' OR `online_exam`.`exam_start` like '%" . $searchValue . "%' OR `online_exam`.`exam_end` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $branchID = $db->escape(get_loggedin_branch_id());
            $search_arr[] = " `online_exam`.`branch_id` = {$branchID} ";
            if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
                $search_arr[] = " `online_exam`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        } else {
            $column_order[] = '`online_exam`.`id`';
        }
        // order
        $column_order[] = '`online_exam`.`title`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '`questions_qty`';
        $column_order[] = '`online_exam`.`exam_start`';
        $column_order[] = '`online_exam`.`exam_end`';
        $column_order[] = '`online_exam`.`duration`';
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        if (is_superadmin_loggedin()) {
            $sql = "SELECT `id` FROM `online_exam` WHERE `session_id` = '{$sessionID}'";
        } else {
            $branchID = $db->escape(get_loggedin_branch_id());
            $sql = "SELECT `id` FROM `online_exam` WHERE `branch_id` = {$branchID} AND `session_id` = '{$sessionID}'";
            if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
                $sql .= " AND `created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `id` FROM `online_exam` WHERE `session_id` = '{$sessionID}'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = '{$sessionID}'";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        foreach ($records as $record) {
            if ($record->publish_status == 0) {
                $status = '';
            } else {
                $status = 'checked';
            }
            $row = array();
            $action = "";
            if (get_permission('add_questions', 'is_add')) {
                if ($record->publish_result == 0 && $record->publish_status == 1) {
                    $action .= '<button onclick="confirmModal(' . $db->escape(base_url('onlineexam/make_result_publish/' . $record->id)) . ')" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('make') . " " . translate('result_publish') . '"> <i class="far fa-square-poll-vertical"></i></button>';
                }
            }
            $action .= '<a href="' . base_url('onlineexam/question_list/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('view') . " " . translate('question') . '"> <i class="far fa-list-check"></i></a>';
            if ($record->publish_status == 0) {
                $action .= '<a href="' . base_url('onlineexam/manage_question/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('add_questions') . '"> <i class="far fa-question"></i></a>';
            }
            if (get_permission('online_exam', 'is_edit')) {
                $action .= '<a href="' . base_url('onlineexam/edit/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('edit') . '"> <i class="far fa-pen-nib"></i></a>';
            }
            if (get_permission('online_exam', 'is_delete')) {
                $action .= btn_delete('onlineexam/delete/' . $record->id);
            }
            $row[] = $count++;
            if (is_superadmin_loggedin()) {
                $row[] = $record->branchname;
            }
            $row[] = $record->title;
            $row[] = $record->class_name . " (" . $this->getSectionDetails($record->section_id) . ")";
            $row[] = $record->questions_qty;
            $row[] = _d($record->exam_start) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_start)) . "</p>";
            $row[] = _d($record->exam_end) . "<p class='text-muted'>" . date("h:i A", strtotime($record->exam_end)) . "</p>";
            $row[] = $record->duration;
            $row[] = $record->exam_type == 0 ? translate('free') : $currency_symbol . $record->fee;
            $row[] = '<div class="material-switch ml-xs">
                        <input class="exam-status" id="examstatus_' . $record->id . '" data-id="' . $record->id . '" name="exam_status' . $record->id . '"
                        type="checkbox" ' . $status . ' />
                        <label for="examstatus_' . $record->id . '" class="label-primary"></label>
                        <span class="visible-print-block">' . ($status == 'checked' ? translate('yes') : translate('no')) . '</span>
                    </div>';
            $row[] = get_type_name_by_id('staff', $record->created_by);
            $row[] = $action;
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getSelectExamList($class_id)
    {
        $arrayData = array("" => translate('select'));
        if (!is_superadmin_loggedin() && !is_admin_loggedin()) {
            $this->db->table('created_by', get_loggedin_user_id())->where();
        }
        $builder->where('class_id', $class_id);
        $this->db->table('session_id', get_session_id())->where();
        $builder->where('publish_status', 1);
        $builder->where('publish_result', 1);
        $result = $builder->get('online_exam')->getResult();
        foreach ($result as $row) {
            $arrayData[$row->id] = $row->title;
        }
        return $arrayData;
    }
    public function getSectionDetails($data)
    {
        $array = json_decode($data, true);
        $nameList = [];
        if (json_last_error() == JSON_ERROR_NONE) {
            foreach ($array as $key => $value) {
                $nameList[] = get_type_name_by_id('section', $value);
            }
        }
        $nameList = implode(', ', $nameList);
        return $nameList;
    }
    public function getSubjectDetails($data)
    {
        $array = json_decode($data, true);
        $nameList = [];
        if (json_last_error() == JSON_ERROR_NONE) {
            foreach ($array as $key => $value) {
                $nameList[] = get_type_name_by_id('subject', $value);
            }
        }
        $nameList = implode(',<br>', $nameList);
        return $nameList;
    }
    // questions save and update function
    public function saveQuestions()
    {
        $branchID = $this->applicationModel->get_branch_id();
        $questionType = $this->request->getPost('question_type');
        if ($questionType == 2) {
            $answer = json_encode($this->request->getPost('answer'));
        } else {
            $answer = $this->request->getPost('answer');
        }
        $questionID = $this->request->getPost('question_id');
        $classID = $this->request->getPost('class_id');
        $sectionID = $this->request->getPost('section_id');
        $subjectID = $this->request->getPost('subject_id');
        $groupID = $this->request->getPost('group_id');
        $questionsExam = array('type' => $questionType, 'level' => $this->request->getPost('question_level'), 'group_id' => $groupID, 'question' => $this->request->getPost('question', false), 'opt_1' => $this->tagRemove($this->request->getPost('option1', false)), 'opt_2' => $this->tagRemove($this->request->getPost('option2', false)), 'opt_3' => $this->tagRemove($this->request->getPost('option3', false)), 'opt_4' => $this->tagRemove($this->request->getPost('option4', false)), 'answer' => $answer, 'mark' => $this->request->getPost('mark'));
        if (!empty($classID)) {
            $questionsExam['class_id'] = $classID;
        }
        if (!empty($sectionID)) {
            $questionsExam['section_id'] = $sectionID;
        }
        if (!empty($subjectID)) {
            $questionsExam['subject_id'] = $subjectID;
        }
        if (!empty($branchID)) {
            $questionsExam['branch_id'] = $branchID;
        }
        if (empty($questionID)) {
            $questionsExam['created_by'] = get_loggedin_user_id();
            $builder->insert('questions', $questionsExam);
        } else {
            $builder->where('id', $questionID);
            $builder->update('questions', $questionsExam);
        }
    }
    private function tagRemove($text = "")
    {
        $text = str_replace("<p>", "", $text);
        $text = str_replace("</p>", "", $text);
        return $text;
    }
    public function question_level()
    {
        $arrayLevel = array('' => translate("select"), '1' => translate("easy"), '2' => translate("medium"), '3' => translate("hard"));
        return $arrayLevel;
    }
    public function question_group($branch_id = '')
    {
        if (empty($branch_id)) {
            $array = array('' => translate('select_branch_first'));
        } else {
            $builder->where('branch_id', $branch_id);
            $result = $builder->get('question_group')->getResult();
            $array = array('' => translate('select'));
            foreach ($result as $row) {
                $array[$row->id] = $row->name;
            }
        }
        return $array;
    }
    public function question_type()
    {
        $arrayType = array('1' => translate("single_choice"), '2' => translate("multiple_choice"), '3' => translate("true/false"), '4' => translate("descriptive"));
        return $arrayType;
    }
    public function questionList($postData)
    {
        $response = array();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // Search
        $branchID = $db->escape($postData['branch_id']);
        $examID = $db->escape($postData['examID']);
        $negMark = $postData['negMark'];
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`questions`.`question` like '%" . $searchValue . "%' OR `question_group`.`name` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $showOwnquestion = $this->app_lib->getSchoolConfig($postData['branch_id'], 'show_own_question');
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $search_arr[] = " `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $questionGroup = $postData['questionGroup'];
        if ($questionGroup != '') {
            $questionGroup = $db->escape($questionGroup);
            $search_arr[] = " `questions`.`group_id` = {$questionGroup} ";
        }
        $questionType = $postData['questionType'];
        if ($questionType != '') {
            $questionType = $db->escape($questionType);
            $search_arr[] = " `questions`.`type` = {$questionType} ";
        }
        $questionLevel = $postData['questionLevel'];
        if ($questionLevel != '') {
            $questionLevel = $db->escape($questionLevel);
            $search_arr[] = " `questions`.`level` = {$questionLevel} ";
        }
        $classID = $postData['classID'];
        if ($classID != '') {
            $classID = $db->escape($classID);
            $search_arr[] = " `questions`.`class_id` = {$classID} ";
        }
        $sectionID = $postData['sectionID'];
        if ($sectionID != '') {
            $sectionID = $db->escape($sectionID);
            $search_arr[] = " `questions`.`section_id` = {$sectionID} ";
        }
        $subjectID = $postData['subjectID'];
        if ($subjectID != '') {
            $subjectID = $db->escape($subjectID);
            $search_arr[] = " `questions`.`subject_id` = {$subjectID} ";
        }
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        $userID = $db->escape(get_loggedin_user_id());
        $sql = "SELECT `questions`.`id` FROM `questions` WHERE `questions`.`branch_id` = {$branchID}";
        if (!is_superadmin_loggedin()) {
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $sql .= " AND `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `questions`.`id`,`question_group`.`name` as `group_name` FROM `questions` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id` WHERE `questions`.`branch_id` = {$branchID}";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `questions`.*, IFNULL(`questions_manage`.`marks`, `questions`.`mark`) as `marks`, IFNULL(`questions_manage`.`neg_marks`, 1) as `neg_marks`, `questions_manage`.`id` as `manage_id`, `branch`.`name`, `subject`.`name` as `subject_name`, `class`.`name` as `class_name`, `section`.`name` as `section_name`, `question_group`.`name` as `group_name` FROM `questions` INNER JOIN `branch` ON `branch`.`id` = `questions`.`branch_id` LEFT JOIN `questions_manage` ON `questions_manage`.`question_id` = `questions`.`id` and `questions_manage`.`onlineexam_id` = {$examID} LEFT JOIN `class` ON `class`.`id` = `questions`.`class_id` LEFT JOIN `section` ON `section`.`id` = `questions`.`section_id` LEFT JOIN `subject` ON `subject`.`id` = `questions`.`subject_id` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id` WHERE `questions`.`branch_id` = {$branchID}";
        if (!empty($searchQuery)) {
            $sql .= " AND " . $searchQuery;
        }
        $sql .= " ORDER BY `questions`.`id` ASC LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        $question_type = $this->onlineexamModel->question_type();
        $arrayLevel = $this->onlineexamModel->question_level();
        foreach ($records as $key => $record) {
            $checkbox_status = "";
            if (!empty($record->manage_id)) {
                $checkbox_status = "checked";
            }
            $row = array();
            $cb_row = '';
            $cb_row .= '<input type="hidden" name="question[' . $key . '][id]" value="' . $record->id . '">';
            $cb_row .= '<div class="checkbox-replace"><label class="i-checks">';
            $cb_row .= '<input type="checkbox" class="cb_question" name="question[' . $key . '][cb_id]" value="' . $record->id . '"' . $checkbox_status . '><i></i>';
            $cb_row .= '</label></div>';
            $row[] = $cb_row;
            $row[] = $count++;
            $row[] = strip_tags($record->question);
            $row[] = $record->group_name;
            $row[] = $record->class_name . " (" . $record->section_name . ")";
            $row[] = $record->subject_name;
            $row[] = $question_type[$record->type];
            $row[] = $arrayLevel[$record->level];
            $row[] = '<div class="form-group"><input type="text" class="form-control" name="question[' . $key . '][marks]" value="' . $record->marks . '"><span class="error"></span></div>';
            if ($negMark == 1) {
                $row[] = '<div class="form-group"><input type="text" class="form-control" name="question[' . $key . '][negative_marks]" value="' . $record->neg_marks . '"><span class="error"></span></div>';
            }
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function questionListDT($postData)
    {
        $response = array();
        // read value
        $draw = $postData['draw'];
        $start = $postData['start'];
        $rowperpage = $postData['length'];
        // Rows display per page
        $searchValue = $postData['search']['value'];
        // Search value
        // order
        $columnIndex = empty($postData['order'][0]['column']) ? 0 : $postData['order'][0]['column'];
        // Column index
        $columnSortOrder = empty($postData['order'][0]['dir']) ? 'asc' : $postData['order'][0]['dir'];
        // asc or desc
        $column_order = array('`questions`.`id`');
        $search_arr = array();
        $searchQuery = "";
        if ($searchValue != '') {
            $search_arr[] = " (`questions`.`question` like '%" . $searchValue . "%') ";
        }
        if (!is_superadmin_loggedin()) {
            $showOwnquestion = $this->app_lib->getSchoolConfig('', 'show_own_question');
            $branch_id = $db->escape(get_loggedin_branch_id());
            $search_arr[] = " `questions`.`branch_id` = {$branch_id} ";
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $search_arr[] = " `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        } else {
            $column_order[] = '`questions`.`branch_id`';
        }
        // order
        $column_order[] = '`questions`.`question`';
        $column_order[] = '`group_name`';
        $column_order[] = '`class`.`id`';
        $column_order[] = '`subject`.`id`';
        $column_order[] = '`questions`.`type`';
        $column_order[] = '`questions`.`level`';
        if (count($search_arr) > 0) {
            $searchQuery = implode("AND", $search_arr);
        }
        // Total number of records without filtering
        if (is_superadmin_loggedin()) {
            $sql = "SELECT `questions`.`id` FROM `questions`";
        } else {
            $branchID = $db->escape(get_loggedin_branch_id());
            $sql = "SELECT `questions`.`id` FROM `questions` WHERE `questions`.`branch_id` = {$branchID}";
            if (!empty($showOwnquestion->show_own_question) && $showOwnquestion->show_own_question == 1) {
                $sql .= " AND `questions`.`created_by` = " . $db->escape(get_loggedin_user_id());
            }
        }
        $records = $db->query($sql)->result();
        $totalRecords = count($records);
        // Total number of record with filtering
        $sql = "SELECT `questions`.`id` FROM `questions`";
        if (!empty($searchQuery)) {
            $sql .= " WHERE " . $searchQuery;
        }
        $records = $db->query($sql)->result();
        $totalRecordwithFilter = count($records);
        // Fetch records
        $sql = "SELECT `questions`.`id`, `questions`.`question`, `questions`.`type`, `questions`.`level`, `branch`.`name`, `subject`.`name` as `subject_name`, `class`.`name` as `class_name`, `section`.`name` as `section_name`, `question_group`.`name` as `group_name` FROM `questions` INNER JOIN `branch` ON `branch`.`id` = `questions`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `questions`.`class_id` LEFT JOIN `section` ON `section`.`id` = `questions`.`section_id` LEFT JOIN `subject` ON `subject`.`id` = `questions`.`subject_id` LEFT JOIN `question_group` ON `question_group`.`id` = `questions`.`group_id`";
        if (!empty($searchQuery)) {
            $sql .= " WHERE " . $searchQuery;
        }
        $sql .= " ORDER BY " . $column_order[$columnIndex] . " {$columnSortOrder} LIMIT {$start}, {$rowperpage}";
        $records = $db->query($sql)->result();
        $data = array();
        $count = $start + 1;
        $question_type = $this->onlineexamModel->question_type();
        $arrayLevel = $this->onlineexamModel->question_level();
        foreach ($records as $record) {
            $row = array();
            $action = "";
            $action .= '<button data-loading-text="<i class=' . "'far fa-spinner fa-spin'" . '></i>" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('view') . '" onclick="getQuestion(' . $db->escape($record->id) . ', this);"><i class="far fa-bars"></i></button>';
            $action .= '<a href="' . base_url('onlineexam/question_edit/' . $record->id) . '" class="btn btn-circle btn-default icon" data-toggle="tooltip" data-original-title="' . translate('edit') . '"><i class="far fa-pen-nib"></i></a>';
            $action .= btn_delete('onlineexam/question_delete/' . $record->id);
            $row[] = $count++;
            if (is_superadmin_loggedin()) {
                $row[] = $record->name;
            }
            $row[] = strip_tags($record->question);
            $row[] = $record->group_name;
            $row[] = $record->class_name . " (" . $record->section_name . ")";
            $row[] = $record->subject_name;
            $row[] = $question_type[$record->type];
            $row[] = $arrayLevel[$record->level];
            $row[] = $action;
            $data[] = $row;
        }
        // Response
        $response = array("draw" => intval($draw), "recordsTotal" => $totalRecords, "recordsFiltered" => $totalRecordwithFilter, "data" => $data);
        return json_encode($response);
    }
    public function getStudentSubmitted($online_examID = null)
    {
        $r = $db->table('online_exam_submitted')->get('online_exam_submitted')->row();
        return $r;
    }
    public function getExamQuestions($onlineexamID = null, $random_type = 0)
    {
        $builder->select('questions_manage.*,questions.id as qus_id,questions.*')->from('questions_manage');
        $builder->join('questions', 'questions.id = questions_manage.question_id');
        $builder->where('questions_manage.onlineexam_id', $onlineexamID);
        if ($random_type == 1) {
            $this->db->order_by('rand()');
        } else {
            $builder->order_by('questions_manage.id', 'DESC');
        }
        $query = $builder->get();
        return $query->getResult();
    }
    public function getExamResults($onlineexamID = null, $studentID = 0)
    {
        $sql = "SELECT `questions_manage`.*, `questions`.`id` as `qus_id`, `questions`.*, `online_exam_answer`.`answer` as `sb_ans` FROM `questions_manage` INNER JOIN `questions` ON `questions`.`id` = `questions_manage`.`question_id` LEFT JOIN `online_exam_answer` ON `online_exam_answer`.`online_exam_id` = `questions_manage`.`onlineexam_id` and `online_exam_answer`.`question_id` = `questions`.`id` and `online_exam_answer`.`student_id` = " . $db->escape($studentID) . " WHERE `questions_manage`.`onlineexam_id` = " . $db->escape($onlineexamID) . " ORDER BY `questions_manage`.`id` ASC";
        $query = $db->query($sql);
        return $query->getResult();
    }
    public function getExamDetails($onlineexamID, $status = true)
    {
        $onlineexamID = $db->escape($onlineexamID);
        $sessionID = $db->escape(get_session_id());
        $branchID = $db->escape(get_loggedin_branch_id());
        $sql = "SELECT `online_exam`.*, `class`.`name` as `class_name`,(SELECT COUNT(`id`) FROM `questions_manage` WHERE `questions_manage`.`onlineexam_id`=`online_exam`.`id`) as `questions_qty`, `branch`.`name` as `branchname` FROM `online_exam` INNER JOIN `branch` ON `branch`.`id` = `online_exam`.`branch_id` LEFT JOIN `class` ON `class`.`id` = `online_exam`.`class_id` WHERE `online_exam`.`session_id` = {$sessionID} AND `online_exam`.`id` = " . $onlineexamID;
        if ($status == true) {
            $sql .= " AND `online_exam`.`publish_status` = '1'";
        }
        if (!is_superadmin_loggedin()) {
            $sql .= " AND `online_exam`.`branch_id` = {$branchID}";
        }
        $records = $db->query($sql)->row();
        return $records;
    }
    public function getStudentAttempt($onlineexamID)
    {
        $builder->select('IFNULL(SUM(count), 0) as att');
        $this->db->table(array('student_id' => get_loggedin_user_id(), 'online_exam_id' => $onlineexamID))->where();
        $r = $builder->get('online_exam_attempts')->row();
        return $r->att;
    }
    public function addStudentAttemts($onlineexamID)
    {
        $query = $db->table('online_exam_attempts')->get('online_exam_attempts');
        if ($query->num_rows() > 0) {
            $builder->set('count', 'count+1', false);
            $this->db->table('id', $query->row()->id)->where();
            $builder->update('online_exam_attempts');
        } else {
            $this->db->table('online_exam_attempts', ['student_id' => get_loggedin_user_id(), 'online_exam_id' => $onlineexamID, 'count' => 1])->insert();
        }
    }
    public function getSubjectByClass($classID = '', $sectionID = '')
    {
        if (loggedin_role_id() == 3) {
            $restricted = $this->getSingle('branch', get_loggedin_branch_id(), true)->teacher_restricted;
            if ($restricted == 1) {
                $getClassTeacher = $this->getClassTeacherByClassSection($classID);
                if ($getClassTeacher == true) {
                    $query = $this->getSubjectList($classID, $sectionID);
                } else {
                    $builder->select('timetable_class.subject_id,subject.name as subjectname');
                    $builder->from('timetable_class');
                    $builder->join('section', 'section.id = timetable_class.section_id', 'left');
                    $builder->join('subject', 'subject.id = timetable_class.subject_id', 'left');
                    $this->db->table(array('timetable_class.teacher_id' => get_loggedin_user_id(), 'timetable_class.session_id' => get_session_id(), 'timetable_class.class_id' => $classID))->where();
                    $builder->group_by('timetable_class.subject_id');
                    $query = $builder->get();
                }
            } else {
                $query = $this->getSubjectList($classID, $sectionID);
            }
        } else {
            $query = $this->getSubjectList($classID, $sectionID);
        }
        return $query;
    }
    public function getSubjectList($classID = '')
    {
        $builder->select('subject_assign.subject_id, subject.name as subjectname');
        $builder->from('subject_assign');
        $builder->join('subject', 'subject.id = subject_assign.subject_id', 'left');
        $builder->where('class_id', $classID);
        $this->db->table('session_id', get_session_id())->where();
        $query = $builder->get();
        return $query;
    }
    public function getClassTeacherByClassSection($classID = '')
    {
        $builder->select('teacher_allocation.id');
        $builder->from('teacher_allocation');
        $this->db->table('teacher_allocation.teacher_id', get_loggedin_user_id())->where();
        $this->db->table('teacher_allocation.session_id', get_session_id())->where();
        $builder->where('teacher_allocation.class_id', $classID);
        $q = $builder->get()->num_rows();
        if ($q > 0) {
            return true;
        } else {
            return false;
        }
    }
    public function examReport($examID = '', $classID = '', $branchID = '', $order_by_position = 0)
    {
        $builder->select('online_exam_submitted.student_id,online_exam_submitted.remark,online_exam_submitted.position,online_exam.id,online_exam.neg_mark,online_exam.mark_type,online_exam.passing_mark,student.first_name,student.last_name,student.register_no,student.mobileno,online_exam.title,online_exam.section_id,online_exam.subject_id,class.name as class_name');
        $builder->from('online_exam_submitted');
        $builder->join('online_exam', 'online_exam.id = online_exam_submitted.online_exam_id', 'inner');
        $builder->join('class', 'class.id = online_exam.class_id', 'left');
        $builder->join('student', 'student.id = online_exam_submitted.student_id', 'left');
        $builder->where('online_exam_submitted.online_exam_id', $examID);
        $this->db->table('online_exam.session_id', get_session_id())->where();
        $builder->where('online_exam.class_id', $classID);
        $result = $builder->get()->result_array();
        foreach ($result as $key => $value) {
            $examResult = $this->examResult($value['id'], $value['student_id']);
            $status = 0;
            $mark = 0;
            $score = 0;
            $total_neg_marks = $value['neg_mark'] == 0 ? 0 : $examResult['total_neg_marks'];
            if ($examResult['total_obtain_marks'] != 0) {
                if ($value['mark_type'] == 1) {
                    $obtain = ($examResult['total_obtain_marks'] - $total_neg_marks) * 100 / $examResult['total_marks'];
                    if ($obtain >= $value['passing_mark']) {
                        $status = 1;
                    } else {
                        $status = 0;
                    }
                } else {
                    $obtain = $examResult['total_obtain_marks'] - $total_neg_marks;
                    if ($obtain >= $value['passing_mark']) {
                        $status = 1;
                    } else {
                        $status = 0;
                    }
                }
                $mark = $examResult['total_obtain_marks'] - $total_neg_marks;
            }
            $score = $examResult['total_marks'] === 0 ? '0.00' : number_format(($examResult['total_obtain_marks'] - $total_neg_marks) * 100 / $examResult['total_marks'], 2, '.', '');
            $result[$key]['result'] = $status;
            $result[$key]['mark'] = $mark;
            $result[$key]['totalmark'] = $examResult['total_marks'];
            $result[$key]['score'] = $score;
        }
        if ($order_by_position == 1) {
            array_multisort(array_column($result, 'position'), SORT_ASC, $result);
        } else {
            array_multisort(array_column($result, 'score'), SORT_DESC, $result);
        }
        return $result;
    }
    public function examResult($examID, $studentID)
    {
        $result = $this->getExamResults($examID, $studentID);
        $correct_ans = 0;
        $total_question = 0;
        $total_neg_marks = 0;
        $total_marks = 0;
        $total_obtain_marks = 0;
        $wrong_ans = 0;
        $total_answered = 0;
        if (!empty($result)) {
            $total_question = count($result);
            foreach ($result as $key => $value) {
                $total_marks = $total_marks + $value->marks;
                if (!empty($value->sb_ans)) {
                    $total_answered++;
                    if ($value->type == 1 || $value->type == 3) {
                        if ($value->sb_ans == $value->answer) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    } elseif ($value->type == 2) {
                        if ($this->array_equal(json_decode($value->answer), json_decode($value->sb_ans))) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    } elseif ($value->type == 4) {
                        $correctAns = str_replace(" ", "_", $value->answer);
                        $studentAns = str_replace(" ", "_", $value->sb_ans);
                        if (strtolower($correctAns) == strtolower($studentAns)) {
                            $correct_ans++;
                            $total_obtain_marks = $total_obtain_marks + $value->marks;
                        } else {
                            $total_neg_marks = $total_neg_marks + $value->neg_marks;
                            $wrong_ans++;
                        }
                    }
                }
            }
        }
        return ['total_marks' => $total_marks, 'total_obtain_marks' => $total_obtain_marks, 'correct_ans' => $correct_ans, 'total_question' => $total_question, 'total_neg_marks' => $total_neg_marks, 'wrong_ans' => $wrong_ans, 'total_answered' => $total_answered];
    }
    public function array_equal($a, $b)
    {
        return is_array($a) && is_array($b) && count($a) == count($b) && array_diff($a, $b) === array_diff($b, $a);
    }
}




